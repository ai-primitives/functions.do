# https://payloadcms.com/docs llms-full.txt

## Open-source Next.js Backend
# What is Payload?

Introduction to Payload — The open-source Next.js backend - YouTube

Payload

10.5K subscribers

[Introduction to Payload — The open-source Next.js backend](https://www.youtube.com/watch?v=ftohATkHBi0)

Payload

Search

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

Watch later

Share

Copy link

Watch on

0:00

/ •Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=ftohATkHBi0 "Watch on YouTube")

**Payload is the Next.js fullstack framework.** Write a Payload Config and instantly get:

- A full Admin Panel using React server / client components, matching the shape of your data and completely extensible with your own React components
- Automatic database schema, including direct DB access and ownership, with migrations, transactions, proper indexing, and more
- Instant REST, GraphQL, and straight-to-DB Node.js APIs
- Authentication which can be used in your own apps
- A deeply customizable access control pattern
- File storage and image management tools like cropping / focal point selection
- Live preview - see your frontend render content changes in realtime as you update
- Lots more

[**Instant backend superpowers**](https://payloadcms.com/docs/getting-started/what-is-payload#instant-backend-superpowers)

No matter what you're building, Payload will give you backend superpowers. Your entire Payload config can be installed in one line into any existing Next.js app, and is designed to catapult your development process. Payload takes the most complex and time-consuming parts of any modern web app and makes them simple.

[**Open source - deploy anywhere, including Vercel**](https://payloadcms.com/docs/getting-started/what-is-payload#open-source-deploy-anywhere-including-vercel)

It's fully open source with an MIT license and you can self-host anywhere that you can run a Node.js app. You can also deploy serverless to hosts like Vercel, right inside your existing Next.js application.

[**Code-first and version controlled**](https://payloadcms.com/docs/getting-started/what-is-payload#code-first-and-version-controlled)

In Payload, there are no "click ops" - as in clicking around in an Admin Panel to define your schema. In Payload, everything is done the right way—code-first and version controlled like a proper backend. But once developers define how Payload should work, non-technical users can independently make use of its Admin Panel to manage whatever they need to without having to know code whatsoever.

[**Fully extensible**](https://payloadcms.com/docs/getting-started/what-is-payload#fully-extensible)

Even in spite of how much you get out of the box, you still have full control over every aspect of your app - be it database, admin UI, or anything else. Every part of Payload has been designed to be extensible and customizable with modern TypeScript / React. And you'll fully understand the code that you write.

[**Use Cases**](https://payloadcms.com/docs/getting-started/what-is-payload#use-cases)

Payload started as a headless Content Management System (CMS), but since, we've seen our community leverage Payload in ways far outside of simply managing pages and blog posts. It's grown into a full-stack TypeScript app framework.

Large enterprises use Payload to power significant internal tools, retailers power their entire storefronts without the need for headless Shopify, and massive amounts of digital assets are stored + managed within Payload. Of course, websites large and small still use Payload for content management as well.

[**Headless CMS**](https://payloadcms.com/docs/getting-started/what-is-payload#headless-cms)

The biggest barrier in large web projects cited by marketers is engineering. On the flip side, engineers say the opposite. This is a big problem that has yet to be solved even though we have countless CMS options.

Payload has restored a little love back into the dev / marketer equation with features like Live Preview, redirects, form builders, visual editing, static A/B testing, and more. But even with all this focus on marketing efficiency, we aren't compromising on the developer experience. That way engineers and marketers alike can be proud of the products they build.

If you're building a website and your frontend is on Next.js, then Payload is a no-brainer.

Instead of going out and signing up for a SaaS vendor that makes it so you have to manage two completely separate concerns, with little to no native connection back and forth, just install Payload in your existing Next.js repo and instantly get a full CMS.

Get started with Payload as a CMS using our official Website template:

1

npx create-payload-app@latest -t website

[**Enterprise Tool**](https://payloadcms.com/docs/getting-started/what-is-payload#enterprise-tool)

When a large organization starts up a new software initiative, there's a lot of plumbing to take care of.

- Scaffold the data layer with an ORM or an app framework like Ruby on Rails or Laravel
- Implement their SSO provider for authentication
- Design an access control pattern for authorization
- Open up any REST endpoints required or implement GraphQL queries / mutations
- Implement a migrations workflow for the database as it changes over time
- Integrate with other third party solutions by crafting a system of webhooks or similar

And then there's the [Admin Panel](https://payloadcms.com/docs/admin/overview). Most enterprise tools require an admin UI, and building one from scratch can be the most time-consuming aspect of any new enterprise tool. There are off-the-shelf packages for app frameworks like Rails, but often the customization is so involved that using Material UI or similar from scratch might be better.

Then there are no-code admin builders that could be used. However, wiring up access control and the connection to the data layer, with proper version control, makes this a challenging task as well.

That's where Payload comes in. Payload instantly provides all of this out of the box, making complex internal tools extremely simple to both spin up and maintain over time. The only custom code that will need to be written is any custom business logic. That means Payload can expedite timelines, keep budgets low, and allow engineers to focus on their specific requirements rather than complex backend / admin UI plumbing.

Generally, the best place to start for a new enterprise tool is with a blank canvas, where you can define your own functionality:

1

npx create-payload-app@latest -t blank

[**Headless Commerce**](https://payloadcms.com/docs/getting-started/what-is-payload#headless-commerce)

Companies who prioritize UX generally run into frontend constraints with traditional commerce vendors. These companies will then opt for frontend frameworks like Next.js which allow them to fine-tune their user experience as much as possible—promoting conversions, personalizing experiences, and optimizing for SEO.

But the challenge with using something like Next.js for headless commerce is that in order for non-technical users to manage the storefront, you instantly need to pair a headless commerce product with a headless CMS. Then, your editors need to bounce back and forth between different admin UIs for different functionality. The code required to seamlessly glue them together on the frontend becomes overly complex.

Payload can integrate with any payment processor like Stripe and its content authoring capabilities allow it to manage every aspect of a storefront—all in one place.

If you can build your storefront with a single backend, and only offload things like payment processing, the code will be simpler and the editing experience will be significantly streamlined. Manage products, catalogs, page content, media, and more—all in one spot.

[**Digital Asset Management**](https://payloadcms.com/docs/getting-started/what-is-payload#digital-asset-management)

Payload's API-first tagging, sorting, and querying engine lends itself perfectly to all types of content that a CMS might ordinarily store, but these strong fundamentals also make it a formidable Digital Asset Management (DAM) tool as well.

Similarly to the Ecommerce use case above, if an organization uses a CMS for its content but a separate DAM for its digital assets, administrators of both tools will need to juggle completely different services for tasks that are closely related. Two subscriptions will need to be managed, two sets of infrastructure will need to be provisioned, and two admin UIs need to be used / learned.

Payload flattens CMS and DAM into a single tool that makes no compromises on either side. Powerful features like folder-based organization, file versioning, bulk upload, and media access control allow Payload to simultaneously function as a full Digital Asset Management platform as well as a Content Management System at the same time.

[Click here](https://payloadcms.com/use-cases/digital-asset-management) for more information on how to get started with Payload as a DAM.

[**Choosing a Framework**](https://payloadcms.com/docs/getting-started/what-is-payload#choosing-a-framework)

Payload is a great choice for applications of all sizes and types, but it might not be the right choice for every project. Here are some guidelines to help you decide if Payload is the right choice for your project.

[**When Payload might be for you**](https://payloadcms.com/docs/getting-started/what-is-payload#when-payload-might-be-for-you)

- If data ownership and privacy are important to you, and you don't want to allow another proprietary SaaS vendor to host and own your data
- If you're building a Next.js site that needs a CMS
- If you need to re-use your data outside of a SaaS API
- If what you're building has custom business logic requirements outside of a typical headless CMS
- You want to deploy serverless on platforms like Vercel

[**When Payload might not be for you**](https://payloadcms.com/docs/getting-started/what-is-payload#when-payload-might-not-be-for-you)

- If you can manage your project fully with code, and don't need an admin UI
- If you are building a website that fits within the limits of a tool like Webflow or Framer
- If you already have a full database and just need to visualize the data somehow
- If you are confident that you won't need code / data ownership at any point in the future

Ready to get started? First, let's review some high-level concepts that are used in Payload.

[Next \\
**Payload Concepts**](https://payloadcms.com/docs/getting-started/concepts)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Payload CMS I18n
# I18n

The [Admin Panel](https://payloadcms.com/docs/admin/overview) is translated in over [30 languages and counting](https://github.com/payloadcms/payload/tree/main/packages/translations). With I18n, editors can navigate the interface and read API error messages in their preferred language. This is similar to [Localization](https://payloadcms.com/docs/configuration/localization), but instead of managing translations for the data itself, you are managing translations for your application's interface.

By default, Payload comes preinstalled with English, but you can easily load other languages into your own application. Languages are automatically detected based on the request. If no language is detected, or if the user's language is not yet supported by your application, English will be chosen.

To add I18n to your project, you first need to install the `@payloadcms/translations` package:

1

pnpm install @payloadcms/translations

Once installed, it can be configured using the `i18n` key in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

i18n:{

6

// ...

7

},

8

})

**Note:** If there is a language that Payload does not yet support, we accept [code contributions](https://github.com/payloadcms/payload/blob/main/CONTRIBUTING.md).

[**Config Options**](https://payloadcms.com/docs/configuration/i18n#config-options)

You can easily customize and override any of the i18n settings that Payload provides by default. Payload will use your custom options and merge them in with its own.

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

i18n:{

6

fallbackLanguage:'en',// default

7

}

8

})

The following options are available:

| Option | Description |
| --- | --- |
| `fallbackLanguage` | The language to fall back to if the user's preferred language is not supported. Default is `'en'`. |
| `translations` | An object containing the translations. The keys are the language codes and the values are the translations. |
| `supportedLanguages` | An object containing the supported languages. The keys are the language codes and the values are the translations. |

[**Adding Languages**](https://payloadcms.com/docs/configuration/i18n#adding-languages)

You can easily add new languages to your Payload app by providing the translations for the new language. Payload maintains a number of built-in translations that can be imported from `@payloadcms/translations`, but you can also provide your own [Custom Translations](https://payloadcms.com/docs/configuration/i18n#custom-translations) to support any language.

To add a new language, use the `i18n.supportedLanguages` key in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

import{ en }from'@payloadcms/translations/languages/en'

3

import{ de }from'@payloadcms/translations/languages/de'

4

5

exportdefaultbuildConfig({

6

// ...

7

i18n:{

8

supportedLanguages:{ en, de },

9

},

10

})

**Tip:** It's best to only support the languages that you need so that the bundled JavaScript is kept to a minimum for your project.

[**Custom Translations**](https://payloadcms.com/docs/configuration/i18n#custom-translations)

You can customize Payload's built-in translations either by extending existing languages or by adding new languages entirely. This can be done by injecting new translation strings into existing languages, or by providing an entirely new language keys altogether.

To add Custom Translations, use the `i18n.translations` key in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

//...

5

i18n:{

6

translations:{

7

en:{

8

custom:{

9

// namespace can be anything you want

10

key1:'Translation with {{variable}}',// translation

11

},

12

// override existing translation keys

13

general:{

14

dashboard:'Home',

15

},

16

},

17

},

18

},

19

//...

20

})

[**Project Translations**](https://payloadcms.com/docs/configuration/i18n#project-translations)

While Payload's built-in features come fully translated, you may also want to translate parts of your own project. This is possible in places like [Collections](https://payloadcms.com/docs/configuration/collections) and [Globals](https://payloadcms.com/docs/configuration/globals), such as on their labels and groups, field labels, descriptions or input placeholder text.

To do this, provide the translations wherever applicable, keyed to the language code:

1

import type {CollectionConfig}from'payload'

2

3

exportconstArticles:CollectionConfig={

4

slug:'articles',

5

labels:{

6

singular:{

7

en:'Article',

8

es:'Artículo',

9

},

10

plural:{

11

en:'Articles',

12

es:'Artículos',

13

},

14

},

15

admin:{

16

group:{

17

en:'Content',

18

es:'Contenido',

19

},

20

},

21

fields:\[\
\
\
{\
\
\
name:'title',\
\
\
type:'text',\
\
\
label:{\
\
\
en:'Title',\
\
\
es:'Título',\
\
\
},\
\
\
admin:{\
\
\
placeholder:{\
\
\
en:'Enter title',\
\
\
es:'Introduce el título'\
\
\
},\
\
\
},\
\
\
},\
\
\
\],

37

}

[**Changing Languages**](https://payloadcms.com/docs/configuration/i18n#changing-languages)

Users can change their preferred language in their account settings or by otherwise manipulating their [User Preferences](https://payloadcms.com/docs/admin/preferences).

[**Node.js**](https://payloadcms.com/docs/configuration/i18n#node)

Payload's backend sets the language on incoming requests before they are handled. This allows backend validation to return error messages in the user's own language or system generated emails to be sent using the correct translation. You can make HTTP requests with the `accept-language` header and Payload will use that language.

Anywhere in your Payload app that you have access to the `req` object, you can access Payload's extensive internationalization features assigned to `req.i18n`. To access text translations you can use `req.t('namespace:key')`.

[**TypeScript**](https://payloadcms.com/docs/configuration/i18n#typescript)

In order to use [Custom Translations](https://payloadcms.com/docs/configuration/i18n#custom-translations) in your project, you need to provide the types for the translations.

Here we create a shareable translations object. We will import this in both our custom components and in our Payload config.

1

// <rootDir>/custom-translations.ts

2

3

import type {Config}from'payload'

4

import type {NestedKeysStripped}from'@payloadcms/translations'

5

6

exportconstcustomTranslations:Config\['i18n'\]\['translations'\]={

7

en:{

8

general:{

9

myCustomKey:'My custom english translation',

10

},

11

fields:{

12

addLabel:'Add!',

13

}

14

},

15

}

16

17

export type CustomTranslationsObject=typeof customTranslations.en

18

export type CustomTranslationsKeys=NestedKeysStripped<CustomTranslationsObject>

Import the shared translations object into our Payload config so they are available for use:

1

// <rootDir>/payload.config.ts

2

3

import{ buildConfig }from'payload'

4

5

import{ customTranslations }from'./custom-translations'

6

7

exportdefaultbuildConfig({

8

//...

9

i18n:{

10

translations: customTranslations,

11

},

12

//...

13

})

Import the shared translation types to use in your [Custom Component](https://payloadcms.com/docs/custom-components/overview):

1

// <rootDir>/components/MyComponent.tsx

2

3

'use client'

4

import type Reactfrom'react'

5

import{ useTranslation }from'@payloadcms/ui'

6

7

import type {CustomTranslationsObject,CustomTranslationsKeys}from'../custom-translations'

8

9

exportconstMyComponent:React.FC=()=>{

10

const{ i18n, t }= useTranslation<CustomTranslationsObject,CustomTranslationsKeys>()// These generics merge your custom translations with the default client translations

11

12

returnt('general:myCustomKey')

13

}

Additionally, Payload exposes the `t` function in various places, for example in labels. Here is how you would type those:

1

// <rootDir>/fields/myField.ts

2

3

import type {DefaultTranslationKeys,TFunction}from'@payloadcms/translations'

4

import type {Field}from'payload'

5

6

import{CustomTranslationsKeys}from'../custom-translations'

7

8

constfield:Field={

9

name:'myField',

10

type:'text',

11

label:(

12

{ t }:{t:TFunction<CustomTranslationsKeys\|DefaultTranslationKeys>},// The generic passed to TFunction does not automatically merge the custom translations with the default translations. We need to merge them ourselves here

13

)=>t('fields:addLabel'),

14

}

[Next \\
**Localization**](https://payloadcms.com/docs/configuration/localization)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443253947&cv=11&fst=1741443253947&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102308675~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fconfiguration%2Fi18n&hn=www.googleadservices.com&frm=0&tiba=I18n%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1409135652.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254153&cv=11&fst=1741443254153&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fconfiguration%2Fi18n&hn=www.googleadservices.com&frm=0&tiba=I18n%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1409135652.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Email Field Documentation
# Email Field

The Email Field enforces that the value provided is a valid email address.

![Shows an Email field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/email.png)

Admin Panel screenshot of an Email field

To create an Email Field, set the `type` to `email` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyEmailField:Field={

4

// ...

5

type:'email',

6

}

[**Config Options**](https://payloadcms.com/docs/fields/email#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `label` | Text used as a field label in the Admin Panel or an object with keys for each language. |
| `unique` | Enforce that each entry in the Collection has a unique value for this field. |
| `index` | Build an [index](https://payloadcms.com/docs/database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel. |
| `defaultValue` | Provide data to be used for this field's default value. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. |
| `required` | Require this field to have a value. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/email#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

[**Admin Options**](https://payloadcms.com/docs/fields/email#admin-options)

To customize the appearance and behavior of the Email Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMyEmailField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The Email Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Property | Description |
| --- | --- |
| `placeholder` | Set this property to define a placeholder string for the field. |
| `autoComplete` | Set this property to a string that will be used for browser autocomplete. |

[**Example**](https://payloadcms.com/docs/fields/email#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'contact',// required\
\
\
type:'email',// required\
\
\
label:'Contact Email Address',\
\
\
required:true,\
\
\
},\
\
\
\],

13

}

[**Custom Components**](https://payloadcms.com/docs/fields/email#custom-components) [**Field**](https://payloadcms.com/docs/fields/email#field) [**Server Component**](https://payloadcms.com/docs/fields/email#server-component)

1

import type Reactfrom'react'

2

import{EmailField}from'@payloadcms/ui'

3

import type {EmailFieldServerComponent}from'payload'

4

5

exportconstCustomEmailFieldServer:EmailFieldServerComponent=({

6

clientField,

7

path,

8

schemaPath,

9

permissions,

10

})=>{

11

return(

12

<EmailFieldfield={clientField}path={path}schemaPath={schemaPath}permissions={permissions}/>

13

)

14

}

[**Client Component**](https://payloadcms.com/docs/fields/email#client-component)

1

'use client'

2

importReactfrom'react'

3

import{EmailField}from'@payloadcms/ui'

4

import type {EmailFieldClientComponent}from'payload'

5

6

exportconstCustomEmailFieldClient:EmailFieldClientComponent=(props)=>{

7

return<EmailField{...props}/>

8

}

[**Label**](https://payloadcms.com/docs/fields/email#label) [**Server Component**](https://payloadcms.com/docs/fields/email#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {EmailFieldLabelServerComponent}from'payload'

4

5

exportconstCustomEmailFieldLabelServer:EmailFieldLabelServerComponent=({

6

clientField,

7

path,

8

})=>{

9

return(

10

<FieldLabel

11

label={clientField?.label \|\| clientField?.name}

12

path={path}

13

required={clientField?.required}

14

/>

15

)

16

}

[**Client Component**](https://payloadcms.com/docs/fields/email#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {EmailFieldLabelClientComponent}from'payload'

5

6

exportconstCustomEmailFieldLabelClient:EmailFieldLabelClientComponent=({

7

field,

8

path,

9

})=>{

10

return(

11

<FieldLabel

12

label={field?.label \|\| field?.name}

13

path={path}

14

required={field?.required}

15

/>

16

)}

[Next \\
**Group Field**](https://payloadcms.com/docs/fields/group)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254050&cv=11&fst=1741443254050&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791784~102814059~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Femail&hn=www.googleadservices.com&frm=0&tiba=Email%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=707594661.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254323&cv=11&fst=1741443254323&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Femail&hn=www.googleadservices.com&frm=0&tiba=Email%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=707594661.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Blocks Field Documentation
# Blocks Field

The Blocks Field is **incredibly powerful**, storing an array of objects based on the fields that you define, where each item in the array is a "block" with its own unique schema.

Blocks are a great way to create a flexible content model that can be used to build a wide variety of content types, including:

- A layout builder tool that grants editors to design highly customizable page or post layouts. Blocks could include configs such as `Quote`, `CallToAction`, `Slider`, `Content`, `Gallery`, or others.
- A form builder tool where available block configs might be `Text`, `Select`, or `Checkbox`.
- Virtual event agenda "timeslots" where a timeslot could either be a `Break`, a `Presentation`, or a `BreakoutSession`.

![Admin Panel screenshot of add Blocks drawer view](https://payloadcms.com/images/docs/fields/blocks.png)

Admin Panel screenshot of add Blocks drawer view

To add a Blocks Field, set the `type` to `blocks` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyBlocksField:Field={

4

// ...

5

type:'blocks',

6

blocks:\[\
\
\
// ...\
\
\
\],

9

}

[**Config Options**](https://payloadcms.com/docs/fields/blocks#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `label` | Text used as the heading in the Admin Panel or an object with keys for each language. Auto-generated from name if not defined. |
| `blocks` \\* | Array of [block configs](https://payloadcms.com/docs/fields/blocks#block-configs) to be made available to this field. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `minRows` | A number for the fewest allowed items during validation when a value is present. |
| `maxRows` | A number for the most allowed items during validation when a value is present. |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API response or the Admin Panel. |
| `defaultValue` | Provide an array of block data to be used for this field's default value. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. If enabled, a separate, localized set of all data within this field will be kept, so there is no need to specify each nested field as `localized`. |
| `unique` | Enforce that each entry in the Collection has a unique value for this field. |
| `labels` | Customize the block row labels appearing in the Admin dashboard. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/blocks#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

[**Admin Options**](https://payloadcms.com/docs/fields/blocks#admin-options)

To customize the appearance and behavior of the Blocks Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMyBlocksField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The Blocks Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Option | Description |
| --- | --- |
| `group` | Text or localization object used to group this Block in the Blocks Drawer. |
| `initCollapsed` | Set the initial collapsed state |
| `isSortable` | Disable order sorting by setting this value to `false` |

[**Customizing the way your block is rendered in Lexical**](https://payloadcms.com/docs/fields/blocks#customizing-the-way-your-block-is-rendered-in-lexical)

If you're using this block within the [Lexical editor](https://payloadcms.com/docs/rich-text/overview), you can also customize how the block is rendered in the Lexical editor itself by specifying custom components.

- `admin.components.Label` \- pass a custom React component here to customize the way that the label is rendered for this block
- `admin.components.Block` \- pass a component here to completely override the way the block is rendered in Lexical with your own component

This is super handy if you'd like to present your editors with a very deliberate and nicely designed block "preview" right in your rich text.

For example, if you have a `gallery` block, you might want to actually render the gallery of images directly in your Lexical block. With the `admin.components.Block` property, you can do exactly that!

**Tip:** If you customize the way your block is rendered in Lexical, you can import utility components to easily edit / remove your block - so that you don't have to build all of this yourself.

To import these utility components for one of your custom blocks, you can import the following:

1

import{

2

// Edit block buttons (choose the one that corresponds to your usage)

3

// When clicked, this will open a drawer with your block's fields

4

// so your editors can edit them

5

InlineBlockEditButton,

6

BlockEditButton,

7

8

// Buttons that will remove this block from Lexical

9

// (choose the one that corresponds to your usage)

10

InlineBlockRemoveButton,

11

BlockRemoveButton,

12

13

// The label that should be rendered for an inline block

14

InlineBlockLabel,

15

16

// The default "container" that is rendered for an inline block

17

// if you want to re-use it

18

InlineBlockContainer,

19

20

// The default "collapsible" UI that is rendered for a regular block

21

// if you want to re-use it

22

BlockCollapsible,

23

24

}from'@payloadcms/richtext-lexical/client'

[**Block Configs**](https://payloadcms.com/docs/fields/blocks#block-configs)

Blocks are defined as separate configs of their own.

**Tip:** Best practice is to define each block config in its own file, and then import them into your Blocks field as necessary. This way each block config can be easily shared between fields. For instance, using the "layout builder" example, you might want to feature a few of the same blocks in a Post collection as well as a Page collection. Abstracting into their own files trivializes their reusability.

| Option | Description |
| --- | --- |
| `slug` \\* | Identifier for this block type. Will be saved on each block as the `blockType` property. |
| `fields` \\* | Array of fields to be stored in this block. |
| `labels` | Customize the block labels that appear in the Admin dashboard. Auto-generated from slug if not defined. |
| `imageURL` | Provide a custom image thumbnail to help editors identify this block in the Admin UI. |
| `imageAltText` | Customize this block's image thumbnail alt text. |
| `interfaceName` | Create a top level, reusable [Typescript interface](https://payloadcms.com/docs/typescript/generating-types#custom-field-interfaces) & [GraphQL type](https://payloadcms.com/docs/graphql/graphql-schema#custom-field-schemas). |
| `graphQL.singularName` | Text to use for the GraphQL schema name. Auto-generated from slug if not defined. NOTE: this is set for deprecation, prefer `interfaceName`. |
| `dbName` | Custom table name for this block type when using SQL Database Adapter ( [Postgres](https://payloadcms.com/docs/database/postgres)). Auto-generated from slug if not defined. |
| `custom` | Extension point for adding custom data (e.g. for plugins) |

[**Auto-generated data per block**](https://payloadcms.com/docs/fields/blocks#auto-generated-data-per-block)

In addition to the field data that you define on each block, Payload will store two additional properties on each block:

`blockType`

The `blockType` is saved as the slug of the block that has been selected.

`blockName`

The Admin Panel provides each block with a `blockName` field which optionally allows editors to label their blocks for better editability and readability.

[**Example**](https://payloadcms.com/docs/fields/blocks#example)

`collections/ExampleCollection.js`

1

import{Block,CollectionConfig}from'payload'

2

3

constQuoteBlock:Block={

4

slug:'Quote',// required

5

imageURL:'https://google.com/path/to/image.jpg',

6

imageAltText:'A nice thumbnail image to show what this block looks like',

7

interfaceName:'QuoteBlock',// optional

8

fields:\[\
\
\
// required\
\
\
{\
\
\
name:'quoteHeader',\
\
\
type:'text',\
\
\
required:true,\
\
\
},\
\
\
{\
\
\
name:'quoteText',\
\
\
type:'text',\
\
\
},\
\
\
\],

20

}

21

22

exportconstExampleCollection:CollectionConfig={

23

slug:'example-collection',

24

fields:\[\
\
\
{\
\
\
name:'layout',// required\
\
\
type:'blocks',// required\
\
\
minRows:1,\
\
\
maxRows:20,\
\
\
blocks:\[\
\
\
// required\
\
\
QuoteBlock,\
\
\
\],\
\
\
},\
\
\
\],

36

}

[**Custom Components**](https://payloadcms.com/docs/fields/blocks#custom-components) [**Field**](https://payloadcms.com/docs/fields/blocks#field) [**Server Component**](https://payloadcms.com/docs/fields/blocks#server-component)

1

import type Reactfrom'react'

2

import{BlocksField}from'@payloadcms/ui'

3

import type {BlocksFieldServerComponent}from'payload'

4

5

exportconstCustomBlocksFieldServer:BlocksFieldServerComponent=({

6

clientField,

7

path,

8

schemaPath,

9

permissions

10

})=>{

11

return(

12

<BlocksFieldfield={clientField}

13

path={path}

14

schemaPath={schemaPath}

15

permissions={permissions}

16

/>

17

)

18

}

[**Client Component**](https://payloadcms.com/docs/fields/blocks#client-component)

1

'use client'

2

importReactfrom'react'

3

import{BlocksField}from'@payloadcms/ui'

4

import type {BlocksFieldClientComponent}from'payload'

5

6

exportconstCustomBlocksFieldClient:BlocksFieldClientComponent=(props)=>{

7

return<BlocksField{...props}/>

8

}

[**Label**](https://payloadcms.com/docs/fields/blocks#label) [**Server Component**](https://payloadcms.com/docs/fields/blocks#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {BlocksFieldLabelServerComponent}from'payload'

4

5

exportconstCustomBlocksFieldLabelServer:BlocksFieldLabelServerComponent=({

6

clientField,

7

path,

8

})=>{

9

return(

10

<FieldLabel

11

label={clientField?.label \|\| clientField?.name}

12

path={path}

13

required={clientField?.required}

14

/>

15

)

16

}

[**Client Component**](https://payloadcms.com/docs/fields/blocks#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {BlocksFieldLabelClientComponent}from'payload'

5

6

exportconstCustomBlocksFieldLabelClient:BlocksFieldLabelClientComponent=({

7

label,

8

path,

9

required,

10

})=>{

11

return(

12

<FieldLabel

13

label={field?.label \|\| field?.name}

14

path={path}

15

required={field?.required}

16

/>

17

)

18

}

[**Block References**](https://payloadcms.com/docs/fields/blocks#block-references)

If you have multiple blocks used in multiple places, your Payload Config can grow in size, potentially sending more data to the client and requiring more processing on the server. However, you can optimize performance by defining each block **once** in your Payload Config and then referencing its slug wherever it's used instead of passing the entire block config.

To do this, define the block in the `blocks` array of the Payload Config. Then, in the Blocks Field, pass the block slug to the `blockReferences` array - leaving the `blocks` array empty for compatibility reasons.

1

import{ buildConfig }from'payload'

2

import{ lexicalEditor,BlocksFeature}from'@payloadcms/richtext-lexical'

3

4

// Payload Config

5

const config =buildConfig({

6

// Define the block once

7

blocks:\[\
\
\
{\
\
\
slug:'TextBlock',\
\
\
fields:\[\
\
\
{\
\
\
name:'text',\
\
\
type:'text',\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

18

collections:\[\
\
\
{\
\
\
slug:'collection1',\
\
\
fields:\[\
\
\
{\
\
\
name:'content',\
\
\
type:'blocks',\
\
\
// Reference the block by slug\
\
\
blockReferences:\['TextBlock'\],\
\
\
blocks:\[\],// Required to be empty, for compatibility reasons\
\
\
},\
\
\
\],\
\
\
},\
\
\
{\
\
\
slug:'collection2',\
\
\
fields:\[\
\
\
{\
\
\
name:'editor',\
\
\
type:'richText',\
\
\
editor:lexicalEditor({\
\
\
BlocksFeature({\
\
\
// Same reference can be reused anywhere, even in the lexical editor, without incurred performance hit\
\
\
blocks:\['TextBlock'\],\
\
\
})\
\
\
})\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

47

})

**Reminder:** Blocks referenced in the `blockReferences` array are treated as isolated from the collection / global config. This has the following implications:

1. The block config cannot be modified or extended in the collection config. It will be identical everywhere it's referenced.
2. Access control for blocks referenced in the `blockReferences` are run only once - data from the collection will not be available in the block's access control.

[**TypeScript**](https://payloadcms.com/docs/fields/blocks#typescript)

As you build your own Block configs, you might want to store them in separate files but retain typing accordingly. To do so, you can import and use Payload's `Block` type:

1

import type {Block}from'payload'

[Next \\
**Checkbox Field**](https://payloadcms.com/docs/fields/checkbox)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254162&cv=11&fst=1741443254162&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102015666~102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fblocks&hn=www.googleadservices.com&frm=0&tiba=Blocks%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1098504676.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254393&cv=11&fst=1741443254393&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fblocks&hn=www.googleadservices.com&frm=0&tiba=Blocks%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1098504676.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload CMS Pagination
# Pagination

All collection `find` queries are paginated automatically. Responses are returned with top-level meta data related to pagination, and returned documents are nested within a `docs` array.

`Find` **response properties:**

| Property | Description |
| --- | --- |
| `docs` | Array of documents in the collection |
| `totalDocs` | Total available documents within the collection |
| `limit` | Limit query parameter - defaults to `10` |
| `totalPages` | Total pages available, based upon the `limit` queried for |
| `page` | Current page number |
| `pagingCounter` | `number` of the first doc on the current page |
| `hasPrevPage` | `true/false` if previous page exists |
| `hasNextPage` | `true/false` if next page exists |
| `prevPage` | `number` of previous page, `null` if it doesn't exist |
| `nextPage` | `number` of next page, `null` if it doesn't exist |

**Example response:**

1

{

2

// Document Array

3

"docs":\[\
\
\
{\
\
\
"title":"Page Title",\
\
\
"description":"Some description text",\
\
\
"priority":1,\
\
\
"createdAt":"2020-10-17T01:19:29.858Z",\
\
\
"updatedAt":"2020-10-17T01:19:29.858Z",\
\
\
"id":"5f8a46a1dd05db75c3c64760"\
\
\
}\
\
\
\],

13

// Metadata

14

"totalDocs":6,

15

"limit":1,

16

"totalPages":6,

17

"page":1,

18

"pagingCounter":1,

19

"hasPrevPage":false,

20

"hasNextPage":true,

21

"prevPage":null,

22

"nextPage":2

23

}

[**Pagination controls**](https://payloadcms.com/docs/queries/pagination#pagination-controls)

All Payload APIs support the pagination controls below. With them, you can create paginated lists of documents within your application:

| Control | Description |
| --- | --- |
| `limit` | Limits the number of documents returned |
| `page` | Get a specific page number |

[**Disabling pagination within Local API**](https://payloadcms.com/docs/queries/pagination#disabling-pagination-within-local-api)

For `find` operations within the Local API, you can disable pagination to retrieve all documents from a collection by passing `pagination: false` to the `find` local operation.

[Next \\
**The Admin Panel**](https://payloadcms.com/docs/admin/overview)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254117&cv=11&fst=1741443254117&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fqueries%2Fpagination&hn=www.googleadservices.com&frm=0&tiba=Pagination%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=866640160.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254336&cv=11&fst=1741443254336&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102696396~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fqueries%2Fpagination&hn=www.googleadservices.com&frm=0&tiba=Pagination%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=866640160.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Collapsible Field Guide
# Collapsible Field

The Collapsible Field is presentational-only and only affects the Admin Panel. By using it, you can place fields within a nice layout component that can be collapsed / expanded.

![Shows a Collapsible field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/collapsible.png)

Admin Panel screenshot of a Collapsible field

To add a Collapsible Field, set the `type` to `collapsible` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyCollapsibleField:Field={

4

// ...

5

type:'collapsible',

6

fields:\[\
\
\
// ...\
\
\
\],

9

}

[**Config Options**](https://payloadcms.com/docs/fields/collapsible#config-options)

| Option | Description |
| --- | --- |
| `label` \\* | A label to render within the header of the collapsible component. This can be a string, function or react component. Function/components receive `({ data, path })` as args. |
| `fields` \\* | Array of field types to nest within this Collapsible. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/collapsible#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |

_\\* An asterisk denotes that a property is required._

[**Admin Options**](https://payloadcms.com/docs/fields/collapsible#admin-options)

To customize the appearance and behavior of the Collapsible Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMyCollapsibleField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The Collapsible Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Option | Description |
| --- | --- |
| `initCollapsed` | Set the initial collapsed state |

[**Example**](https://payloadcms.com/docs/fields/collapsible#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
label:({ data })=> data?.title \|\|'Untitled',\
\
\
type:'collapsible',// required\
\
\
fields:\[\
\
\
// required\
\
\
{\
\
\
name:'title',\
\
\
type:'text',\
\
\
required:true,\
\
\
},\
\
\
{\
\
\
name:'someTextField',\
\
\
type:'text',\
\
\
required:true,\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

24

}

[Next \\
**Date Field**](https://payloadcms.com/docs/fields/date)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443253961&cv=11&fst=1741443253961&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fcollapsible&hn=www.googleadservices.com&frm=0&tiba=Collapsible%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1521548832.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254127&cv=11&fst=1741443254127&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fcollapsible&hn=www.googleadservices.com&frm=0&tiba=Collapsible%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1521548832.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Radio Group Field
# Radio Group Field

The Radio Field allows for the selection of one value from a predefined set of possible values and presents a radio group-style set of inputs to the [Admin Panel](https://payloadcms.com/docs/admin/overview).

![Shows a Radio field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/radio.png)

Admin Panel screenshot of a Radio field

To add a Radio Field, set the `type` to `radio` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyRadioField:Field={

4

// ...

5

type:'radio',

6

options:\[\
\
\
// ...\
\
\
\]

9

}

[**Config Options**](https://payloadcms.com/docs/fields/radio#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `options` \\* | Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing an `label` string and a `value` string. |
| `label` | Text used as a field label in the Admin Panel or an object with keys for each language. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `index` | Build an [index](https://payloadcms.com/docs/database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel. |
| `defaultValue` | Provide data to be used for this field's default value. The default value must exist within provided values in `options`. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. |
| `required` | Require this field to have a value. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/radio#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `enumName` | Custom enum name for this field when using SQL Database Adapter ( [Postgres](https://payloadcms.com/docs/database/postgres)). Auto-generated from name if not defined. |
| `interfaceName` | Create a top level, reusable [Typescript interface](https://payloadcms.com/docs/typescript/generating-types#custom-field-interfaces) & [GraphQL type](https://payloadcms.com/docs/graphql/graphql-schema#custom-field-schemas). |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

**Important:**

Option values should be strings that do not contain hyphens or special characters due to GraphQL enumeration naming constraints. Underscores are allowed. If you determine you need your option values to be non-strings or contain special characters, they will be formatted accordingly before being used as a GraphQL enum.

[**Admin Options**](https://payloadcms.com/docs/fields/radio#admin-options)

To customize the appearance and behavior of the Radio Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMyRadioField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The Radio Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Property | Description |
| --- | --- |
| `layout` | Allows for the radio group to be styled as a horizontally or vertically distributed list. The default value is `horizontal`. |

[**Example**](https://payloadcms.com/docs/fields/radio#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'color',// required\
\
\
type:'radio',// required\
\
\
options:\[\
\
\
// required\
\
\
{\
\
\
label:'Mint',\
\
\
value:'mint',\
\
\
},\
\
\
{\
\
\
label:'Dark Gray',\
\
\
value:'dark\_gray',\
\
\
},\
\
\
\],\
\
\
defaultValue:'mint',// The first value in options.\
\
\
admin:{\
\
\
layout:'horizontal',\
\
\
},\
\
\
},\
\
\
\],

26

}

[**Custom Components**](https://payloadcms.com/docs/fields/radio#custom-components) [**Field**](https://payloadcms.com/docs/fields/radio#field) [**Server Component**](https://payloadcms.com/docs/fields/radio#server-component)

1

import type Reactfrom'react'

2

import{RadioGroupField}from'@payloadcms/ui'

3

import type {RadioFieldServerComponent}from'payload'

4

5

exportconstCustomRadioFieldServer:RadioFieldServerComponent=({

6

clientField,

7

path,

8

schemaPath,

9

permissions,

10

})=>{

11

return(

12

<RadioGroupField

13

field={clientField}

14

path={path}

15

schemaPath={schemaPath}

16

permissions={permissions}

17

/>

18

)

19

}

[**Client Component**](https://payloadcms.com/docs/fields/radio#client-component)

1

'use client'

2

importReactfrom'react'

3

import{RadioGroupField}from'@payloadcms/ui'

4

import type {RadioFieldClientComponent}from'payload'

5

6

exportconstCustomRadioFieldClient:RadioFieldClientComponent=(props)=>{

7

return<RadioGroupField{...props}/>

8

}

[**Label**](https://payloadcms.com/docs/fields/radio#label) [**Server Component**](https://payloadcms.com/docs/fields/radio#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {RadioFieldLabelServerComponent}from'payload'

4

5

exportconstCustomRadioFieldLabelServer:RadioFieldLabelServerComponent=({

6

clientField,

7

path,

8

required,

9

})=>{

10

return(

11

<FieldLabel

12

label={clientField?.label \|\| clientField?.name}

13

path={path}

14

required={clientField?.required}

15

/>

16

)

17

}

[**Client Component**](https://payloadcms.com/docs/fields/radio#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {RadioFieldLabelClientComponent}from'payload'

5

6

exportconstCustomRadioFieldLabelClient:RadioFieldLabelClientComponent=({

7

field,

8

path,

9

})=>{

10

return(

11

<FieldLabel

12

label={field?.label \|\| field?.name}

13

path={path}

14

required={field?.required}

15

/>

16

)

17

}

[Next \\
**Relationship Field**](https://payloadcms.com/docs/fields/relationship)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443253988&cv=11&fst=1741443253988&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fradio&hn=www.googleadservices.com&frm=0&tiba=Radio%20Group%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=235879033.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254207&cv=11&fst=1741443254207&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fradio&hn=www.googleadservices.com&frm=0&tiba=Radio%20Group%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=235879033.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Admin Panel Overview
# The Admin Panel

Payload dynamically generates a beautiful, [fully type-safe](https://payloadcms.com/docs/typescript/overview) Admin Panel to manage your users and data. It is highly performant, even with 100+ fields, and is translated in over 30 languages. Within the Admin Panel you can manage content, [render your site](https://payloadcms.com/docs/live-preview/overview), [preview drafts](https://payloadcms.com/docs/admin/preview), [diff versions](https://payloadcms.com/docs/versions/overview), and so much more.

The Admin Panel is designed to [white-label your brand](https://payloadcms.com/blog/white-label-admin-ui). You can endlessly customize and extend the Admin UI by swapping in your own [Custom Components](https://payloadcms.com/docs/custom-components/overview)—everything from simple field labels to entire views can be modified or replaced to perfectly tailor the interface for your editors.

The Admin Panel is written in [TypeScript](https://www.typescriptlang.org/) and built with [React](https://react.dev/) using the [Next.js App Router](https://nextjs.org/docs/app). It supports [React Server Components](https://react.dev/reference/rsc/server-components), enabling the use of the [Local API](https://payloadcms.com/docs/local-api/overview) on the front-end. You can install Payload into any [existing Next.js app in just one line](https://payloadcms.com/docs/getting-started/installation) and [deploy it anywhere](https://payloadcms.com/docs/production/deployment).

The Payload Admin Panel is designed to be as minimal and straightforward as possible to allow easy customization and control. [Learn more](https://payloadcms.com/docs/custom-components/overview).

![Admin Panel with collapsible sidebar](https://payloadcms.com/images/docs/admin.jpg)

Redesigned Admin Panel with a collapsible sidebar that's open by default, providing greater extensibility and enhanced horizontal real estate.

[**Project Structure**](https://payloadcms.com/docs/admin/overview#project-structure)

The Admin Panel serves as the entire HTTP layer for Payload, providing a full CRUD interface for your app. This means that both the [REST](https://payloadcms.com/docs/rest-api/overview) and [GraphQL](https://payloadcms.com/docs/graphql/overview) APIs are simply [Next.js Routes](https://nextjs.org/docs/app/building-your-application/routing) that exist directly alongside your front-end application.

Once you [install Payload](https://payloadcms.com/docs/getting-started/installation), the following files and directories will be created in your app:

1

app/

2

├─(payload)/

3

├── admin/

4

├─── \[\[...segments\]\]/

5

├──── page.tsx

6

├──── not-found.tsx

7

├── api/

8

├─── \[...slug\]/

9

├──── route.ts

10

├── graphql/

11

├──── route.ts

12

├── graphql-playground/

13

├──── route.ts

14

├── custom.scss

15

├── layout.tsx

If you are not familiar with Next.js project structure, you can [learn more about it here](https://nextjs.org/docs/getting-started/project-structure).

As shown above, all Payload routes are nested within the `(payload)` route group. This creates a boundary between the Admin Panel and the rest of your application by scoping all layouts and styles. The `layout.tsx` file within this directory, for example, is where Payload manages the `html` tag of the document to set proper [`lang`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) and [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attributes, etc.

The `admin` directory contains all the _pages_ related to the interface itself, whereas the `api` and `graphql` directories contains all the _routes_ related to the [REST API](https://payloadcms.com/docs/rest-api/overview) and [GraphQL API](https://payloadcms.com/docs/graphql/overview). All admin routes are [easily configurable](https://payloadcms.com/docs/admin/overview#customizing-routes) to meet your application's exact requirements.

**Note:** If you don't intend to use the Admin Panel, [REST API](https://payloadcms.com/docs/rest-api/overview), or [GraphQL API](https://payloadcms.com/docs/graphql/overview), you can opt-out by simply deleting their corresponding directories within your Next.js app. The overhead, however, is completely constrained to these routes, and will not slow down or affect Payload outside when not in use.

Finally, the `custom.scss` file is where you can add or override globally-oriented styles in the Admin Panel, such as modify the color palette. Customizing the look and feel through CSS alone is a powerful feature of the Admin Panel, [more on that here](https://payloadcms.com/docs/admin/customizing-css).

All auto-generated files will contain the following comments at the top of each file:

1

/\\* THIS FILE WAS GENERATED AUTOMATICALLY BY PAYLOAD. \*/,

2

/\\* DO NOT MODIFY IT BECAUSE IT COULD BE REWRITTEN AT ANY TIME. \*/

[**Admin Options**](https://payloadcms.com/docs/admin/overview#admin-options)

All options for the Admin Panel are defined in your [Payload Config](https://payloadcms.com/docs/configuration/overview) under the `admin` property:

1

import{ buildConfig }from'payload'

2

3

const config =buildConfig({

4

// ...

5

admin:{

6

// ...

7

},

8

})

The following options are available:

| Option | Description |
| --- | --- |
| `avatar` | Set account profile picture. Options: `gravatar`, `default` or a custom React component. |
| `autoLogin` | Used to automate log-in for dev and demonstration convenience. [More details](https://payloadcms.com/docs/authentication/overview). |
| `buildPath` | Specify an absolute path for where to store the built Admin bundle used in production. Defaults to `path.resolve(process.cwd(), 'build')`. |
| `components` | Component overrides that affect the entirety of the Admin Panel. [More details](https://payloadcms.com/docs/custom-components/overview). |
| `custom` | Any custom properties you wish to pass to the Admin Panel. |
| `dateFormat` | The date format that will be used for all dates within the Admin Panel. Any valid [date-fns](https://date-fns.org/) format pattern can be used. |
| `livePreview` | Enable real-time editing for instant visual feedback of your front-end application. [More details](https://payloadcms.com/docs/live-preview/overview). |
| `meta` | Base metadata to use for the Admin Panel. [More details](https://payloadcms.com/docs/admin/metadata). |
| `routes` | Replace built-in Admin Panel routes with your own custom routes. [More details](https://payloadcms.com/docs/admin/overview#customizing-routes). |
| `suppressHydrationWarning` | If set to `true`, suppresses React hydration mismatch warnings during the hydration of the root `<html>` tag. Defaults to `false`. |
| `theme` | Restrict the Admin Panel theme to use only one of your choice. Default is `all`. |
| `timezones` | Configure the timezone settings for the admin panel. [More details](https://payloadcms.com/docs/admin/overview#timezones) |
| `user` | The `slug` of the Collection that you want to allow to login to the Admin Panel. [More details](https://payloadcms.com/docs/admin/overview#the-admin-user-collection). |

**Reminder:** These are the _root-level_ options for the Admin Panel. You can also customize [Collection Admin Options](https://payloadcms.com/docs/configuration/collections#admin-options) and [Global Admin Options](https://payloadcms.com/docs/configuration/globals#admin-options) through their respective `admin` keys.

[**The Admin User Collection**](https://payloadcms.com/docs/admin/overview#the-admin-user-collection)

To specify which Collection to allow to login to the Admin Panel, pass the `admin.user` key equal to the slug of any auth-enabled Collection:

1

import{ buildConfig }from'payload'

2

3

const config =buildConfig({

4

// ...

5

admin:{

6

user:'admins',

7

},

8

})

**Important:**

The Admin Panel can only be used by a single auth-enabled Collection. To enable authentication for a Collection, simply set `auth: true` in the Collection's configuration. See [Authentication](https://payloadcms.com/docs/authentication/overview) for more information.

By default, if you have not specified a Collection, Payload will automatically provide a `User` Collection with access to the Admin Panel. You can customize or override the fields and settings of the default `User` Collection by adding your own Collection with `slug: 'users'`. Doing this will force Payload to use your provided `User` Collection instead of its default version.

You can use whatever Collection you'd like to access the Admin Panel as long as the Collection supports [Authentication](https://payloadcms.com/docs/authentication/overview). It doesn't need to be called `users`. For example, you may wish to have two Collections that both support authentication:

- `admins` \- meant to have a higher level of permissions to manage your data and access the Admin Panel
- `customers` \- meant for end users of your app that should not be allowed to log into the Admin Panel

To do this, specify `admin: { user: 'admins' }` in your config. This will provide access to the Admin Panel to only `admins`. Any users authenticated as `customers` will be prevented from accessing the Admin Panel. See [Access Control](https://payloadcms.com/docs/access-control/overview) for full details.

[**Role-based Access Control**](https://payloadcms.com/docs/admin/overview#role-based-access-control)

It is also possible to allow multiple user types into the Admin Panel with limited permissions, known as role-based access control (RBAC). For example, you may wish to have two roles within the `admins` Collection:

- `super-admin` \- full access to the Admin Panel to perform any action
- `editor` \- limited access to the Admin Panel to only manage content

To do this, add a `roles` or similar field to your auth-enabled Collection, then use the `access.admin` property to grant or deny access based on the value of that field. See [Access Control](https://payloadcms.com/docs/access-control/overview) for full details. For a complete, working example of role-based access control, check out the official [Auth Example](https://github.com/payloadcms/payload/tree/main/examples/auth).

[**Customizing Routes**](https://payloadcms.com/docs/admin/overview#customizing-routes)

You have full control over the routes that Payload binds itself to. This includes both [Root-level Routes](https://payloadcms.com/docs/admin/overview#root-level-routes) such as the [REST API](https://payloadcms.com/docs/rest-api/overview), and [Admin-level Routes](https://payloadcms.com/docs/admin/overview#admin-level-routes) such as the user's account page. You can customize these routes to meet the needs of your application simply by specifying the desired paths in your config.

[**Root-level Routes**](https://payloadcms.com/docs/admin/overview#root-level-routes)

Root-level routes are those that are not behind the `/admin` path, such as the [REST API](https://payloadcms.com/docs/rest-api/overview) and [GraphQL API](https://payloadcms.com/docs/graphql/overview), or the root path of the Admin Panel itself.

To customize root-level routes, use the `routes` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

const config =buildConfig({

4

// ...

5

routes:{

6

admin:'/custom-admin-route'

7

}

8

})

The following options are available:

| Option | Default route | Description |
| --- | --- | --- |
| `admin` | `/admin` | The Admin Panel itself. |
| `api` | `/api` | The [REST API](https://payloadcms.com/docs/rest-api/overview) base path. |
| `graphQL` | `/graphql` | The [GraphQL API](https://payloadcms.com/docs/graphql/overview) base path. |
| `graphQLPlayground` | `/graphql-playground` | The GraphQL Playground. |

**Tip:** You can easily add _new_ routes to the Admin Panel through [Custom Endpoints](https://payloadcms.com/docs/rest-api/overview#custom-endpoints) and [Custom Views](https://payloadcms.com/docs/custom-components/custom-views).

[**Customizing Root-level Routes**](https://payloadcms.com/docs/admin/overview#customizing-root-level-routes)

You can change the Root-level Routes as needed, such as to mount the Admin Panel at the root of your application.

Changing Root-level Routes also requires a change to [Project Structure](https://payloadcms.com/docs/admin/overview#project-structure) to match the new route. For example, if you set `routes.admin` to `/`, you would need to completely remove the `admin` directory from the project structure:

1

app/

2

├─(payload)/

3

├── \[\[...segments\]\]/

4

├──── ...

**Note:** If you set Root-level Routes _before_ auto-generating the Admin Panel via `create-payload-app`, your [Project Structure](https://payloadcms.com/docs/admin/overview#project-structure) will already be set up correctly.

[**Admin-level Routes**](https://payloadcms.com/docs/admin/overview#admin-level-routes)

Admin-level routes are those behind the `/admin` path. These are the routes that are part of the Admin Panel itself, such as the user's account page, the login page, etc.

To customize admin-level routes, use the `admin.routes` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

const config =buildConfig({

4

// ...

5

admin:{

6

routes:{

7

account:'/my-account'

8

}

9

},

10

})

The following options are available:

| Option | Default route | Description |
| --- | --- | --- |
| `account` | `/account` | The user's account page. |
| `createFirstUser` | `/create-first-user` | The page to create the first user. |
| `forgot` | `/forgot` | The password reset page. |
| `inactivity` | `/logout-inactivity` | The page to redirect to after inactivity. |
| `login` | `/login` | The login page. |
| `logout` | `/logout` | The logout page. |
| `reset` | `/reset` | The password reset page. |
| `unauthorized` | `/unauthorized` | The unauthorized page. |

**Note:** You can also swap out entire _views_ out for your own, using the `admin.views` property of the Payload Config. See [Custom Views](https://payloadcms.com/docs/custom-components/custom-views) for more information.

[**I18n**](https://payloadcms.com/docs/admin/overview#i18n)

The Payload Admin Panel is translated in over [30 languages and counting](https://github.com/payloadcms/payload/tree/main/packages/translations). Languages are automatically detected based on the user's browser and used by the Admin Panel to display all text in that language. If no language was detected, or if the user's language is not yet supported, English will be chosen. Users can easily specify their language by selecting one from their account page. See [I18n](https://payloadcms.com/docs/configuration/i18n) for more information.

[**Light and Dark Modes**](https://payloadcms.com/docs/admin/overview#light-and-dark-modes)

Users in the Admin Panel have the ability to choose between light mode and dark mode for their editing experience. Users can select their preferred theme from their account page. Once selected, it is saved to their user's preferences and persisted across sessions and devices. If no theme was selected, the Admin Panel will automatically detect the operation system's theme and use that as the default.

[**Timezones**](https://payloadcms.com/docs/admin/overview#timezones)

The `admin.timezones` configuration allows you to configure timezone settings for the Admin Panel. You can customise the available list of timezones and in the future configure the default timezone for the Admin Panel and for all users.

The following options are available:

| Option | Description |
| --- | --- |
| `supportedTimezones` | An array of label/value options for selectable timezones where the value is the IANA name eg. `America/Detroit` |
| `defaultTimezone` | The `value` of the default selected timezone. eg. `America/Los_Angeles` |

We validate the supported timezones array by checking the value against the list of IANA timezones supported via the Intl API, specifically `Intl.supportedValuesOf('timeZone')`.

**Important** You must enable timezones on each individual date field via `timezone: true`. See [Date Fields](https://payloadcms.com/docs/fields/overview#date) for more information.

[Next \\
**Preview**](https://payloadcms.com/docs/admin/preview)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443253912&cv=11&fst=1741443253912&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102693808~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fadmin%2Foverview&hn=www.googleadservices.com&frm=0&tiba=The%20Admin%20Panel%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1739098015.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254107&cv=11&fst=1741443254107&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fadmin%2Foverview&hn=www.googleadservices.com&frm=0&tiba=The%20Admin%20Panel%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1739098015.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload API Select
# Select

By default, Payload's APIs will return _all fields_ for a given collection or global. But, you may not need all of that data for all of your queries. Sometimes, you might want just a few fields from the response, which can speed up the Payload API and reduce the amount of JSON that is sent to you from the API.

This is where Payload's `select` feature comes in. Here, you can define exactly which fields you'd like to retrieve from the API.

[**Local API**](https://payloadcms.com/docs/queries/select#local-api)

To specify `select` in the [Local API](https://payloadcms.com/docs/local-api/overview), you can use the `select` option in your query:

1

import type {Payload}from'payload'

2

3

// Include mode

4

constgetPosts=async(payload:Payload)=>{

5

const posts =await payload.find({

6

collection:'posts',

7

select:{

8

text:true,

9

// select a specific field from group

10

group:{

11

number:true

12

},

13

// select all fields from array

14

array:true,

15

},

16

})

17

18

return posts

19

}

20

21

// Exclude mode

22

constgetPosts=async(payload:Payload)=>{

23

const posts =await payload.find({

24

collection:'posts',

25

// Select everything except for array and group.number

26

select:{

27

array:false,

28

group:{

29

number:false

30

}

31

},

32

})

33

34

return posts

35

}

**Important:** To perform querying with `select` efficiently, Payload implements your `select` query on the database level. Because of that, your `beforeRead` and `afterRead` hooks may not receive the full `doc`.

[**REST API**](https://payloadcms.com/docs/queries/select#rest-api)

To specify select in the [REST API](https://payloadcms.com/docs/rest-api/overview), you can use the `select` parameter in your query:

1

fetch('https://localhost:3000/api/posts?select\[color\]=true&select\[group\]\[number\]=true')

2

.then((res)=> res.json())

3

.then((data)=>console.log(data))

To understand the syntax, you need to understand that complex URL search strings are parsed into a JSON object. This one isn't too bad, but more complex queries get unavoidably more difficult to write.

For this reason, we recommend to use the extremely helpful and ubiquitous [`qs-esm`](https://www.npmjs.com/package/qs-esm) package to parse your JSON / object-formatted queries into query strings:

1

import{ stringify }from'qs-esm'

2

import type {Where}from'payload'

3

4

constselect:Where={

5

text:true,

6

group:{

7

number:true

8

}

9

// This query could be much more complex

10

// and QS would handle it beautifully

11

}

12

13

constgetPosts=async()=>{

14

const stringifiedQuery =stringify(

15

{

16

select,// ensure that \`qs\` adds the \`select\` property, too!

17

},

18

{addQueryPrefix:true},

19

)

20

21

const response =awaitfetch(\`http://localhost:3000/api/posts${stringifiedQuery}\`)

22

// Continue to handle the response below...

23

}

**Reminder:** This is the same for [Globals](https://payloadcms.com/docs/configuration/globals) using the `/api/globals` endpoint.

[**defaultPopulate collection config property**](https://payloadcms.com/docs/queries/select#defaultpopulate-collection-config-property)

The `defaultPopulate` property allows you specify which fields to select when populating the collection from another document. This is especially useful for links where only the `slug` is needed instead of the entire document.

With this feature, you can dramatically reduce the amount of JSON that is populated from [Relationship](https://payloadcms.com/docs/fields/relationship) or [Upload](https://payloadcms.com/docs/fields/upload) fields.

For example, in your content model, you might have a `Link` field which links out to a different page. When you go to retrieve these links, you really only need the `slug` of the page.

Loading all of the page content, its related links, and everything else is going to be overkill and will bog down your Payload APIs. Instead, you can define the `defaultPopulate` property on your `Pages` collection, so that when Payload "populates" a related Page, it only selects the `slug` field and therefore returns significantly less JSON:

1

import type {CollectionConfig}from'payload'

2

3

// The TSlug generic can be passed to have type safety for \`defaultPopulate\`.

4

// If avoided, the \`defaultPopulate\` type resolves to \`SelectType\`.

5

exportconstPages:CollectionConfig<'pages'>={

6

slug:'pages',

7

// Specify \`select\`.

8

defaultPopulate:{

9

slug:true,

10

},

11

fields:\[\
\
\
{\
\
\
name:'slug',\
\
\
type:'text',\
\
\
required:true,\
\
\
},\
\
\
\],

18

}

**Important:** When using `defaultPopulate` on a collection with [Uploads](https://payloadcms.com/docs/fields/upload) enabled and you want to select the `url` field, it is important to specify `filename: true` as well, otherwise Payload will not be able to construct the correct file URL, instead returning `url: null`.

[**populate**](https://payloadcms.com/docs/queries/select#populate)

Setting `defaultPopulate` will enforce that each time Payload performs a "population" of a related document, only the fields specified will be queried and returned. However, you can override `defaultPopulate` with the `populate` property in the Local and REST API:

**Local API:**

1

import type {Payload}from'payload'

2

3

constgetPosts=async(payload:Payload)=>{

4

const posts =await payload.find({

5

collection:'posts',

6

populate:{

7

// Select only \`text\` from populated docs in the "pages" collection

8

// Now, no matter what the \`defaultPopulate\` is set to on the "pages" collection,

9

// it will be overridden, and the \`text\` field will be returned instead.

10

pages:{

11

text:true,

12

},

13

},

14

})

15

16

return posts

17

}

**REST API:**

1

fetch('https://localhost:3000/api/posts?populate\[pages\]\[text\]=true')

2

.then((res)=> res.json())

3

.then((data)=>console.log(data))

[Next \\
**Depth**](https://payloadcms.com/docs/queries/depth)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254177&cv=11&fst=1741443254177&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fqueries%2Fselect&hn=www.googleadservices.com&frm=0&tiba=Select%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1675216824.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254423&cv=11&fst=1741443254423&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fqueries%2Fselect&hn=www.googleadservices.com&frm=0&tiba=Select%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1675216824.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## TypeScript Overview
# TypeScript - Overview

Payload supports TypeScript natively, and not only that, the entirety of the CMS is built with TypeScript. To get started developing with Payload and TypeScript, you can use one of Payload's built-in boilerplates in one line via `create-payload-app`:

1

npx create-payload-app@latest

Pick a TypeScript project type to get started easily.

[**Setting up from Scratch**](https://payloadcms.com/docs/typescript/overview#setting-up-from-scratch)

It's also possible to set up a TypeScript project from scratch. We plan to write up a guide for exactly how—so keep an eye out for that, too.

[**Using Payload's Exported Types**](https://payloadcms.com/docs/typescript/overview#using-payloads-exported-types)

Payload exports a number of types that you may find useful while writing your own custom functionality like [Plugins](https://payloadcms.com/docs/plugins/overview), [Hooks](https://payloadcms.com/docs/hooks/overview), [Access Control](https://payloadcms.com/docs/access-control/overview) functions, [Custom Views](https://payloadcms.com/docs/custom-components/custom-views), [GraphQL queries / mutations](https://payloadcms.com/docs/graphql/overview) or anything else.

[**Config Types**](https://payloadcms.com/docs/typescript/overview#config-types)

- [Base config](https://payloadcms.com/docs/configuration/overview#typescript)
- [Collections](https://payloadcms.com/docs/configuration/collections#typescript)
- [Globals](https://payloadcms.com/docs/configuration/globals#typescript)
- [Fields](https://payloadcms.com/docs/fields/overview#typescript)

[**Hook Types**](https://payloadcms.com/docs/typescript/overview#hook-types)

- [Collection hooks](https://payloadcms.com/docs/hooks/collections#typescript)
- [Global hooks](https://payloadcms.com/docs/hooks/globals#typescript)
- [Field hooks](https://payloadcms.com/docs/hooks/fields#typescript)

[Next \\
**Generating TypeScript Interfaces**](https://payloadcms.com/docs/typescript/generating-types)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443253926&cv=11&fst=1741443253926&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ftypescript%2Foverview&hn=www.googleadservices.com&frm=0&tiba=TypeScript%20-%20Overview%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1882575258.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443254146&cv=11&fst=1741443254146&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102308675~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ftypescript%2Foverview&hn=www.googleadservices.com&frm=0&tiba=TypeScript%20-%20Overview%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1882575258.1741443254&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Database Overview
# Database

Payload is database agnostic, meaning you can use any type of database behind Payload's familiar APIs. Payload is designed to interact with your database through a Database Adapter, which is a thin layer that translates Payload's internal data structures into your database's native data structures.

Currently, Payload officially supports the following Database Adapters:

- [MongoDB](https://payloadcms.com/docs/database/mongodb) with [Mongoose](https://mongoosejs.com/)
- [Postgres](https://payloadcms.com/docs/database/postgres) with [Drizzle](https://drizzle.team/)
- [SQLite](https://payloadcms.com/docs/database/sqlite) with [Drizzle](https://drizzle.team/)

To configure a Database Adapter, use the `db` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

import{ mongooseAdapter }from'@payloadcms/db-mongodb'

3

4

exportdefaultbuildConfig({

5

// ...

6

db:mongooseAdapter({

7

url: process.env.DATABASE\_URI,

8

}),

9

})

**Reminder:** The Database Adapter is an external dependency and must be installed in your project separately from Payload. You can find the installation instructions for each Database Adapter in their respective documentation.

[**Selecting a Database**](https://payloadcms.com/docs/database/overview#selecting-a-database)

There are several factors to consider when choosing which database technology and hosting option is right for your project and workload. Payload can theoretically support any database, but it's up to you to decide which database to use.

There are two main categories of databases to choose from:

- [Non-Relational Databases](https://payloadcms.com/docs/database/overview#non-relational-databases)
- [Relational Databases](https://payloadcms.com/docs/database/overview#relational-databases)

[**Non-Relational Databases**](https://payloadcms.com/docs/database/overview#non-relational-databases)

If your project has a lot of dynamic fields, and you are comfortable with allowing Payload to enforce data integrity across your documents, MongoDB is a great choice. With it, your Payload documents are stored as _one_ document in your database—no matter if you have localization enabled, how many block or array fields you have, etc. This means that the shape of your data in your database will very closely reflect your field schema, and there is minimal complexity involved in storing or retrieving your data.

You should prefer MongoDB if:

- You prefer simplicity within your database
- You don't want to deal with keeping production / staging databases in sync via [DDL changes](https://en.wikipedia.org/wiki/Data_definition_language)
- Most (or everything) in your project is [Localized](https://payloadcms.com/docs/configuration/localization)
- You leverage a lot of [Arrays](https://payloadcms.com/docs/fields/array), [Blocks](https://payloadcms.com/docs/fields/blocks), or `hasMany` [Select](https://payloadcms.com/docs/fields/select) fields

[**Relational Databases**](https://payloadcms.com/docs/database/overview#relational-databases)

Many projects might call for more rigid database architecture where the shape of your data is strongly enforced at the database level. For example, if you know the shape of your data and it's relatively "flat", and you don't anticipate it to change often, your workload might suit relational databases like Postgres very well.

You should prefer a relational DB like Postgres or SQLite if:

- You are comfortable with [Migrations](https://payloadcms.com/docs/database/migrations)
- You require enforced data consistency at the database level
- You have a lot of relationships between collections and require relationships to be enforced

[**Payload Differences**](https://payloadcms.com/docs/database/overview#payload-differences)

It's important to note that nearly every Payload feature is available in all of our officially supported Database Adapters, including [Localization](https://payloadcms.com/docs/configuration/localization), [Arrays](https://payloadcms.com/docs/fields/array), [Blocks](https://payloadcms.com/docs/fields/blocks), etc. The only thing that is not supported in SQLite yet is the [Point Field](https://payloadcms.com/docs/fields/point), but that should be added soon.

It's up to you to choose which database you would like to use based on the requirements of your project. Payload has no opinion on which database you should ultimately choose.

[Next \\
**Migrations**](https://payloadcms.com/docs/database/migrations)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259312&cv=11&fst=1741443259312&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fdatabase%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Database%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1592693828.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259496&cv=11&fst=1741443259496&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102813109~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fdatabase%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Database%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1592693828.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Collection Hooks Overview
# Collection Hooks

Collection Hooks are [Hooks](https://payloadcms.com/docs/hooks/overview) that run on Documents within a specific [Collection](https://payloadcms.com/docs/configuration/collections). They allow you to execute your own logic during specific events of the Document lifecycle.

To add Hooks to a Collection, use the `hooks` property in your [Collection Config](https://payloadcms.com/docs/configuration/collections):

1

import type {CollectionConfig}from'payload';

2

3

exportconstCollectionWithHooks:CollectionConfig={

4

// ...

5

hooks:{

6

// ...

7

},

8

}

**Tip:** You can also set hooks on the field-level to isolate hook logic to specific fields. [More details](https://payloadcms.com/docs/hooks/fields).

[**Config Options**](https://payloadcms.com/docs/hooks/collections#config-options)

All Collection Hooks accept an array of [synchronous or asynchronous functions](https://payloadcms.com/docs/hooks/overview#async-vs-synchronous). Each Collection Hook receives specific arguments based on its own type, and has the ability to modify specific outputs.

1

import type {CollectionConfig}from'payload';

2

3

exportconstCollectionWithHooks:CollectionConfig={

4

// ...

5

hooks:{

6

beforeOperation:\[(args)=>{...}\],

7

beforeValidate:\[(args)=>{...}\],

8

beforeDelete:\[(args)=>{...}\],

9

beforeChange:\[(args)=>{...}\],

10

beforeRead:\[(args)=>{...}\],

11

afterChange:\[(args)=>{...}\],

12

afterRead:\[(args)=>{...}\],

13

afterDelete:\[(args)=>{...}\],

14

afterOperation:\[(args)=>{...}\],

15

afterError:\[(args)=>{....}\],

16

17

// Auth-enabled Hooks

18

beforeLogin:\[(args)=>{...}\],

19

afterLogin:\[(args)=>{...}\],

20

afterLogout:\[(args)=>{...}\],

21

afterRefresh:\[(args)=>{...}\],

22

afterMe:\[(args)=>{...}\],

23

afterForgotPassword:\[(args)=>{...}\],

24

refresh:\[(args)=>{...}\],

25

me:\[(args)=>{...}\],

26

},

27

}

[**beforeOperation**](https://payloadcms.com/docs/hooks/collections#beforeoperation)

The `beforeOperation` hook can be used to modify the arguments that operations accept or execute side-effects that run before an operation begins.

Available Collection operations include `create`, `read`, `update`, `delete`, `login`, `refresh`, and `forgotPassword`.

1

import type {CollectionBeforeOperationHook}from'payload'

2

3

constbeforeOperationHook:CollectionBeforeOperationHook=async({

4

args,

5

operation,

6

req,

7

})=>{

8

return args // return modified operation arguments as necessary

9

}

The following arguments are provided to the `beforeOperation` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between Hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `operation` | The name of the operation that this hook is running within. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**beforeValidate**](https://payloadcms.com/docs/hooks/collections#beforevalidate)

Runs during the `create` and `update` operations. This hook allows you to add or format data before the incoming data is validated server-side.

Please do note that this does not run before client-side validation. If you render a custom field component in your front-end and provide it with a `validate` function, the order that validations will run in is:

1. `validate` runs on the client
2. if successful, `beforeValidate` runs on the server
3. `validate` runs on the server

1

import type {CollectionBeforeValidateHook}from'payload'

2

3

constbeforeValidateHook:CollectionBeforeValidateHook=async({

4

data,

5

})=>{

6

return data

7

}

The following arguments are provided to the `beforeValidate` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between Hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `data` | The incoming data passed through the operation. |
| `operation` | The name of the operation that this hook is running within. |
| `originalDoc` | The Document before changes are applied. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**beforeChange**](https://payloadcms.com/docs/hooks/collections#beforechange)

Immediately following validation, `beforeChange` hooks will run within `create` and `update` operations. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.

1

import type {CollectionBeforeChangeHook}from'payload'

2

3

constbeforeChangeHook:CollectionBeforeChangeHook=async({

4

data,

5

})=>{

6

return data

7

}

The following arguments are provided to the `beforeChange` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `data` | The incoming data passed through the operation. |
| `operation` | The name of the operation that this hook is running within. |
| `originalDoc` | The Document before changes are applied. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**afterChange**](https://payloadcms.com/docs/hooks/collections#afterchange)

After a document is created or updated, the `afterChange` hook runs. This hook is helpful to recalculate statistics such as total sales within a global, syncing user profile changes to a CRM, and more.

1

import type {CollectionAfterChangeHook}from'payload'

2

3

constafterChangeHook:CollectionAfterChangeHook=async({

4

doc,

5

})=>{

6

return doc

7

}

The following arguments are provided to the `afterChange` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `doc` | The resulting Document after changes are applied. |
| `operation` | The name of the operation that this hook is running within. |
| `previousDoc` | The Document before changes were applied. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**beforeRead**](https://payloadcms.com/docs/hooks/collections#beforeread)

Runs before `find` and `findByID` operations are transformed for output by `afterRead`. This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the `doc` argument.

1

import type {CollectionBeforeReadHook}from'payload'

2

3

constbeforeReadHook:CollectionBeforeReadHook=async({

4

doc,

5

})=>{

6

return doc

7

}

The following arguments are provided to the `beforeRead` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `doc` | The resulting Document after changes are applied. |
| `query` | The [Query](https://payloadcms.com/docs/queries/overview) of the request. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**afterRead**](https://payloadcms.com/docs/hooks/collections#afterread)

Runs as the last step before documents are returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.

1

import type {CollectionAfterReadHook}from'payload'

2

3

constafterReadHook:CollectionAfterReadHook=async({

4

doc,

5

})=>{

6

return doc

7

}

The following arguments are provided to the `afterRead` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `doc` | The resulting Document after changes are applied. |
| `query` | The [Query](https://payloadcms.com/docs/queries/overview) of the request. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**beforeDelete**](https://payloadcms.com/docs/hooks/collections#beforedelete)

Runs before the `delete` operation. Returned values are discarded.

1

import type {CollectionBeforeDeleteHook}from'payload';

2

3

constbeforeDeleteHook:CollectionBeforeDeleteHook=async({

4

req,

5

id,

6

})=>{...}

The following arguments are provided to the `beforeDelete` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `id` | The ID of the Document being deleted. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**afterDelete**](https://payloadcms.com/docs/hooks/collections#afterdelete)

Runs immediately after the `delete` operation removes records from the database. Returned values are discarded.

1

import type {CollectionAfterDeleteHook}from'payload';

2

3

constafterDeleteHook:CollectionAfterDeleteHook=async({

4

req,

5

id,

6

doc,

7

})=>{...}

The following arguments are provided to the `afterDelete` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `doc` | The resulting Document after changes are applied. |
| `id` | The ID of the Document that was deleted. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**afterOperation**](https://payloadcms.com/docs/hooks/collections#afteroperation)

The `afterOperation` hook can be used to modify the result of operations or execute side-effects that run after an operation has completed.

Available Collection operations include `create`, `find`, `findByID`, `update`, `updateByID`, `delete`, `deleteByID`, `login`, `refresh`, and `forgotPassword`.

1

import type {CollectionAfterOperationHook}from'payload'

2

3

constafterOperationHook:CollectionAfterOperationHook=async({

4

result,

5

})=>{

6

return result

7

}

The following arguments are provided to the `afterOperation` hook:

| Option | Description |
| --- | --- |
| `args` | The arguments passed into the operation. |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |
| `operation` | The name of the operation that this hook is running within. |
| `result` | The result of the operation, before modifications. |

[**afterError**](https://payloadcms.com/docs/hooks/collections#aftererror)

The `afterError` Hook is triggered when an error occurs in the Payload application. This can be useful for logging errors to a third-party service, sending an email to the development team, logging the error to Sentry or DataDog, etc. The output can be used to transform the result object / status code.

1

import type {CollectionAfterErrorHook}from'payload';

2

3

constafterDeleteHook:CollectionAfterErrorHook=async({

4

req,

5

id,

6

doc,

7

})=>{...}

The following arguments are provided to the `afterError` Hook:

| Argument | Description |
| --- | --- |
| `error` | The error that occurred. |
| `context` | Custom context passed between Hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `graphqlResult` | The GraphQL result object, available if the hook is executed within a GraphQL context. |
| `req` | The `PayloadRequest` object that extends [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request). Contains currently authenticated `user` and the Local API instance `payload`. |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `result` | The formatted error result object, available if the hook is executed from a REST context. |

[**beforeLogin**](https://payloadcms.com/docs/hooks/collections#beforelogin)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook runs during `login` operations where a user with the provided credentials exist, but before a token is generated and added to the response. You can optionally modify the user that is returned, or throw an error in order to deny the login operation.

1

import type {CollectionBeforeLoginHook}from'payload'

2

3

constbeforeLoginHook:CollectionBeforeLoginHook=async({

4

user,

5

})=>{

6

return user

7

}

The following arguments are provided to the `beforeLogin` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |
| `user` | The user being logged in. |

[**afterLogin**](https://payloadcms.com/docs/hooks/collections#afterlogin)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook runs after successful `login` operations. You can optionally modify the user that is returned.

1

import type {CollectionAfterLoginHook}from'payload';

2

3

constafterLoginHook:CollectionAfterLoginHook=async({

4

user,

5

token,

6

})=>{...}

The following arguments are provided to the `afterLogin` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |
| `token` | The token generated for the user. |
| `user` | The user being logged in. |

[**afterLogout**](https://payloadcms.com/docs/hooks/collections#afterlogout)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook runs after `logout` operations.

1

import type {CollectionAfterLogoutHook}from'payload';

2

3

constafterLogoutHook:CollectionAfterLogoutHook=async({

4

req,

5

})=>{...}

The following arguments are provided to the `afterLogout` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |

[**afterMe**](https://payloadcms.com/docs/hooks/collections#afterme)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook runs after `me` operations.

1

import type {CollectionAfterMeHook}from'payload';

2

3

constafterMeHook:CollectionAfterMeHook=async({

4

req,

5

response,

6

})=>{...}

The following arguments are provided to the `afterMe` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |
| `response` | The response to return. |

[**afterRefresh**](https://payloadcms.com/docs/hooks/collections#afterrefresh)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook runs after `refresh` operations.

1

import type {CollectionAfterRefreshHook}from'payload';

2

3

constafterRefreshHook:CollectionAfterRefreshHook=async({

4

token,

5

})=>{...}

The following arguments are provided to the `afterRefresh` hook:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `exp` | The expiration time of the token. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |
| `token` | The newly refreshed user token. |

[**afterForgotPassword**](https://payloadcms.com/docs/hooks/collections#afterforgotpassword)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook runs after successful `forgotPassword` operations. Returned values are discarded.

1

import type {CollectionAfterForgotPasswordHook}from'payload'

2

3

constafterForgotPasswordHook:CollectionAfterForgotPasswordHook=async({

4

args,

5

context,

6

collection,

7

})=>{...}

The following arguments are provided to the `afterForgotPassword` hook:

| Option | Description |
| --- | --- |
| `args` | The arguments passed into the operation. |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. |
| `context` | Custom context passed between hooks. [More details](https://payloadcms.com/docs/hooks/context). |

[**refresh**](https://payloadcms.com/docs/hooks/collections#refresh)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook allows you to optionally replace the default behavior of the `refresh` operation with your own. If you optionally return a value from your hook, the operation will not perform its own logic and continue.

1

import type {CollectionRefreshHook}from'payload'

2

3

constmyRefreshHook:CollectionRefreshHook=async({

4

args,

5

user,

6

})=>{...}

The following arguments are provided to the `afterRefresh` hook:

| Option | Description |
| --- | --- |
| `args` | The arguments passed into the operation. |
| `user` | The user being logged in. |

[**me**](https://payloadcms.com/docs/hooks/collections#me)

For [Auth-enabled Collections](https://payloadcms.com/docs/authentication/overview), this hook allows you to optionally replace the default behavior of the `me` operation with your own. If you optionally return a value from your hook, the operation will not perform its own logic and continue.

1

import type {CollectionMeHook}from'payload'

2

3

constmeHook:CollectionMeHook=async({

4

args,

5

user,

6

})=>{...}

The following arguments are provided to the `me` hook:

| Option | Description |
| --- | --- |
| `args` | The arguments passed into the operation. |
| `user` | The user being logged in. |

[**TypeScript**](https://payloadcms.com/docs/hooks/collections#typescript)

Payload exports a type for each Collection hook which can be accessed as follows:

1

import type {

2

CollectionBeforeOperationHook,

3

CollectionBeforeValidateHook,

4

CollectionBeforeChangeHook,

5

CollectionAfterChangeHook,

6

CollectionAfterReadHook,

7

CollectionBeforeReadHook,

8

CollectionBeforeDeleteHook,

9

CollectionAfterDeleteHook,

10

CollectionBeforeLoginHook,

11

CollectionAfterLoginHook,

12

CollectionAfterLogoutHook,

13

CollectionAfterRefreshHook,

14

CollectionAfterMeHook,

15

CollectionAfterForgotPasswordHook,

16

CollectionRefreshHook,

17

CollectionMeHook,

18

}from'payload'

[Next \\
**Global Hooks**](https://payloadcms.com/docs/hooks/globals)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259593&cv=11&fst=1741443259593&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102643510~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fhooks%2Fcollections&hn=www.googleadservices.com&frm=0&tiba=Collection%20Hooks%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=321021004.1741443260&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259819&cv=11&fst=1741443259819&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fhooks%2Fcollections&hn=www.googleadservices.com&frm=0&tiba=Collection%20Hooks%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=321021004.1741443260&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload Authentication Overview
# Authentication Overview

Simplified Authentication for Headless CMS: Unlocking Reusability in One Line - YouTube

Payload

10.5K subscribers

[Simplified Authentication for Headless CMS: Unlocking Reusability in One Line](https://www.youtube.com/watch?v=CT4KafeJjTI)

Payload

Search

Info

Shopping

Tap to unmute

If playback doesn't begin shortly, try restarting your device.

You're signed out

Videos you watch may be added to the TV's watch history and influence TV recommendations. To avoid this, cancel and sign in to YouTube on your computer.

CancelConfirm

Share

Include playlist

An error occurred while retrieving sharing information. Please try again later.

Watch later

Share

Copy link

Watch on

0:00

/ •Live

•

[Watch on YouTube](https://www.youtube.com/watch?v=CT4KafeJjTI "Watch on YouTube")

Authentication is a critical part of any application. Payload provides a secure, portable way to manage user accounts out of the box. Payload Authentication is designed to be used in both the [Admin Panel](https://payloadcms.com/docs/admin/overview), all well as your own external applications, completely eliminating the need for paid, third-party platforms and services.

Here are some common use cases of Authentication in your own applications:

- Customer accounts for an e-commerce app
- User accounts for a SaaS product
- P2P apps or social sites where users need to log in and manage their profiles
- Online games where players need to track their progress over time

When Authentication is enabled on a [Collection](https://payloadcms.com/docs/configuration/collections), Payload injects all necessary functionality to support the entire user flow. This includes all [auth-related operations](https://payloadcms.com/docs/authentication/operations) like account creation, logging in and out, and resetting passwords, all [auth-related emails](https://payloadcms.com/docs/authentication/email) like email verification and password reset, as well as any necessary UI to manage users from the Admin Panel.

To enable Authentication on a Collection, use the `auth` property in the [Collection Config](https://payloadcms.com/docs/configuration/collections#config-options):

1

import type {CollectionConfig}from'payload'

2

3

exportconstUsers:CollectionConfig={

4

// ...

5

auth:true,

6

}

![Authentication Admin Panel functionality](https://payloadcms.com/images/docs/auth-admin.jpg)

_Admin Panel screenshot depicting an Admins Collection with Auth enabled_

[**Config Options**](https://payloadcms.com/docs/authentication/overview#config-options)

Any [Collection](https://payloadcms.com/docs/configuration/collections) can opt-in to supporting Authentication. Once enabled, each Document that is created within the Collection can be thought of as a "user". This enables a complete authentication workflow on your Collection, such as logging in and out, resetting their password, and more.

**Note:** By default, Payload provides an auth-enabled `User` Collection which is used to access the Admin Panel. [More details](https://payloadcms.com/docs/admin/overview#the-admin-user-collection).

To enable Authentication on a Collection, use the `auth` property in the [Collection Config](https://payloadcms.com/docs/configuration/collections):

1

import type {CollectionConfig}from'payload'

2

3

exportconstAdmins:CollectionConfig={

4

// ...

5

auth:{

6

tokenExpiration:7200,// How many seconds to keep the user logged in

7

verify:true,// Require email verification before being allowed to authenticate

8

maxLoginAttempts:5,// Automatically lock a user out after X amount of failed logins

9

lockTime:600\*1000,// Time period to allow the max login attempts

10

// More options are available

11

},

12

}

**Tip:** For default auth behavior, set `auth: true`. This is a good starting point for most applications.

**Note:** Auth-enabled Collections with be automatically injected with the `hash`, `salt`, and `email` fields. [More details](https://payloadcms.com/docs/fields/overview#field-names).

The following options are available:

| Option | Description |
| --- | --- |
| `cookies` | Set cookie options, including `secure`, `sameSite`, and `domain`. For advanced users. |
| `depth` | How many levels deep a `user` document should be populated when creating the JWT and binding the `user` to the `req`. Defaults to `0` and should only be modified if absolutely necessary, as this will affect performance. |
| `disableLocalStrategy` | Advanced - disable Payload's built-in local auth strategy. Only use this property if you have replaced Payload's auth mechanisms with your own. |
| `forgotPassword` | Customize the way that the `forgotPassword` operation functions. [More details](https://payloadcms.com/docs/authentication/email#forgot-password). |
| `lockTime` | Set the time (in milliseconds) that a user should be locked out if they fail authentication more times than `maxLoginAttempts` allows for. |
| `loginWithUsername` | Ability to allow users to login with username/password. [More](https://payloadcms.com/docs/authentication/overview#login-with-username) |
| `maxLoginAttempts` | Only allow a user to attempt logging in X amount of times. Automatically locks out a user from authenticating if this limit is passed. Set to `0` to disable. |
| `removeTokenFromResponses` | Set to true if you want to remove the token from the returned authentication API responses such as login or refresh. |
| `strategies` | Advanced - an array of custom authentication strategies to extend this collection's authentication with. [More details](https://payloadcms.com/docs/authentication/custom-strategies). |
| `tokenExpiration` | How long (in seconds) to keep the user logged in. JWTs and HTTP-only cookies will both expire at the same time. |
| `useAPIKey` | Payload Authentication provides for API keys to be set on each user within an Authentication-enabled Collection. [More details](https://payloadcms.com/docs/authentication/api-keys). |
| `verify` | Set to `true` or pass an object with verification options to require users to verify by email before they are allowed to log into your app. [More details](https://payloadcms.com/docs/authentication/email#email-verification). |

[**Login With Username**](https://payloadcms.com/docs/authentication/overview#login-with-username)

You can allow users to login with their username instead of their email address by setting the `loginWithUsername` property to `true`.

Example:

1

{

2

slug:'customers',

3

auth:{

4

loginWithUsername:true,

5

},

6

}

Or, you can pass an object with additional options:

1

{

2

slug:'customers',

3

auth:{

4

loginWithUsername:{

5

allowEmailLogin:true,// default: false

6

requireEmail:false,// default: false

7

},

8

},

9

}

`allowEmailLogin`

If set to `true`, users can log in with either their username or email address. If set to `false`, users can only log in with their username.

`requireEmail`

If set to `true`, an email address is required when creating a new user. If set to `false`, email is not required upon creation.

[**Auto-Login**](https://payloadcms.com/docs/authentication/overview#auto-login)

For testing and demo purposes you may want to skip forcing the user to login in order to access your application. Typically, all users should be required to login, however, you can speed up local development time by enabling auto-login.

To enable auto-login, set the `autoLogin` property in the [Payload Config](https://payloadcms.com/docs/admin/overview#admin-options):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

autoLogin:

6

process.env.NEXT\_PUBLIC\_ENABLE\_AUTOLOGIN==='true'

7

?{

8

email:'test@example.com',

9

password:'test',

10

prefillOnly:true,

11

}

12

:false,

13

})

**Warning:** The recommended way to use this feature is behind an [Environment Variable](https://payloadcms.com/docs/configuration/environment-vars). This will ensure it is _disabled_ in production.

The following options are available:

| Option | Description |
| --- | --- |
| `username` | The username of the user to login as |
| `email` | The email address of the user to login as |
| `password` | The password of the user to login as. This is only needed if `prefillOnly` is set to true |
| `prefillOnly` | If set to true, the login credentials will be prefilled but the user will still need to click the login button. |

[**Operations**](https://payloadcms.com/docs/authentication/overview#operations)

All auth-related operations are available via Payload's REST, Local, and GraphQL APIs. These operations are automatically added to your Collection when you enable Authentication. [More details](https://payloadcms.com/docs/authentication/operations).

[**Strategies**](https://payloadcms.com/docs/authentication/overview#strategies)

Out of the box Payload ships with a three powerful Authentication strategies:

- [HTTP-Only Cookies](https://payloadcms.com/docs/authentication/cookies)
- [JSON Web Tokens (JWT)](https://payloadcms.com/docs/authentication/jwt)
- [API-Keys](https://payloadcms.com/docs/authentication/api-keys)

Each of these strategies can work together or independently. You can also create your own custom strategies to fit your specific needs. [More details](https://payloadcms.com/docs/authentication/custom-strategies).

[**HTTP-Only Cookies**](https://payloadcms.com/docs/authentication/overview#http-only-cookies)

[HTTP-only cookies](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) are a highly secure method of storing identifiable data on a user's device so that Payload can automatically recognize a returning user until their cookie expires. They are totally protected from common XSS attacks and **cannot be read by JavaScript in the browser**, unlike JWT's. [More details](https://payloadcms.com/docs/authentication/cookies).

[**JSON Web Tokens**](https://payloadcms.com/docs/authentication/overview#json-web-tokens)

JWT (JSON Web Tokens) can also be utilized to perform authentication. Tokens are generated on `login`, `refresh` and `me` operations and can be attached to future requests to authenticate users. [More details](https://payloadcms.com/docs/authentication/jwt).

[**API Keys**](https://payloadcms.com/docs/authentication/overview#api-keys)

API Keys can be enabled on auth collections. These are particularly useful when you want to authenticate against Payload from a third party service. [More details](https://payloadcms.com/docs/authentication/api-keys).

[**Custom Strategies**](https://payloadcms.com/docs/authentication/overview#custom-strategies)

There are cases where these may not be enough for your application. Payload is extendable by design so you can wire up your own strategy when you need to. [More details](https://payloadcms.com/docs/authentication/custom-strategies).

[Next \\
**Authentication Operations**](https://payloadcms.com/docs/authentication/operations)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Payload SQLite Configuration
# SQLite

To use Payload with SQLite, install the package `@payloadcms/db-sqlite`. It leverages Drizzle ORM and `libSQL` to interact with a SQLite database that you provide.

It automatically manages changes to your database for you in development mode, and exposes a full suite of migration controls for you to leverage in order to keep other database environments in sync with your schema. DDL transformations are automatically generated.

To configure Payload to use SQLite, pass the `sqliteAdapter` to your Payload Config as follows:

1

import{ sqliteAdapter }from'@payloadcms/db-sqlite'

2

3

exportdefaultbuildConfig({

4

// Your config goes here

5

collections:\[\
\
\
// Collections go here\
\
\
\],

8

// Configure the SQLite adapter here

9

db:sqliteAdapter({

10

// SQLite-specific arguments go here.

11

// \`client.url\` is required.

12

client:{

13

url: process.env.DATABASE\_URL,

14

authToken: process.env.DATABASE\_AUTH\_TOKEN,

15

}

16

}),

17

})

[**Options**](https://payloadcms.com/docs/database/sqlite#options)

| Option | Description |
| --- | --- |
| `client` \\* | [Client connection options](https://orm.drizzle.team/docs/get-started-sqlite#turso) that will be passed to `createClient` from `@libsql/client`. |
| `push` | Disable Drizzle's [`db push`](https://orm.drizzle.team/kit-docs/overview#prototyping-with-db-push) in development mode. By default, `push` is enabled for development mode only. |
| `migrationDir` | Customize the directory that migrations are stored. |
| `logger` | The instance of the logger to be passed to drizzle. By default Payload's will be used. |
| `idType` | A string of 'number', or 'uuid' that is used for the data type given to id columns. |
| `transactionOptions` | A SQLiteTransactionConfig object for transactions, or set to `false` to disable using transactions. [More details](https://orm.drizzle.team/docs/transactions) |
| `localesSuffix` | A string appended to the end of table names for storing localized fields. Default is '\_locales'. |
| `relationshipsSuffix` | A string appended to the end of table names for storing relationships. Default is '\_rels'. |
| `versionsSuffix` | A string appended to the end of table names for storing versions. Defaults to '\_v'. |
| `beforeSchemaInit` | Drizzle schema hook. Runs before the schema is built. [More Details](https://payloadcms.com/docs/database/sqlite#beforeschemainit) |
| `afterSchemaInit` | Drizzle schema hook. Runs after the schema is built. [More Details](https://payloadcms.com/docs/database/sqlite#afterschemainit) |
| `generateSchemaOutputFile` | Override generated schema from `payload generate:db-schema` file path. Defaults to `{CWD}/src/payload-generated.schema.ts` |
| `autoIncrement` | Pass `true` to enable SQLite [AUTOINCREMENT](https://www.sqlite.org/autoinc.html) for primary keys to ensure the same ID cannot be reused from deleted rows |

[**Access to Drizzle**](https://payloadcms.com/docs/database/sqlite#access-to-drizzle)

After Payload is initialized, this adapter will expose the full power of Drizzle to you for use if you need it.

To ensure type-safety, you need to generate Drizzle schema first with:

1

npx payload generate:db-schema

Then, you can access Drizzle as follows:

1

// Import table from the generated file

2

import{ posts }from'./payload-generated-schema'

3

// To avoid installing Drizzle, you can import everything that drizzle has from our re-export path.

4

import{ eq, sql, and }from'@payloadcms/db-sqlite/drizzle'

5

6

// Drizzle's Querying API: https://orm.drizzle.team/docs/rqb

7

const posts =await payload.db.drizzle.query.posts.findMany()

8

// Drizzle's Select API https://orm.drizzle.team/docs/select

9

const result =await payload.db.drizzle.select().from(posts).where(and(eq(posts.id,50), sql\`lower(${posts.title})='example post title'\`))

[**Tables and relations**](https://payloadcms.com/docs/database/sqlite#tables-and-relations)

In addition to exposing Drizzle directly, all of the tables and Drizzle relations are exposed for you via the `payload.db` property as well.

- Tables - `payload.db.tables`
- Relations - `payload.db.relations`

[**Prototyping in development mode**](https://payloadcms.com/docs/database/sqlite#prototyping-in-development-mode)

Drizzle exposes two ways to work locally in development mode.

The first is [`db push`](https://orm.drizzle.team/kit-docs/overview#prototyping-with-db-push), which automatically pushes changes you make to your Payload Config (and therefore, Drizzle schema) to your database so you don't have to manually migrate every time you change your Payload Config. This only works in development mode, and should not be mixed with manually running [`migrate`](https://payloadcms.com/docs/database/migrations) commands.

You will be warned if any changes that you make will entail data loss while in development mode. Push is enabled by default, but you can opt out if you'd like.

Alternatively, you can disable `push` and rely solely on migrations to keep your local database in sync with your Payload Config.

[**Migration workflows**](https://payloadcms.com/docs/database/sqlite#migration-workflows)

In SQLite, migrations are a fundamental aspect of working with Payload and you should become familiar with how they work.

For more information about migrations, [click here](https://payloadcms.com/docs/database/migrations#when-to-run-migrations).

[**Drizzle schema hooks**](https://payloadcms.com/docs/database/sqlite#drizzle-schema-hooks) [**beforeSchemaInit**](https://payloadcms.com/docs/database/sqlite#beforeschemainit)

Runs before the schema is built. You can use this hook to extend your database structure with tables that won't be managed by Payload.

1

import{ sqliteAdapter }from'@payloadcms/db-sqlite'

2

import{ integer, sqliteTable }from'@payloadcms/db-sqlite/drizzle/sqlite-core'

3

4

sqliteAdapter({

5

beforeSchemaInit:\[\
\
\
({ schema, adapter })=>{\
\
\
return{\
\
\
...schema,\
\
\
tables:{\
\
\
...schema.tables,\
\
\
addedTable:sqliteTable('added\_table',{\
\
\
id:integer('id').primaryKey({autoIncrement:true}),\
\
\
}),\
\
\
},\
\
\
}\
\
\
},\
\
\
\],

18

})

One use case is preserving your existing database structure when migrating to Payload. By default, Payload drops the current database schema, which may not be desirable in this scenario. To quickly generate the Drizzle schema from your database you can use [Drizzle Introspection](https://orm.drizzle.team/kit-docs/commands#introspect--pull) You should get the `schema.ts` file which may look like this:

1

import{ sqliteTable, text, uniqueIndex, integer }from'drizzle-orm/sqlite-core'

2

3

exportconst users =sqliteTable('users',{

4

id:integer('id').primaryKey({autoIncrement:true}),

5

fullName:text('full\_name'),

6

phone:text('phone',{length:256}),

7

})

8

9

exportconst countries =sqliteTable(

10

'countries',

11

{

12

id:integer('id').primaryKey({autoIncrement:true}),

13

name:text('name',{length:256}),

14

},

15

(countries)=>{

16

return{

17

nameIndex:uniqueIndex('name\_idx').on(countries.name),

18

}

19

},

20

)

You can import them into your config and append to the schema with the `beforeSchemaInit` hook like this:

1

import{ sqliteAdapter }from'@payloadcms/db-sqlite'

2

import{ users, countries }from'../drizzle/schema'

3

4

sqliteAdapter({

5

beforeSchemaInit:\[\
\
\
({ schema, adapter })=>{\
\
\
return{\
\
\
...schema,\
\
\
tables:{\
\
\
...schema.tables,\
\
\
users,\
\
\
countries\
\
\
},\
\
\
}\
\
\
},\
\
\
\],

17

})

Make sure Payload doesn't overlap table names with its collections. For example, if you already have a collection with slug "users", you should either change the slug or `dbName` to change the table name for this collection.

[**afterSchemaInit**](https://payloadcms.com/docs/database/sqlite#afterschemainit)

Runs after the Drizzle schema is built. You can use this hook to modify the schema with features that aren't supported by Payload, or if you want to add a column that you don't want to be in the Payload config. To extend a table, Payload exposes `extendTable` utillity to the args. You can refer to the [Drizzle documentation](https://orm.drizzle.team/docs/sql-schema-declaration). The following example adds the `extra_integer_column` column and a composite index on `country` and `city` columns.

1

import{ sqliteAdapter }from'@payloadcms/db-sqlite'

2

import{ index, integer }from'@payloadcms/db-sqlite/drizzle/sqlite-core'

3

import{ buildConfig }from'payload'

4

5

exportdefaultbuildConfig({

6

collections:\[\
\
\
{\
\
\
slug:'places',\
\
\
fields:\[\
\
\
{\
\
\
name:'country',\
\
\
type:'text',\
\
\
},\
\
\
{\
\
\
name:'city',\
\
\
type:'text',\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

21

db:sqliteAdapter({

22

afterSchemaInit:\[\
\
\
({ schema, extendTable, adapter })=>{\
\
\
extendTable({\
\
\
table: schema.tables.places,\
\
\
columns:{\
\
\
extraIntegerColumn:integer('extra\_integer\_column'),\
\
\
},\
\
\
extraConfig:(table)=>({\
\
\
country\_city\_composite\_index:index('country\_city\_composite\_index').on(\
\
\
table.country,\
\
\
table.city,\
\
\
),\
\
\
}),\
\
\
})\
\
\
\
return schema\
\
\
},\
\
\
\],

40

}),

41

})

[**Note for generated schema:**](https://payloadcms.com/docs/database/sqlite#note-for-generated-schema)

Columns and tables, added in schema hooks won't be added to the generated via `payload generate:db-schema` Drizzle schema. If you want them to be there, you either have to edit this file manually or mutate the internal Payload "raw" SQL schema in the `beforeSchemaInit`:

1

import{ sqliteAdapter }from'@payloadcms/db-sqlite'

2

3

sqliteAdapter({

4

beforeSchemaInit:\[\
\
\
({ schema, adapter })=>{\
\
\
// Add a new table\
\
\
adapter.rawTables.myTable={\
\
\
name:'my\_table',\
\
\
columns:{\
\
\
my\_id:{\
\
\
name:'my\_id',\
\
\
type:'integer',\
\
\
primaryKey:true\
\
\
}\
\
\
}\
\
\
}\
\
\
\
// Add a new column to generated by Payload table:\
\
\
adapter.rawTables.posts.columns.customColumn={\
\
\
name:'custom\_column',\
\
\
// Note that Payload SQL doesn't support everything that Drizzle does.\
\
\
type:'integer',\
\
\
notNull:true\
\
\
}\
\
\
// Add a new index to generated by Payload table:\
\
\
adapter.rawTables.posts.indexes.customColumnIdx={\
\
\
name:'custom\_column\_idx',\
\
\
unique:true,\
\
\
on:\['custom\_column'\]\
\
\
}\
\
\
\
return schema\
\
\
},\
\
\
\],

35

})

[Next \\
**Fields Overview**](https://payloadcms.com/docs/fields/overview)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259349&cv=11&fst=1741443259349&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fdatabase%2Fsqlite&hn=www.googleadservices.com&frm=0&tiba=SQLite%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=737000901.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259566&cv=11&fst=1741443259566&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fdatabase%2Fsqlite&hn=www.googleadservices.com&frm=0&tiba=SQLite%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=737000901.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Draft Management
# Drafts

Payload's Draft functionality builds on top of the Versions functionality to allow you to make changes to your collection documents and globals, but publish only when you're ready. This functionality allows you to build powerful Preview environments for your data, where you can make sure your changes look good before publishing documents.

Drafts rely on Versions being enabled in order to function.

By enabling Versions with Drafts, your collections and globals can maintain _newer_, and _unpublished_ versions of your documents. It's perfect for cases where you might want to work on a document, update it and save your progress, but not necessarily make it publicly published right away. Drafts are extremely helpful when building preview implementations.

![Drafts Enabled](https://payloadcms.com/images/docs/drafts-enabled.png)

_If Drafts are enabled, the typical Save button is replaced with new actions which allow you to either save a draft, or publish your changes._

[**Options**](https://payloadcms.com/docs/versions/drafts#options)

Collections and Globals both support the same options for configuring drafts. You can either set `versions.drafts` to `true`, or pass an object to configure draft properties.

| Draft Option | Description |
| --- | --- |
| `autosave` | Enable `autosave` to automatically save progress while documents are edited. To enable, set to `true` or pass an object with [options](https://payloadcms.com/docs/versions/autosave). |
| `schedulePublish` | Allow for editors to schedule publish / unpublish events in the future. [More](https://payloadcms.com/docs/versions/drafts#scheduled-publish) |
| `validate` | Set `validate` to `true` to validate draft documents when saved. Default is `false`. |

[**Database changes**](https://payloadcms.com/docs/versions/drafts#database-changes)

By enabling drafts on a collection or a global, Payload will **automatically inject a new field into your schema** called `_status`. The `_status` field is used internally by Payload to store if a document is set to `draft` or `published`.

**Admin UI status indication**

Within the Admin UI, if drafts are enabled, a document can be shown with one of three "statuses":

1. **Draft** \- if a document has never been published, and only draft versions of the document are present
2. **Published** \- if a document is published and there are no newer drafts available
3. **Changed** \- if a document has been published, but there are newer drafts available and not yet published

[**Draft API**](https://payloadcms.com/docs/versions/drafts#draft-api)

If drafts are enabled on your collection or global, important and powerful changes are made to your REST, GraphQL, and Local APIs that allow you to specify if you are interacting with drafts or with live documents.

[**Updating or creating drafts**](https://payloadcms.com/docs/versions/drafts#updating-or-creating-drafts)

If you enable drafts on a collection or global, the `create` and `update` operations for REST, GraphQL, and Local APIs expose a new option called `draft` which allows you to specify if you are creating or updating a **draft**, or if you're just sending your changes straight to the published document. For example, if you pass the query parameter `?draft=true` to a REST `create` or `update` operation, your action will be treated as if you are creating a `draft` and not a published document. By default, the `draft` argument is set to `false`.

**Required fields**

If `draft` is enabled while creating or updating a document, all fields are considered as not required, so that you can save drafts that are incomplete.

[**Reading drafts vs. published documents**](https://payloadcms.com/docs/versions/drafts#reading-drafts-vs-published-documents)

In addition to the `draft` argument within `create` and `update` operations, a `draft` argument is also exposed for `find` and `findByID` operations.

If `draft` is set to `true` while reading a document, **Payload will automatically replace returned document(s) with their newest drafts** if any newer drafts are available.

**For example, let's take the following scenario:**

1. You create a new collection document and publish it right away
2. You then make some updates, and save the updates as a draft
3. You then make some further updates, and save more updates as another draft

Here, you will have a published document that resides in your main collection, and then you'll have two _newer_ drafts that reside in the `_[collectionSlug]_versions` database collection.

If you simply fetch your created document using a `find` or `findByID` operation, your published document will be returned and the drafts will be ignored.

But, if you specify `draft` as `true`, Payload will automatically replace your published document's content with content coming from the most recently saved `version`. In this case, as we have created _two_ versions in the above scenario, Payload will send back data from the newest (second) draft and your document will appear as the most recently drafted version instead of the published version.

**Important:** the `draft` argument on its own will not restrict documents with `_status: 'draft'` from being returned from the API. You need to use Access Control to prevent documents with `_status: 'draft'` from being returned to unauthenticated users. Read below for more information on how this works.

[**Controlling who can see Collection drafts**](https://payloadcms.com/docs/versions/drafts#controlling-who-can-see-collection-drafts)

If you're using the **drafts** feature, it's important for you to consider who can view your drafts, and who can view only published documents. Luckily, Payload makes this extremely simple and puts the power completely in your hands.

[**Restricting draft access**](https://payloadcms.com/docs/versions/drafts#restricting-draft-access)

You can use the `read` [Access Control](https://payloadcms.com/docs/access-control/collections#read) method to restrict who is able to view drafts of your documents by simply returning a [query constraint](https://payloadcms.com/docs/queries/overview) which restricts the documents that any given user is able to retrieve.

Here is an example that utilizes the `_status` field to require a user to be logged in to retrieve drafts:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPages:CollectionConfig={

4

slug:'pages',

5

access:{

6

read:({ req })=>{

7

// If there is a user logged in,

8

// let them retrieve all documents

9

if(req.user)returntrue

10

11

// If there is no user,

12

// restrict the documents that are returned

13

// to only those where \`\_status\` is equal to \`published\`

14

return{

15

\_status:{

16

equals:'published',

17

},

18

}

19

},

20

},

21

versions:{

22

drafts:true,

23

},

24

//.. the rest of the Pages config here

25

}

**Note regarding adding versions to an existing collection**

If you already have a collection with documents, and you _opt in_ to draft functionality after you have already created existing documents, all of your old documents _will not have a_ `_status` _field_ until you resave them. For this reason, if you are _adding_ versions into an existing collection, you might want to write your Access Control function to allow for users to read both documents where `_status` **is equal to** `"published"` as well as where `_status` **does not exist**.

Here is an example for how to write an [Access Control](https://payloadcms.com/docs/access-control/overview) function that grants access to both documents where `_status` is equal to "published" and where `_status` does not exist:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPages:CollectionConfig={

4

slug:'pages',

5

access:{

6

read:({ req })=>{

7

// If there is a user logged in,

8

// let them retrieve all documents

9

if(req.user)returntrue

10

11

// If there is no user,

12

// restrict the documents that are returned

13

// to only those where \`\_status\` is equal to \`published\`

14

// or where \`\_status\` does not exist

15

return{

16

or:\[\
\
\
{\
\
\
\_status:{\
\
\
equals:'published',\
\
\
},\
\
\
},\
\
\
{\
\
\
\_status:{\
\
\
exists:false,\
\
\
},\
\
\
},\
\
\
\],

28

}

29

},

30

},

31

versions:{

32

drafts:true,

33

},

34

//.. the rest of the Pages config here

35

}

[**Scheduled publish**](https://payloadcms.com/docs/versions/drafts#scheduled-publish)

Payload provides for an ability to schedule publishing / unpublishing events in the future, which can be helpful if you need to set certain documents to "go live" at a given date in the future, or, vice versa, revert to a draft state after a certain time has passed.

You can enable this functionality on both collections and globals via the `versions.drafts.schedulePublish: true` property.

**Important:** if you are going to enable scheduled publish / unpublish, you need to make sure your Payload app is set up to process [Jobs](https://payloadcms.com/docs/jobs-queue/overview). This feature works by creating a Job in the background, which will be picked up after the job becomes available. If you do not have any mechanism in place to run jobs, your scheduled publish / unpublish jobs will never be executed.

[**Unpublishing drafts**](https://payloadcms.com/docs/versions/drafts#unpublishing-drafts)

If a document is published, the Payload Admin UI will be updated to show an "unpublish" button at the top of the sidebar, which will "unpublish" the currently published document. Consider this as a way to "revert" a document back to a draft state. On the API side, this is done by simply setting `_status: 'draft'` on any document.

[**Reverting to published**](https://payloadcms.com/docs/versions/drafts#reverting-to-published)

If a document is published, and you have made further changes which are saved as a draft, Payload will show a "revert to published" button at the top of the sidebar which will allow you to reject your draft changes and "revert" back to the published state of the document. Your drafts will still be saved, but a new version will be created that will reflect the last published state of the document.

[Next \\
**Autosave**](https://payloadcms.com/docs/versions/autosave)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259405&cv=11&fst=1741443259405&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fversions%2Fdrafts&hn=www.googleadservices.com&frm=0&tiba=Drafts%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=282345026.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259608&cv=11&fst=1741443259608&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fversions%2Fdrafts&hn=www.googleadservices.com&frm=0&tiba=Drafts%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=282345026.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Document Versioning System
# Versions

Payload's powerful Versions functionality allows you to keep a running history of changes over time and extensible to fit any content publishing workflow.

When enabled, Payload will automatically scaffold a new Collection in your database to store versions of your document(s) over time, and the Admin UI will be extended with additional views that allow you to browse document versions, view diffs in order to see exactly what has changed in your documents (and when they changed), and restore documents back to prior versions easily.

![Versions](https://payloadcms.com/images/docs/versions.png)

_Comparing an old version to a newer version of a document_

**With Versions, you can:**

- Maintain an audit log / history of every change ever made to a document, including monitoring for what user made which change
- Restore documents and globals to prior states in case you need to roll back changes
- Build a true [Draft Preview](https://payloadcms.com/docs/versions/drafts) mode for your data
- Manage who can see Drafts, and who can only see Published documents via [Access Control](https://payloadcms.com/docs/access-control/overview)
- Enable [Autosave](https://payloadcms.com/docs/versions/autosave) on collections and globals to never lose your work again
- Build a powerful publishing schedule mechanism to create documents and have them become publicly readable automatically at a future date

Versions are extremely performant and totally opt-in. They don't change the shape of your data at all. All versions are stored in a separate Collection and can be turned on and off easily at your discretion.

[**Options**](https://payloadcms.com/docs/versions/overview#options)

Versions support a few different levels of functionality that each come with their own impacts to document workflow.

[**Versions enabled, drafts disabled**](https://payloadcms.com/docs/versions/overview#versions-enabled-drafts-disabled)

If you enable versions but keep draft mode disabled, Payload will simply create a new version of a document each time you update a document. This is great for use cases where you need to retain a history of all document updates over time, but always want to treat the newest document version as the version that is "published".

For example, a use case for "versions enabled, drafts disabled" could be on a collection of users, where you might want to keep a version history (or audit log) of all changes ever made to users - but any changes to users should _always_ be treated as "published" and you have no need to maintain a "draft" version of a user.

[**Versions and drafts enabled**](https://payloadcms.com/docs/versions/overview#versions-and-drafts-enabled)

If you have versions _and_ drafts enabled, you are able to control which documents are published, and which are considered draft. That lets you write [Access Control](https://payloadcms.com/docs/access-control/overview) to control who can see published documents, and who can see draft documents. It also lets you save versions (drafts) that are _newer_ than your most recently published document, which is helpful if you want to draft changes and maybe even preview them before you publish the changes. Read more about Drafts [here](https://payloadcms.com/docs/versions/drafts).

[**Versions, drafts, and autosave enabled**](https://payloadcms.com/docs/versions/overview#versions-drafts-and-autosave-enabled)

When you have versions, drafts, _and_ `autosave` enabled, the Admin UI will automatically save changes that you make to a new `draft` version as you edit a document, which makes sure that you never lose your changes ever again. Autosave will not affect your published post at all—instead, it'll just save your changes and let you publish them whenever you or your editors are ready to do so. Read more about Autosave [here](https://payloadcms.com/docs/versions/autosave).

[**Collection config**](https://payloadcms.com/docs/versions/overview#collection-config)

Configuring Versions is done by adding the `versions` key to your Collection configs. Set it to `true` to enable default Versions settings, or customize versions options by setting the property equal to an object containing the following available options:

| Option | Description |
| --- | --- |
| `maxPerDoc` | Use this setting to control how many versions to keep on a document by document basis. Must be an integer. Defaults to 100, use 0 to save all versions. |
| `drafts` | Enable [Drafts](https://payloadcms.com/docs/versions/drafts) mode for this collection. To enable, set to `true` or pass an object with `draft` [options](https://payloadcms.com/docs/versions/drafts#options). |

[**Global config**](https://payloadcms.com/docs/versions/overview#global-config)

Global versions work similarly to Collection versions but have a slightly different set of config properties supported.

| Option | Description |
| --- | --- |
| `max` | Use this setting to control how many versions to keep on a global by global basis. Must be an integer. |
| `drafts` | Enable [Drafts](https://payloadcms.com/docs/versions/drafts) mode for this global. To enable, set to `true` or pass an object with `draft` [options](https://payloadcms.com/docs/versions/drafts#options) |

[**Database impact**](https://payloadcms.com/docs/versions/overview#database-impact)

By enabling `versions`, a new database collection will be made to store versions for your collection or global. The collection will be named based off the `slug` of the collection or global and will follow this pattern (where `slug` is replaced with the `slug` of your collection or global):

1

\_slug\_versions

Each document in this new `versions` collection will store a set of meta properties about the version as well as a _full_ copy of the document. For example, a version's data might look like this for a Collection document:

1

{

2

"\_id":"61cf752c19cdf1b1af7b61f1",// a unique ID of this version

3

"parent":"61ce1354091d5b3ffc20ea6e",// the ID of the parent document

4

"autosave":false,// used to denote if this version was created via autosave

5

"version":{

6

// your document's data goes here

7

// all fields are set to not required and this property can be partially complete

8

},

9

"createdAt":"2021-12-31T21:25:00.992+00:00",

10

"updatedAt":"2021-12-31T21:25:00.992+00:00"

11

}

Global versions are stored the same as the collection version shown above, except they do not feature the `parent` property, as each Global receives its own `versions` collection. That means we know that all versions in that collection correspond to that specific global.

[**Version operations**](https://payloadcms.com/docs/versions/overview#version-operations)

Versions expose new operations for both collections and globals. They allow you to find and query versions, find a single version by ID, and publish (or restore) a version by ID. Both Collections and Globals support the same new operations. They are used primarily by the admin UI, but if you are writing custom logic in your app and would like to utilize them, they're available for you to use as well via REST, GraphQL, and Local APIs.

**Collection REST endpoints:**

| Method | Path | Description |
| --- | --- | --- |
| `GET` | `/api/{collectionSlug}/versions` | Find and query paginated versions |
| `GET` | `/api/{collectionSlug}/versions/:id` | Find a specific version by ID |
| `POST` | `/api/{collectionSlug}/versions/:id` | Restore a version by ID |

**Collection GraphQL queries:**

| Query Name | Operation |
| --- | --- |
| `version{collection.label.singular}` | `findVersionByID` |
| `versions{collection.label.plural}` | `findVersions` |

**And mutation:**

| Query Name | Operation |
| --- | --- |
| `restoreVersion{collection.label.singular}` | `restoreVersion` |

**Collection Local API methods:**

[**Find**](https://payloadcms.com/docs/versions/overview#find)

1

// Result will be a paginated set of Versions.

2

// See /docs/queries/pagination for more.

3

const result =await payload.findVersions({

4

collection:'posts',// required

5

depth:2,

6

page:1,

7

limit:10,

8

where:{},// pass a \`where\` query here

9

sort:'-createdAt',

10

locale:'en',

11

fallbackLocale:false,

12

user: dummyUser,

13

overrideAccess:false,

14

showHiddenFields:true,

15

})

[**Find by ID**](https://payloadcms.com/docs/versions/overview#find-by-id)

1

// Result will be a Post document.

2

const result =await payload.findVersionByID({

3

collection:'posts',// required

4

id:'507f1f77bcf86cd799439013',// required

5

depth:2,

6

locale:'en',

7

fallbackLocale:false,

8

user: dummyUser,

9

overrideAccess:false,

10

showHiddenFields:true,

11

})

[**Restore**](https://payloadcms.com/docs/versions/overview#restore)

1

// Result will be the restored global document.

2

const result =await payload.restoreVersion({

3

collection:'posts',// required

4

id:'507f1f77bcf86cd799439013',// required

5

depth:2,

6

user: dummyUser,

7

overrideAccess:false,

8

showHiddenFields:true,

9

})

**Global REST endpoints:**

| Method | Path | Description |
| --- | --- | --- |
| `GET` | `/api/globals/{globalSlug}/versions` | Find and query paginated versions |
| `GET` | `/api/globals/{globalSlug}/versions/:id` | Find a specific version by ID |
| `POST` | `/api/globals/{globalSlug}/versions/:id` | Restore a version by ID |

**Global GraphQL queries:**

| Query Name | Operation |
| --- | --- |
| `version{global.label}` | `findVersionByID` |
| `versions{global.label}` | `findVersions` |

**Global GraphQL mutation:**

| Query Name | Operation |
| --- | --- |
| `restoreVersion{global.label}` | `restoreVersion` |

**Global Local API methods:**

[**Find**](https://payloadcms.com/docs/versions/overview#find)

1

// Result will be a paginated set of Versions.

2

// See /docs/queries/pagination for more.

3

const result =await payload.findGlobalVersions({

4

slug:'header',// required

5

depth:2,

6

page:1,

7

limit:10,

8

where:{},// pass a \`where\` query here

9

sort:'-createdAt',

10

locale:'en',

11

fallbackLocale:false,

12

user: dummyUser,

13

overrideAccess:false,

14

showHiddenFields:true,

15

})

[**Find by ID**](https://payloadcms.com/docs/versions/overview#find-by-id)

1

// Result will be a Post document.

2

const result =await payload.findGlobalVersionByID({

3

slug:'header',// required

4

id:'507f1f77bcf86cd799439013',// required

5

depth:2,

6

locale:'en',

7

fallbackLocale:false,

8

user: dummyUser,

9

overrideAccess:false,

10

showHiddenFields:true,

11

})

[**Restore**](https://payloadcms.com/docs/versions/overview#restore)

1

// Result will be the restored global document.

2

const result =await payload.restoreGlobalVersion({

3

slug:'header',// required

4

id:'507f1f77bcf86cd799439013',// required

5

depth:2,

6

user: dummyUser,

7

overrideAccess:false,

8

showHiddenFields:true,

9

})

[**Access Control**](https://payloadcms.com/docs/versions/overview#access-control)

Versions expose a new [Access Control](https://payloadcms.com/docs/access-control/overview) function on both [Collections](https://payloadcms.com/docs/configuration/collections) and [Globals](https://payloadcms.com/docs/configuration/globals) that allow for you to control who can see versions of documents, and who can't.

| Function | Allows/Denies Access |
| --- | --- |
| `readVersions` | Used to control who can read versions, and who can't. Will automatically restrict the Admin UI version viewing access. |

For full details on how to use Access Control with Versions, see the [Access Control](https://payloadcms.com/docs/access-control/overview) documentation.

[Next \\
**Drafts**](https://payloadcms.com/docs/versions/drafts)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259425&cv=11&fst=1741443259425&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814059~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fversions%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Versions%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1173257288.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259653&cv=11&fst=1741443259653&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fversions%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Versions%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1173257288.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## User Preferences Management
# Managing User Preferences

As your users interact with the [Admin Panel](https://payloadcms.com/docs/admin/overview), you might want to store their preferences in a persistent manner, so that when they revisit the Admin Panel in a different session or from a different device, they can pick right back up where they left off.

Out of the box, Payload handles the persistence of your users' preferences in a handful of ways, including:

1. Columns in the Collection List View: their active state and order
2. The user's last active [Locale](https://payloadcms.com/docs/configuration/localization)
3. The "collapsed" state of `blocks`, `array`, and `collapsible` fields
4. The last-known state of the `Nav` component, etc.

**Important:**

All preferences are stored on an individual user basis. Payload automatically recognizes the user that is reading or setting a preference via all provided authentication methods.

[**Use Cases**](https://payloadcms.com/docs/admin/preferences#use-cases)

This API is used significantly for internal operations of the Admin Panel, as mentioned above. But, if you're building your own React components for use in the Admin Panel, you can allow users to set their own preferences in correspondence to their usage of your components. For example:

- If you have built a "color picker", you could "remember" the last used colors that the user has set for easy access next time
- If you've built a custom `Nav` component, and you've built in an "accordion-style" UI, you might want to store the `collapsed` state of each Nav collapsible item. This way, if an editor returns to the panel, their `Nav` state is persisted automatically
- You might want to store `recentlyAccessed` documents to give admin editors an easy shortcut back to their recently accessed documents on the `Dashboard` or similar
- Many other use cases exist. Invent your own! Give your editors an intelligent and persistent editing experience.

[**Database**](https://payloadcms.com/docs/admin/preferences#database)

Payload automatically creates an internally used `payload-preferences` Collection that stores user preferences. Each document in the `payload-preferences` Collection contains the following shape:

| Key | Value |
| --- | --- |
| `id` | A unique ID for each preference stored. |
| `key` | A unique `key` that corresponds to the preference. |
| `user.value` | The ID of the `user` that is storing its preference. |
| `user.relationTo` | The `slug` of the Collection that the `user` is logged in as. |
| `value` | The value of the preference. Can be any data shape that you need. |
| `createdAt` | A timestamp of when the preference was created. |
| `updatedAt` | A timestamp set to the last time the preference was updated. |

[**APIs**](https://payloadcms.com/docs/admin/preferences#apis)

Preferences are available to both [GraphQL](https://payloadcms.com/docs/graphql/overview#preferences) and [REST](https://payloadcms.com/docs/rest-api/overview#preferences) APIs.

[**Adding or reading Preferences in your own components**](https://payloadcms.com/docs/admin/preferences#adding-or-reading-preferences-in-your-own-components)

The Payload Admin Panel offers a `usePreferences` hook. The hook is only meant for use within the Admin Panel itself. It provides you with two methods:

[**getPreference**](https://payloadcms.com/docs/admin/preferences#getpreference)

This async method provides an easy way to retrieve a user's preferences by `key`. It will return a promise containing the resulting preference value.

**Arguments**

- `key`: the `key` of your preference to retrieve.

[**setPreference**](https://payloadcms.com/docs/admin/preferences#setpreference)

Also async, this method provides you with an easy way to set a user preference. It returns `void`.

**Arguments:**

- `key`: the `key` of your preference to set.
- `value`: the `value` of your preference that you're looking to set.

[**Example**](https://payloadcms.com/docs/admin/preferences#example)

Here is an example for how you can utilize `usePreferences` within your custom Admin Panel components. Note - this example is not fully useful and is more just a reference for how to utilize the Preferences API. In this case, we are demonstrating how to set and retrieve a user's last used colors history within a `ColorPicker` or similar type component.

1

'use client'

2

importReact,{Fragment, useState, useEffect, useCallback }from'react';

3

import{ usePreferences }from'@payloadcms/ui'

4

5

const lastUsedColorsPreferenceKey ='last-used-colors';

6

7

exportfunctionCustomComponent(){

8

const{ getPreference, setPreference }=usePreferences();

9

10

// Store the last used colors in local state

11

const\[lastUsedColors, setLastUsedColors\]=useState(\[\]);

12

13

// Callback to add a color to the last used colors

14

const updateLastUsedColors =useCallback((color)=>{

15

// First, check if color already exists in last used colors.

16

// If it already exists, there is no need to update preferences

17

const colorAlreadyExists = lastUsedColors.indexOf(color)>-1;

18

19

if(!colorAlreadyExists){

20

const newLastUsedColors =\[\
\
\
...lastUsedColors,\
\
\
color,\
\
\
\];

24

25

setLastUsedColors(newLastUsedColors);

26

setPreference(lastUsedColorsPreferenceKey, newLastUsedColors);

27

}

28

},\[lastUsedColors, setPreference\]);

29

30

// Retrieve preferences on component mount

31

// This will only be run one time, because the \`getPreference\` method never changes

32

useEffect(()=>{

33

constasyncGetPreference=async()=>{

34

const lastUsedColorsFromPreferences =awaitgetPreference(lastUsedColorsPreferenceKey);

35

setLastUsedColors(lastUsedColorsFromPreferences);

36

};

37

38

asyncGetPreference();

39

},\[getPreference\]);

40

41

return(

42

<div>

43

<button

44

type="button"

45

onClick={()=>updateLastUsedColors('red')}

46

>

47

Use red

48

</button>

49

<button

50

type="button"

51

onClick={()=>updateLastUsedColors('blue')}

52

>

53

Use blue

54

</button>

55

<button

56

type="button"

57

onClick={()=>updateLastUsedColors('purple')}

58

>

59

Use purple

60

</button>

61

<button

62

type="button"

63

onClick={()=>updateLastUsedColors('yellow')}

64

>

65

Use yellow

66

</button>

67

{lastUsedColors &&(

68

<Fragment>

69

<h5>Last used colors:</h5>

70

<ul>

71

{lastUsedColors?.map((color)=>(

72

<likey={color}>

73

{color}

74

</li>

75

))}

76

</ul>

77

</Fragment>

78

)}

79

</div>

80

)

81

}

[Next \\
**Page Metadata**](https://payloadcms.com/docs/admin/metadata)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259394&cv=11&fst=1741443259394&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fadmin%2Fpreferences&hn=www.googleadservices.com&frm=0&tiba=Managing%20User%20Preferences%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=2131340323.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259615&cv=11&fst=1741443259615&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102614960~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fadmin%2Fpreferences&hn=www.googleadservices.com&frm=0&tiba=Managing%20User%20Preferences%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=2131340323.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Row Field Documentation
# Row Field

The Row Field is presentational-only and only affects the [Admin Panel](https://payloadcms.com/docs/admin/overview). By using it, you can arrange [Fields](https://payloadcms.com/docs/fields/overview) next to each other horizontally.

![Shows a row field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/row.png)

Admin Panel screenshot of a Row field

To add a Row Field, set the `type` to `row` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyRowField:Field={

4

// ...

5

type:'row',

6

fields:\[\
\
\
// ...\
\
\
\]

9

}

[**Config Options**](https://payloadcms.com/docs/fields/row#config-options)

| Option | Description |
| --- | --- |
| `fields` \\* | Array of field types to nest within this Row. |
| `admin` | Admin-specific configuration excluding `description`, `readOnly`, and `hidden`. [More details](https://payloadcms.com/docs/fields/overview#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |

_\\* An asterisk denotes that a property is required._

[**Example**](https://payloadcms.com/docs/fields/row#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
type:'row',// required\
\
\
fields:\[\
\
\
// required\
\
\
{\
\
\
name:'label',\
\
\
type:'text',\
\
\
required:true,\
\
\
admin:{\
\
\
width:'50%',\
\
\
},\
\
\
},\
\
\
{\
\
\
name:'value',\
\
\
type:'text',\
\
\
required:true,\
\
\
admin:{\
\
\
width:'50%',\
\
\
},\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

29

}

[Next \\
**Select Field**](https://payloadcms.com/docs/fields/select)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259379&cv=11&fst=1741443259379&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102015666~102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Frow&hn=www.googleadservices.com&frm=0&tiba=Row%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=224530244.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259547&cv=11&fst=1741443259547&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102015666~102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Frow&hn=www.googleadservices.com&frm=0&tiba=Row%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=224530244.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload Plugins Overview
# Plugins

Payload Plugins take full advantage of the modularity of the [Payload Config](https://payloadcms.com/docs/configuration/overview), allowing developers to easily inject custom—sometimes complex—functionality into Payload apps from a very small touch-point. This is especially useful for sharing your work across multiple projects or with the greater Payload community.

There are many [Official Plugins](https://payloadcms.com/docs/plugins/overview#official-plugins) available that solve for some of the most common uses cases, such as the [Form Builder Plugin](https://payloadcms.com/docs/plugins/form-builder) or [SEO Plugin](https://payloadcms.com/docs/plugins/seo). There are also [Community Plugins](https://payloadcms.com/docs/plugins/overview#community-plugins) available, maintained entirely by contributing members. To extend Payload's functionality in some other way, you can easily [build your own plugin](https://payloadcms.com/docs/plugins/build-your-own).

To configure Plugins, use the `plugins` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

const config =buildConfig({

4

// ...

5

plugins:\[\
\
\
// Add Plugins here\
\
\
\],

8

})

Writing Plugins is no more complex than writing regular JavaScript. If you know the basic concept of [callback functions](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function) or how [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) works, and are up to speed with Payload concepts, then writing a plugin will be a breeze.

Because we rely on a simple config-based structure, Payload Plugins simply take in an existing config and returns a _modified_ config with new fields, hooks, collections, admin views, or anything else you can think of.

**Example use cases:**

- Automatically sync data from a specific collection to HubSpot or a similar CRM when data is added or changes
- Add password-protection functionality to certain documents
- Add a full e-commerce backend to any Payload app
- Add custom reporting views to Payload's Admin Panel
- Encrypt specific collections' data
- Add a full form builder implementation
- Integrate all `upload`-enabled collections with a third-party file host like S3 or Cloudinary
- Add custom endpoints or GraphQL queries / mutations with any type of custom functionality that you can think of

[**Official Plugins**](https://payloadcms.com/docs/plugins/overview#official-plugins)

Payload maintains a set of Official Plugins that solve for some of the common use cases. These plugins are maintained by the Payload team and its contributors and are guaranteed to be stable and up-to-date.

- [Form Builder](https://payloadcms.com/docs/plugins/form-builder)
- [Nested Docs](https://payloadcms.com/docs/plugins/nested-docs)
- [Redirects](https://payloadcms.com/docs/plugins/redirects)
- [Search](https://payloadcms.com/docs/plugins/search)
- [Sentry](https://payloadcms.com/docs/plugins/sentry)
- [SEO](https://payloadcms.com/docs/plugins/seo)
- [Stripe](https://payloadcms.com/docs/plugins/stripe)

You can also [build your own plugin](https://payloadcms.com/docs/plugins/build-your-own) to easily extend Payload's functionality in some other way. Once your plugin is ready, consider [sharing it with the community](https://payloadcms.com/docs/plugins/overview#community-plugins).

Plugins are changing every day, so be sure to check back often to see what new plugins may have been added. If you have a specific plugin you would like to see, please feel free to start a new [Discussion](https://github.com/payloadcms/payload/discussions).

For a complete list of Official Plugins, visit the [Packages Directory](https://github.com/payloadcms/payload/tree/main/packages) of the [Payload Monorepo](https://github.com/payloadcms/payload).

[**Community Plugins**](https://payloadcms.com/docs/plugins/overview#community-plugins)

Community Plugins are those that are maintained entirely by outside contributors. They are a great way to share your work across the ecosystem for others to use. You can discover Community Plugins by browsing the `payload-plugin` topic on [GitHub](https://github.com/topics/payload-plugin).

Some plugins have become so widely used that they are adopted as an [Official Plugin](https://payloadcms.com/docs/plugins/overview#official-plugins), such as the [Lexical Plugin](https://github.com/AlessioGr/payload-plugin-lexical). If you have a plugin that you think should be an Official Plugin, please feel free to start a new [Discussion](https://github.com/payloadcms/payload/discussions).

For maintainers building plugins for others to use, please add the `payload-plugin` topic on [GitHub](https://github.com/topics/payload-plugin) to help others find it.

[**Example**](https://payloadcms.com/docs/plugins/overview#example)

The base [Payload Config](https://payloadcms.com/docs/configuration/overview) allows for a `plugins` property which takes an `array` of [Plugin Configs](https://payloadcms.com/docs/plugins/build-your-own).

1

import{ buildConfig }from'payload'

2

import{ addLastModified }from'./addLastModified.ts'

3

4

const config =buildConfig({

5

// ...

6

plugins:\[\
\
\
addLastModified,\
\
\
\],

9

})

Payload Plugins are executed _after_ the incoming config is validated, but before it is sanitized and has had default options merged in. After all plugins are executed, the full config with all plugins will be sanitized.

Here is an example what the `addLastModified` plugin from above might look like. It adds a `lastModifiedBy` field to all Payload collections. For full details, see [how to build your own plugin](https://payloadcms.com/docs/plugins/build-your-own).

1

import{Config,Plugin}from'payload'

2

3

exportconstaddLastModified:Plugin=(incomingConfig:Config):Config=>{

4

// Find all incoming auth-enabled collections

5

// so we can create a lastModifiedBy relationship field

6

// to all auth collections

7

const authEnabledCollections = incomingConfig.collections.filter((collection)=>

8

Boolean(collection.auth),

9

)

10

11

// Spread the existing config

12

constconfig:Config={

13

...incomingConfig,

14

collections: incomingConfig.collections.map((collection)=>{

15

// Spread each item that we are modifying,

16

// and add our new field - complete with

17

// hooks and proper admin UI config

18

return{

19

...collection,

20

fields:\[\
\
\
...collection.fields,\
\
\
{\
\
\
name:'lastModifiedBy',\
\
\
type:'relationship',\
\
\
relationTo: authEnabledCollections.map(({ slug })=> slug),\
\
\
hooks:{\
\
\
beforeChange:\[\
\
\
({ req })=>({\
\
\
value: req?.user?.id,\
\
\
relationTo: req?.user?.collection,\
\
\
}),\
\
\
\],\
\
\
},\
\
\
admin:{\
\
\
position:'sidebar',\
\
\
readOnly:true,\
\
\
},\
\
\
},\
\
\
\],

40

}

41

}),

42

}

43

44

return config

45

}

**Reminder:** See [how to build your own plugin](https://payloadcms.com/docs/plugins/build-your-own) for a more in-depth explication on how create your own Payload Plugin.

[Next \\
**Building Your Own Plugin**](https://payloadcms.com/docs/plugins/build-your-own)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259311&cv=11&fst=1741443259311&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fplugins%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Plugins%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1287662765.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259517&cv=11&fst=1741443259517&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fplugins%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Plugins%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1287662765.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Select Field Documentation
# Select Field

The Select Field provides a dropdown-style interface for choosing options from a predefined list as an enumeration.

![Shows a Select field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/select.png)

Admin Panel screenshot of a Select field

To add a Select Field, set the `type` to `select` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMySelectField:Field={

4

// ...

5

type:'select',

6

options:\[\
\
\
// ...\
\
\
\]

9

}

[**Config Options**](https://payloadcms.com/docs/fields/select#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `options` \\* | Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing a `label` string and a `value` string. |
| `hasMany` | Boolean when, if set to `true`, allows this field to have many selections instead of only one. |
| `label` | Text used as a field label in the Admin Panel or an object with keys for each language. |
| `unique` | Enforce that each entry in the Collection has a unique value for this field. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `index` | Build an [index](https://payloadcms.com/docs/database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel. |
| `defaultValue` | Provide data to be used for this field's default value. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. |
| `required` | Require this field to have a value. |
| `admin` | Admin-specific configuration. See the [default field admin config](https://payloadcms.com/docs/fields/overview#admin-options) for more details. |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `enumName` | Custom enum name for this field when using SQL Database Adapter ( [Postgres](https://payloadcms.com/docs/database/postgres)). Auto-generated from name if not defined. |
| `dbName` | Custom table name (if `hasMany` set to `true`) for this field when using SQL Database Adapter ( [Postgres](https://payloadcms.com/docs/database/postgres)). Auto-generated from name if not defined. |
| `interfaceName` | Create a top level, reusable [Typescript interface](https://payloadcms.com/docs/typescript/generating-types#custom-field-interfaces) & [GraphQL type](https://payloadcms.com/docs/graphql/graphql-schema#custom-field-schemas). |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

**Important:** Option values should be strings that do not contain hyphens or special characters due to GraphQL enumeration naming constraints. Underscores are allowed. If you determine you need your option values to be non-strings or contain special characters, they will be formatted accordingly before being used as a GraphQL enum.

[**Admin Options**](https://payloadcms.com/docs/fields/select#admin-options)

To customize the appearance and behavior of the Select Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMySelectField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The Select Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Property | Description |
| --- | --- |
| `isClearable` | Set to `true` if you'd like this field to be clearable within the Admin UI. |
| `isSortable` | Set to `true` if you'd like this field to be sortable within the Admin UI using drag and drop. (Only works when `hasMany` is set to `true`) |

[**Example**](https://payloadcms.com/docs/fields/select#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'selectedFeatures',// required\
\
\
type:'select',// required\
\
\
hasMany:true,\
\
\
admin:{\
\
\
isClearable:true,\
\
\
isSortable:true,// use mouse to drag and drop different values, and sort them according to your choice\
\
\
},\
\
\
options:\[\
\
\
{\
\
\
label:'Metallic Paint',\
\
\
value:'metallic\_paint',\
\
\
},\
\
\
{\
\
\
label:'Alloy Wheels',\
\
\
value:'alloy\_wheels',\
\
\
},\
\
\
{\
\
\
label:'Carbon Fiber Dashboard',\
\
\
value:'carbon\_fiber\_dashboard',\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

30

}

[**Custom Components**](https://payloadcms.com/docs/fields/select#custom-components) [**Field**](https://payloadcms.com/docs/fields/select#field) [**Server Component**](https://payloadcms.com/docs/fields/select#server-component)

1

import type {SelectFieldServerComponent}from'payload'

2

import type Reactfrom'react'

3

4

import{SelectField}from'@payloadcms/ui'

5

6

exportconstCustomSelectFieldServer:SelectFieldServerComponent=({

7

clientField,

8

path,

9

schemaPath,

10

permissions,

11

})=>{

12

return(

13

<SelectField

14

field={clientField}

15

path={path}

16

schemaPath={schemaPath}

17

permissions={permissions}

18

/>

19

)

20

}

[**Client Component**](https://payloadcms.com/docs/fields/select#client-component)

1

'use client'

2

import type {SelectFieldClientComponent}from'payload'

3

4

import{SelectField}from'@payloadcms/ui'

5

importReactfrom'react'

6

7

exportconstCustomSelectFieldClient:SelectFieldClientComponent=(props)=>{

8

return<SelectField{...props}/>

9

}

[**Label**](https://payloadcms.com/docs/fields/select#label) [**Server Component**](https://payloadcms.com/docs/fields/select#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {SelectFieldLabelServerComponent}from'payload'

4

5

exportconstCustomSelectFieldLabelServer:SelectFieldLabelServerComponent=({

6

clientField,

7

path,

8

})=>{

9

return(

10

<FieldLabel

11

label={clientField?.label \|\| clientField?.name}

12

path={path}

13

required={clientField?.required}

14

/>

15

)

16

}

[**Client Component**](https://payloadcms.com/docs/fields/select#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {SelectFieldLabelClientComponent}from'payload'

5

6

exportconstCustomSelectFieldLabelClient:SelectFieldLabelClientComponent=({

7

field,

8

path,

9

})=>{

10

return(

11

<FieldLabel

12

label={field?.label \|\| field?.name}

13

path={path}

14

required={field?.required}

15

/>

16

)

17

}

[Next \\
**Tabs Field**](https://payloadcms.com/docs/fields/tabs)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259400&cv=11&fst=1741443259400&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fselect&hn=www.googleadservices.com&frm=0&tiba=Select%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1230576969.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443259560&cv=11&fst=1741443259560&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102015665~102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fselect&hn=www.googleadservices.com&frm=0&tiba=Select%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1230576969.1741443259&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload CMS Globals
# Global Configs

Globals are in many ways similar to [Collections](https://payloadcms.com/docs/configuration/collections), except that they correspond to only a single Document. You can define as many Globals as your application needs. Each Global Document is stored in the [Database](https://payloadcms.com/docs/database/overview) based on the [Fields](https://payloadcms.com/docs/fields/overview) that you define, and automatically generates a [Local API](https://payloadcms.com/docs/local-api/overview), [REST API](https://payloadcms.com/docs/rest-api/overview), and [GraphQL API](https://payloadcms.com/docs/graphql/overview) used to manage your Documents.

Globals are the primary way to structure singletons in Payload, such as a header navigation, site-wide banner alerts, or app-wide localized strings. Each Global can have its own unique [Access Control](https://payloadcms.com/docs/access-control/overview), [Hooks](https://payloadcms.com/docs/hooks/overview), [Admin Options](https://payloadcms.com/docs/configuration/globals#admin-options), and more.

To define a Global Config, use the `globals` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

globals:\[\
\
\
// Your Globals go here\
\
\
\],

8

})

**Tip:** If you have more than one Global that share the same structure, consider using a [Collection](https://payloadcms.com/docs/configuration/collections) instead.

[**Config Options**](https://payloadcms.com/docs/configuration/globals#config-options)

It's often best practice to write your Globals in separate files and then import them into the main [Payload Config](https://payloadcms.com/docs/configuration/overview).

Here is what a simple Global Config might look like:

1

import{GlobalConfig}from'payload'

2

3

exportconstNav:GlobalConfig={

4

slug:'nav',

5

fields:\[\
\
\
{\
\
\
name:'items',\
\
\
type:'array',\
\
\
required:true,\
\
\
maxRows:8,\
\
\
fields:\[\
\
\
{\
\
\
name:'page',\
\
\
type:'relationship',\
\
\
relationTo:'pages',// "pages" is the slug of an existing collection\
\
\
required:true,\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

21

}

**Reminder:** For more complex examples, see the [Templates](https://github.com/payloadcms/payload/tree/main/templates) and [Examples](https://github.com/payloadcms/payload/tree/main/examples) directories in the Payload repository.

The following options are available:

| Option | Description |
| --- | --- |
| `access` | Provide Access Control functions to define exactly who should be able to do what with this Global. [More details](https://payloadcms.com/docs/access-control/globals). |
| `admin` | The configuration options for the Admin Panel. [More details](https://payloadcms.com/docs/configuration/globals#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `dbName` | Custom table or collection name for this Global depending on the Database Adapter. Auto-generated from slug if not defined. |
| `description` | Text or React component to display below the Global header to give editors more information. |
| `endpoints` | Add custom routes to the REST API. [More details](https://payloadcms.com/docs/rest-api/overview#custom-endpoints). |
| `fields` \\* | Array of field types that will determine the structure and functionality of the data stored within this Global. [More details](https://payloadcms.com/docs/fields/overview). |
| `graphQL` | Manage GraphQL-related properties related to this global. [More details](https://payloadcms.com/docs/configuration/globals#graphql) |
| `hooks` | Entry point for Hooks. [More details](https://payloadcms.com/docs/hooks/overview#global-hooks). |
| `label` | Text for the name in the Admin Panel or an object with keys for each language. Auto-generated from slug if not defined. |
| `lockDocuments` | Enables or disables document locking. By default, document locking is enabled. Set to an object to configure, or set to `false` to disable locking. [More details](https://payloadcms.com/docs/admin/locked-documents). |
| `slug` \\* | Unique, URL-friendly string that will act as an identifier for this Global. |
| `typescript` | An object with property `interface` as the text used in schema generation. Auto-generated from slug if not defined. |
| `versions` | Set to true to enable default options, or configure with object properties. [More details](https://payloadcms.com/docs/versions/overview#global-config). |

_\\* An asterisk denotes that a property is required._

[**Fields**](https://payloadcms.com/docs/configuration/globals#fields)

Fields define the schema of the Global. To learn more, go to the [Fields](https://payloadcms.com/docs/fields/overview) documentation.

[**Access Control**](https://payloadcms.com/docs/configuration/globals#access-control)

[Global Access Control](https://payloadcms.com/docs/access-control/globals) determines what a user can and cannot do with any given Global Document. To learn more, go to the [Access Control](https://payloadcms.com/docs/access-control/overview) documentation.

[**Hooks**](https://payloadcms.com/docs/configuration/globals#hooks)

[Global Hooks](https://payloadcms.com/docs/hooks/globals) allow you to tie into the lifecycle of your Documents so you can execute your own logic during specific events. To learn more, go to the [Hooks](https://payloadcms.com/docs/hooks/overview) documentation.

[**Admin Options**](https://payloadcms.com/docs/configuration/globals#admin-options)

The behavior of Globals within the [Admin Panel](https://payloadcms.com/docs/admin/overview) can be fully customized to fit the needs of your application. This includes grouping or hiding their navigation links, adding [Custom Components](https://payloadcms.com/docs/custom-components/overview), setting page metadata, and more.

To configure Admin Options for Globals, use the `admin` property in your Global Config:

1

import{GlobalConfig}from'payload'

2

3

exportconstMyGlobal:GlobalConfig={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The following options are available:

| Option | Description |
| --- | --- |
| `group` | Text or localization object used to group Collection and Global links in the admin navigation. Set to `false` to hide the link from the navigation while keeping its routes accessible. |
| `hidden` | Set to true or a function, called with the current user, returning true to exclude this Global from navigation and admin routing. |
| `components` | Swap in your own React components to be used within this Global. [More details](https://payloadcms.com/docs/configuration/globals#custom-components). |
| `preview` | Function to generate a preview URL within the Admin Panel for this Global that can point to your app. [More details](https://payloadcms.com/docs/admin/preview). |
| `livePreview` | Enable real-time editing for instant visual feedback of your front-end application. [More details](https://payloadcms.com/docs/live-preview/overview). |
| `hideAPIURL` | Hides the "API URL" meta field while editing documents within this collection. |
| `meta` | Page metadata overrides to apply to this Global within the Admin Panel. [More details](https://payloadcms.com/docs/admin/metadata). |

[**Custom Components**](https://payloadcms.com/docs/configuration/globals#custom-components)

Globals can set their own [Custom Components](https://payloadcms.com/docs/custom-components/overview) which only apply to Global-specific UI within the [Admin Panel](https://payloadcms.com/docs/admin/overview). This includes elements such as the Save Button, or entire layouts such as the Edit View.

To override Global Components, use the `admin.components` property in your Global Config:

1

import type {SanitizedGlobalConfig}from'payload'

2

3

exportconstMyGlobal:SanitizedGlobalConfig={

4

// ...

5

admin:{

6

components:{

7

// ...

8

},

9

},

10

}

The following options are available:

[**General**](https://payloadcms.com/docs/configuration/globals#general)

| Option | Description |
| --- | --- |
| `elements` | Override or create new elements within the Edit View. [More details](https://payloadcms.com/docs/configuration/globals#edit-view-options). |
| `views` | Override or create new views within the Admin Panel. [More details](https://payloadcms.com/docs/custom-components/custom-views). |

[**Edit View Options**](https://payloadcms.com/docs/configuration/globals#edit-view-options)

1

import type {SanitizedGlobalConfig}from'payload'

2

3

exportconstMyGlobal:SanitizedGlobalConfig={

4

// ...

5

admin:{

6

components:{

7

elements:{

8

// ...

9

},

10

},

11

},

12

}

The following options are available:

| Option | Description |
| --- | --- |
| `SaveButton` | Replace the default Save Button with a Custom Component. [Drafts](https://payloadcms.com/docs/versions/drafts) must be disabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#save-button). |
| `SaveDraftButton` | Replace the default Save Draft Button with a Custom Component. [Drafts](https://payloadcms.com/docs/versions/drafts) must be enabled and autosave must be disabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#save-draft-button). |
| `PublishButton` | Replace the default Publish Button with a Custom Component. [Drafts](https://payloadcms.com/docs/versions/drafts) must be enabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#publish-button). |
| `PreviewButton` | Replace the default Preview Button with a Custom Component. [Preview](https://payloadcms.com/docs/admin/preview) must be enabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#preview-button). |

**Note:** For details on how to build Custom Components, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**GraphQL**](https://payloadcms.com/docs/configuration/globals#graphql)

You can completely disable GraphQL for this global by passing `graphQL: false` to your global config. This will completely disable all queries, mutations, and types from appearing in your GraphQL schema.

You can also pass an object to the global's `graphQL` property, which allows you to define the following properties:

| Option | Description |
| --- | --- |
| `name` | Override the name that will be used in GraphQL schema generation. |
| `disableQueries` | Disable all GraphQL queries that correspond to this global by passing `true`. |
| `disableMutations` | Disable all GraphQL mutations that correspond to this global by passing `true`. |

[**TypeScript**](https://payloadcms.com/docs/configuration/globals#typescript)

You can import types from Payload to help make writing your Global configs easier and type-safe. There are two main types that represent the Global Config, `GlobalConfig` and `SanitizeGlobalConfig`.

The `GlobalConfig` type represents a raw Global Config in its full form, where only the bare minimum properties are marked as required. The `SanitizedGlobalConfig` type represents a Global Config after it has been fully sanitized. Generally, this is only used internally by Payload.

1

import type {GlobalConfig,SanitizedGlobalConfig}from'payload'

[Next \\
**I18n**](https://payloadcms.com/docs/configuration/i18n)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264418&cv=11&fst=1741443264418&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fconfiguration%2Fglobals&hn=www.googleadservices.com&frm=0&tiba=Global%20Configs%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=389377567.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264708&cv=11&fst=1741443264708&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fconfiguration%2Fglobals&hn=www.googleadservices.com&frm=0&tiba=Global%20Configs%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=389377567.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload CMS Field Hooks
# Field Hooks

Field Hooks are [Hooks](https://payloadcms.com/docs/hooks/overview) that run on Documents on a per-field basis. They allow you to execute your own logic during specific events of the Document lifecycle. Field Hooks offer incredible potential for isolating your logic from the rest of your [Collection Hooks](https://payloadcms.com/docs/hooks/collections) and [Global Hooks](https://payloadcms.com/docs/hooks/globals).

To add Hooks to a Field, use the `hooks` property in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload';

2

3

exportconstFieldWithHooks:Field={

4

// ...

5

hooks:{

6

// ...

7

},

8

}

[**Config Options**](https://payloadcms.com/docs/hooks/fields#config-options)

All Field Hooks accept an array of synchronous or asynchronous functions. These functions can optionally modify the return value of the field before the operation continues. All Field Hooks are formatted to accept the same arguments, although some arguments may be `undefined` based the specific hook type.

**Important:** Due to GraphQL's typed nature, changing the type of data that you return from a field will produce errors in the [GraphQL API](https://payloadcms.com/docs/graphql/overview). If you need to change the shape or type of data, consider [Collection Hooks](https://payloadcms.com/docs/hooks/collections) or [Global Hooks](https://payloadcms.com/docs/hooks/globals) instead.

To add hooks to a Field, use the `hooks` property in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload';

2

3

constFieldWithHooks:Field={

4

name:'name',

5

type:'text',

6

hooks:{

7

beforeValidate:\[(args)=>{...}\],

8

beforeChange:\[(args)=>{...}\],

9

beforeDuplicate:\[(args)=>{...}\],

10

afterChange:\[(args)=>{...}\],

11

afterRead:\[(args)=>{...}\],

12

}

13

}

The following arguments are provided to all Field Hooks:

| Option | Description |
| --- | --- |
| `collection` | The [Collection](https://payloadcms.com/docs/configuration/collections) in which this Hook is running against. If the field belongs to a Global, this will be `null`. |
| `context` | Custom context passed between Hooks. [More details](https://payloadcms.com/docs/hooks/context). |
| `data` | In the `afterRead` hook this is the full Document. In the `create` and `update` operations, this is the incoming data passed through the operation. |
| `field` | The [Field](https://payloadcms.com/docs/fields/overview) which the Hook is running against. |
| `findMany` | Boolean to denote if this hook is running against finding one, or finding many within the `afterRead` hook. |
| `global` | The [Global](https://payloadcms.com/docs/configuration/globals) in which this Hook is running against. If the field belongs to a Collection, this will be `null`. |
| `operation` | The name of the operation that this hook is running within. Useful within `beforeValidate`, `beforeChange`, and `afterChange` hooks to differentiate between `create` and `update` operations. |
| `originalDoc` | In the `update` operation, this is the Document before changes were applied. In the `afterChange` hook, this is the resulting Document. |
| `overrideAccess` | A boolean to denote if the current operation is overriding [Access Control](https://payloadcms.com/docs/access-control/overview). |
| `path` | The path to the [Field](https://payloadcms.com/docs/fields/overview) in the schema. |
| `previousDoc` | In the `afterChange` Hook, this is the Document before changes were applied. |
| `previousSiblingDoc` | The sibling data of the Document before changes being applied, only in `beforeChange` and `afterChange` hook. |
| `previousValue` | The previous value of the field, before changes, only in `beforeChange` and `afterChange` hooks. |
| `req` | The [Web Request](https://developer.mozilla.org/en-US/docs/Web/API/Request) object. This is mocked for [Local API](https://payloadcms.com/docs/local-api/overview) operations. |
| `schemaPath` | The path of the [Field](https://payloadcms.com/docs/fields/overview) in the schema. |
| `siblingData` | The data of sibling fields adjacent to the field that the Hook is running against. |
| `siblingDocWithLocales` | The sibling data of the Document with all [Locales](https://payloadcms.com/docs/configuration/localization). |
| `siblingFields` | The sibling fields of the field which the hook is running against. |
| `value` | The value of the [Field](https://payloadcms.com/docs/fields/overview). |

**Tip:** It's a good idea to conditionally scope your logic based on which operation is executing. For example, if you are writing a `beforeChange` hook, you may want to perform different logic based on if the current `operation` is `create` or `update`.

[**beforeValidate**](https://payloadcms.com/docs/hooks/fields#beforevalidate)

Runs during the `create` and `update` operations. This hook allows you to add or format data before the incoming data is validated server-side.

Please do note that this does not run before client-side validation. If you render a custom field component in your front-end and provide it with a `validate` function, the order that validations will run in is:

1. `validate` runs on the client
2. if successful, `beforeValidate` runs on the server
3. `validate` runs on the server

1

import type {Field}from'payload'

2

3

constusernameField:Field={

4

name:'username',

5

type:'text',

6

hooks:{

7

beforeValidate:\[\
\
\
({ value })=>{\
\
\
// Trim whitespace and convert to lowercase\
\
\
return value.trim().toLowerCase()\
\
\
},\
\
\
\],

13

},

14

}

In this example, the `beforeValidate` hook is used to process the `username` field. The hook takes the incoming value of the field and transforms it by trimming whitespace and converting it to lowercase. This ensures that the username is stored in a consistent format in the database.

[**beforeChange**](https://payloadcms.com/docs/hooks/fields#beforechange)

Immediately following validation, `beforeChange` hooks will run within `create` and `update` operations. At this stage, you can be confident that the field data that will be saved to the document is valid in accordance to your field validations.

1

import type {Field}from'payload'

2

3

constemailField:Field={

4

name:'email',

5

type:'email',

6

hooks:{

7

beforeChange:\[\
\
\
({ value, operation })=>{\
\
\
if(operation ==='create'){\
\
\
// Perform additional validation or transformation for 'create' operation\
\
\
}\
\
\
return value\
\
\
},\
\
\
\],

15

},

16

}

In the `emailField`, the `beforeChange` hook checks the `operation` type. If the operation is `create`, it performs additional validation or transformation on the email field value. This allows for operation-specific logic to be applied to the field.

[**afterChange**](https://payloadcms.com/docs/hooks/fields#afterchange)

The `afterChange` hook is executed after a field's value has been changed and saved in the database. This hook is useful for post-processing or triggering side effects based on the new value of the field.

1

import type {Field}from'payload'

2

3

constmembershipStatusField:Field={

4

name:'membershipStatus',

5

type:'select',

6

options:\[\
\
\
{label:'Standard',value:'standard'},\
\
\
{label:'Premium',value:'premium'},\
\
\
{label:'VIP',value:'vip'},\
\
\
\],

11

hooks:{

12

afterChange:\[\
\
\
({ value, previousValue, req })=>{\
\
\
if(value !== previousValue){\
\
\
// Log or perform an action when the membership status changes\
\
\
console.log(\
\
\
\`User ID ${req.user.id} changed their membership status from ${previousValue} to ${value}.\`,\
\
\
)\
\
\
// Here, you can implement actions that could track conversions from one tier to another\
\
\
}\
\
\
},\
\
\
\],

23

},

24

}

In this example, the `afterChange` hook is used with a `membershipStatusField`, which allows users to select their membership level (Standard, Premium, VIP). The hook monitors changes in the membership status. When a change occurs, it logs the update and can be used to trigger further actions, such as tracking conversion from one tier to another or notifying them about changes in their membership benefits.

[**afterRead**](https://payloadcms.com/docs/hooks/fields#afterread)

The `afterRead` hook is invoked after a field value is read from the database. This is ideal for formatting or transforming the field data for output.

1

import type {Field}from'payload'

2

3

constdateField:Field={

4

name:'createdAt',

5

type:'date',

6

hooks:{

7

afterRead:\[\
\
\
({ value })=>{\
\
\
// Format date for display\
\
\
returnnewDate(value).toLocaleDateString()\
\
\
},\
\
\
\],

13

},

14

}

Here, the `afterRead` hook for the `dateField` is used to format the date into a more readable format using `toLocaleDateString()`. This hook modifies the way the date is presented to the user, making it more user-friendly.

[**beforeDuplicate**](https://payloadcms.com/docs/hooks/fields#beforeduplicate)

The `beforeDuplicate` field hook is called on each locale (when using localization), when duplicating a document. It may be used when documents having the exact same properties may cause issue. This gives you a way to avoid duplicate names on `unique`, `required` fields or when external systems expect non-repeating values on documents.

This hook gets called before the `beforeValidate` and `beforeChange` hooks are called.

By Default, unique and required text fields Payload will append "- Copy" to the original document value. The default is not added if your field has its own, you must return non-unique values from your beforeDuplicate hook to avoid errors or enable the `disableDuplicate` option on the collection. Here is an example of a number field with a hook that increments the number to avoid unique constraint errors when duplicating a document:

1

import type {Field}from'payload'

2

3

constnumberField:Field={

4

name:'number',

5

type:'number',

6

hooks:{

7

// increment existing value by 1

8

beforeDuplicate:\[({ value })=>{\
\
\
return(value ??0)+1\
\
\
}\],

11

}

12

}

[**TypeScript**](https://payloadcms.com/docs/hooks/fields#typescript)

Payload exports a type for field hooks which can be accessed and used as follows:

1

import type {FieldHook}from'payload'

2

3

// Field hook type is a generic that takes three arguments:

4

// 1: The document type

5

// 2: The value type

6

// 3: The sibling data type

7

8

type ExampleFieldHook=FieldHook<ExampleDocumentType, string,SiblingDataType>

9

10

constexampleFieldHook:ExampleFieldHook=(args)=>{

11

const{

12

value,// Typed as \`string\` as shown above

13

data,// Typed as a Partial of your ExampleDocumentType

14

siblingData,// Typed as a Partial of SiblingDataType

15

originalDoc,// Typed as ExampleDocumentType

16

operation,

17

req,

18

}= args

19

20

// Do something here...

21

22

return value // should return a string as typed above, undefined, or null

23

}

[Next \\
**Context**](https://payloadcms.com/docs/hooks/context)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264391&cv=11&fst=1741443264391&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102015666~102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fhooks%2Ffields&hn=www.googleadservices.com&frm=0&tiba=Field%20Hooks%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1258663603.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264583&cv=11&fst=1741443264583&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fhooks%2Ffields&hn=www.googleadservices.com&frm=0&tiba=Field%20Hooks%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1258663603.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload CMS Search Plugin
# Search Plugin

![https://www.npmjs.com/package/@payloadcms/plugin-search](https://img.shields.io/npm/v/@payloadcms/plugin-search)

This plugin generates records of your documents that are extremely fast to search on. It does so by creating a new `search` collection that is indexed in the database then saving a static copy of each of your documents using only search-critical data. Search records are automatically created, synced, and deleted behind-the-scenes as you manage your application's documents.

For example, if you have a posts collection that is extremely large and complex, this would allow you to sync just the title, excerpt, and slug of each post so you can query on _that_ instead of the original post directly. Search records are static, so querying them also has the significant advantage of bypassing any hooks that may present be on the original documents. You define exactly what data is synced, and you can even modify or fallback this data before it is saved on a per-document basis.

To query search results, use all the existing Payload APIs that you are already familiar with. You can also prioritize search results by setting a custom priority for each collection. For example, you may want to list blog posts before pages. Or you may want one specific post to always take appear first. Search records are given a `priority` field that can be used as the `?sort=` parameter in your queries.

This plugin is a great way to implement a fast, immersive search experience such as a search bar in a front-end application. Many applications may not need the power and complexity of a third-party service like Algolia or ElasticSearch. This plugin provides a first-party alternative that is easy to set up and runs entirely on your own database.

This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-search). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20search&template=bug_report.md&title=plugin-search%3A) with as much detail as possible.

[**Core Features**](https://payloadcms.com/docs/plugins/search#core-features)

- Automatically adds an indexed `search` collection to your database
- Automatically creates, syncs, and deletes search records as you manage your documents
- Saves only search-critical data that you define (e.g. title, excerpt, etc.)
- Allows you to query search results using first-party Payload APIs
- Allows you to query documents without triggering any of their underlying hooks
- Allows you to easily prioritize search results by collection or document
- Allows you to reindex search results by collection on demand

[**Installation**](https://payloadcms.com/docs/plugins/search#installation)

Install the plugin using any JavaScript package manager like [pnpm](https://pnpm.io/), [npm](https://npmjs.com/), or [Yarn](https://yarnpkg.com/):

1

pnpm add @payloadcms/plugin-search

[**Basic Usage**](https://payloadcms.com/docs/plugins/search#basic-usage)

In the `plugins` array of your [Payload Config](https://payloadcms.com/docs/configuration/overview), call the plugin with [options](https://payloadcms.com/docs/plugins/search#options):

1

import{ buildConfig }from'payload'

2

import{ searchPlugin }from'@payloadcms/plugin-search'

3

4

const config =buildConfig({

5

collections:\[\
\
\
{\
\
\
slug:'pages',\
\
\
fields:\[\],\
\
\
},\
\
\
{\
\
\
slug:'posts',\
\
\
fields:\[\],\
\
\
},\
\
\
\],

15

plugins:\[\
\
\
searchPlugin({\
\
\
collections:\['pages','posts'\],\
\
\
defaultPriorities:{\
\
\
pages:10,\
\
\
posts:20,\
\
\
},\
\
\
}),\
\
\
\],

24

})

25

26

exportdefault config

[**Options**](https://payloadcms.com/docs/plugins/search#options) [**collections**](https://payloadcms.com/docs/plugins/search#collections)

The `collections` property is an array of collection slugs to enable syncing to search. Enabled collections receive a `beforeChange` and `afterDelete` hook that creates, updates, and deletes its respective search record as it changes over time.

[**localize**](https://payloadcms.com/docs/plugins/search#localize)

By default, the search plugin will add `localization: true` to the `title` field of the newly added `search` collection if you have localization enabled. If you would like to disable this behavior, you can set this to `false`.

[**defaultPriorities**](https://payloadcms.com/docs/plugins/search#defaultpriorities)

This plugin automatically adds a `priority` field to the `search` collection that can be used as the `?sort=` parameter in your queries. For example, you may want to list blog posts before pages. Or you may want one specific post to always take appear first.

The `defaultPriorities` property is used to set a fallback `priority` on search records during the `create` operation. It accepts an object with keys that are your collection slugs and values that can either be a number or a function that returns a number. The function receives the `doc` as an argument, which is the document being created.

1

// payload.config.ts

2

{

3

// ...

4

searchPlugin({

5

defaultPriorities:{

6

pages:({ doc })=>(doc.title.startsWith('Hello, world!')?1:10),

7

posts:20,

8

},

9

}),

10

}

[**searchOverrides**](https://payloadcms.com/docs/plugins/search#searchoverrides)

This plugin automatically creates the `search` collection, but you can override anything on this collection via the `searchOverrides` property. It accepts anything from the [Payload Collection Config](https://payloadcms.com/docs/configuration/collections) and merges it in with the default `search` collection config provided by the plugin.

Note that the `fields` property is a function that receives an object with a `defaultFields` key. This is an array of fields that are automatically added to the `search` collection. You can modify this array or add new fields to it.

1

// payload.config.ts

2

{

3

// ...

4

searchPlugin({

5

searchOverrides:{

6

slug:'search-results',

7

fields:({ defaultFields })=>\[\
\
\
...defaultFields,\
\
\
{\
\
\
name:'excerpt',\
\
\
type:'textarea',\
\
\
admin:{\
\
\
position:'sidebar',\
\
\
},\
\
\
},\
\
\
\],

17

},

18

}),

19

}

[**beforeSync**](https://payloadcms.com/docs/plugins/search#beforesync)

Before creating or updating a search record, the `beforeSync` function runs. This is an [afterChange](https://payloadcms.com/docs/hooks/globals#afterchange) hook that allows you to modify the data or provide fallbacks before its search record is created or updated.

1

// payload.config.ts

2

{

3

// ...

4

searchPlugin({

5

beforeSync:({ originalDoc, searchDoc })=>({

6

...searchDoc,

7

// \- Modify your docs in any way here, this can be async

8

// \- You also need to add the \`excerpt\` field in the \`searchOverrides\` config

9

excerpt: originalDoc?.excerpt \|\|'This is a fallback excerpt',

10

}),

11

}),

12

}

[**syncDrafts**](https://payloadcms.com/docs/plugins/search#syncdrafts)

When `syncDrafts` is true, draft documents will be synced to search. This is false by default. You must have [Payload Drafts](https://payloadcms.com/docs/versions/drafts) enabled for this to apply.

[**deleteDrafts**](https://payloadcms.com/docs/plugins/search#deletedrafts)

If true, will delete documents from search whose status changes to draft. This is true by default. You must have [Payload Drafts](https://payloadcms.com/docs/versions/drafts) enabled for this to apply.

[**reindexBatchSize**](https://payloadcms.com/docs/plugins/search#reindexbatchsize)

A number that, when specified, will be used as the value to determine how many search documents to fetch for reindexing at a time in each batch. If not set, this will default to `50`.

[**Collection reindexing**](https://payloadcms.com/docs/plugins/search#collection-reindexing)

Collection reindexing allows you to recreate search documents from your search-enabled collections on demand. This is useful if you have existing documents that don't already have search indexes, commonly when adding `plugin-search` to an existing project. To get started, navigate to your search collection and click the pill in the top right actions slot of the list view labelled `Reindex`. This will open a popup with options to select one of your search-enabled collections, or all, for reindexing.

[**TypeScript**](https://payloadcms.com/docs/plugins/search#typescript)

All types can be directly imported:

1

import type {SearchConfig,BeforeSync}from'@payloadcms/plugin-search/types'

[Next \\
**Redirects Plugin**](https://payloadcms.com/docs/plugins/redirects)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264427&cv=11&fst=1741443264427&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102814059~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fplugins%2Fsearch&hn=www.googleadservices.com&frm=0&tiba=Search%20Plugin%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=943926031.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264644&cv=11&fst=1741443264644&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fplugins%2Fsearch&hn=www.googleadservices.com&frm=0&tiba=Search%20Plugin%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=943926031.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Point Field Documentation
# Point Field

The Point Field saves a pair of coordinates in the database and assigns an index for location related queries. The data structure in the database matches the GeoJSON structure to represent point. The Payload API simplifies the object data to only the \[longitude, latitude\] location.

![Shows a Point field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/point.png)

Admin Panel screenshot of a Point field

To add a Point Field, set the `type` to `point` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyPointField:Field={

4

// ...

5

type:'point',

6

}

**Important:** The Point Field currently is not supported in SQLite.

[**Config**](https://payloadcms.com/docs/fields/point#config)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `label` | Used as a field label in the Admin Panel and to name the generated GraphQL type. |
| `unique` | Enforce that each entry in the Collection has a unique value for this field. |
| `index` | Build an [index](https://payloadcms.com/docs/database/overview) for this field to produce faster queries. To support location queries, point index defaults to `2dsphere`, to disable the index set to `false`. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel. |
| `defaultValue` | Provide data to be used for this field's default value. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. |
| `required` | Require this field to have a value. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/overview#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

[**Example**](https://payloadcms.com/docs/fields/point#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'location',\
\
\
type:'point',\
\
\
label:'Location',\
\
\
},\
\
\
\],

12

}

[**Querying - near**](https://payloadcms.com/docs/fields/point#querying-near)

In order to do query based on the distance to another point, you can use the `near` operator. When querying using the near operator, the returned documents will be sorted by nearest first.

[**Querying - within**](https://payloadcms.com/docs/fields/point#querying-within)

In order to do query based on whether points are within a specific area defined in GeoJSON, you can use the `within` operator. Example:

1

constpolygon:Point\[\]=\[\
\
\
\[9.0,19.0\],// bottom-left\
\
\
\[9.0,21.0\],// top-left\
\
\
\[11.0,21.0\],// top-right\
\
\
\[11.0,19.0\],// bottom-right\
\
\
\[9.0,19.0\],// back to starting point to close the polygon\
\
\
\]

8

9

payload.find({

10

collection:"points",

11

where:{

12

point:{

13

within:{

14

type:'Polygon',

15

coordinates:\[polygon\],

16

},

17

},

18

},

19

})

[**Querying - intersects**](https://payloadcms.com/docs/fields/point#querying-intersects)

In order to do query based on whether points intersect a specific area defined in GeoJSON, you can use the `intersects` operator. Example:

1

constpolygon:Point\[\]=\[\
\
\
\[9.0,19.0\],// bottom-left\
\
\
\[9.0,21.0\],// top-left\
\
\
\[11.0,21.0\],// top-right\
\
\
\[11.0,19.0\],// bottom-right\
\
\
\[9.0,19.0\],// back to starting point to close the polygon\
\
\
\]

8

9

payload.find({

10

collection:"points",

11

where:{

12

point:{

13

intersects:{

14

type:'Polygon',

15

coordinates:\[polygon\],

16

},

17

},

18

},

19

})

[**Custom Components**](https://payloadcms.com/docs/fields/point#custom-components) [**Field**](https://payloadcms.com/docs/fields/point#field) [**Server Component**](https://payloadcms.com/docs/fields/point#server-component)

1

import type Reactfrom'react'

2

import{PointField}from'@payloadcms/ui'

3

import type {PointFieldServerComponent}from'payload'

4

5

exportconstCustomPointFieldServer:PointFieldServerComponent=({

6

clientField,

7

path,

8

schemaPath,

9

permissions,

10

})=>{

11

return(

12

<PointFieldfield={clientField}path={path}schemaPath={schemaPath}permissions={permissions}/>

13

)

14

}

[**Client Component**](https://payloadcms.com/docs/fields/point#client-component)

1

'use client'

2

importReactfrom'react'

3

import{PointField}from'@payloadcms/ui'

4

import type {PointFieldClientComponent}from'payload'

5

6

exportconstCustomPointFieldClient:PointFieldClientComponent=(props)=>{

7

return<PointField{...props}/>

8

}

[**Label**](https://payloadcms.com/docs/fields/point#label) [**Server Component**](https://payloadcms.com/docs/fields/point#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {PointFieldLabelServerComponent}from'payload'

4

5

exportconstCustomPointFieldLabelServer:PointFieldLabelServerComponent=({

6

clientField,

7

path,

8

})=>{

9

return(

10

<FieldLabel

11

label={clientField?.label \|\| clientField?.name}

12

path={path}

13

required={clientField?.required}

14

/>

15

)

16

}

[**Client Component**](https://payloadcms.com/docs/fields/point#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {PointFieldLabelClientComponent}from'payload'

5

6

exportconstCustomPointFieldLabelClient:PointFieldLabelClientComponent=({

7

field,

8

path,

9

})=>{

10

return(

11

<FieldLabel

12

label={field?.label \|\| field?.name}

13

path={path}

14

required={field?.required}

15

/>

16

)

17

}

[Next \\
**Radio Group Field**](https://payloadcms.com/docs/fields/radio)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264416&cv=11&fst=1741443264416&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102308675~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fpoint&hn=www.googleadservices.com&frm=0&tiba=Point%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=313841583.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264677&cv=11&fst=1741443264677&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fpoint&hn=www.googleadservices.com&frm=0&tiba=Point%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=313841583.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload JSON Field
# JSON Field

The JSON Field saves raw JSON to the database and provides the [Admin Panel](https://payloadcms.com/docs/admin/overview) with a code editor styled interface. This is different from the [Code Field](https://payloadcms.com/docs/fields/code) which saves the value as a string in the database.

![Shows a JSON field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/json.png)

This field is using the \`monaco-react\` editor syntax highlighting.

To add a JSON Field, set the `type` to `json` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyJSONField:Field={

4

// ...

5

type:'json',

6

}

[**Config Options**](https://payloadcms.com/docs/fields/json#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `label` | Text used as a field label in the Admin Panel or an object with keys for each language. |
| `unique` | Enforce that each entry in the Collection has a unique value for this field. |
| `index` | Build an [index](https://payloadcms.com/docs/database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `jsonSchema` | Provide a JSON schema that will be used for validation. [JSON schemas](https://json-schema.org/learn/getting-started-step-by-step) |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel. |
| `defaultValue` | Provide data to be used for this field's default value. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. |
| `required` | Require this field to have a value. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/json#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

[**Admin Options**](https://payloadcms.com/docs/fields/json#admin-options)

To customize the appearance and behavior of the JSON Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMyJSONField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The JSON Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Option | Description |
| --- | --- |
| `editorOptions` | Options that can be passed to the monaco editor, [view the full list](https://microsoft.github.io/monaco-editor/typedoc/variables/editor.EditorOptions.html). |

[**Example**](https://payloadcms.com/docs/fields/json#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'customerJSON',// required\
\
\
type:'json',// required\
\
\
required:true,\
\
\
},\
\
\
\],

12

}

[**JSON Schema Validation**](https://payloadcms.com/docs/fields/json#json-schema-validation)

Payload JSON fields fully support the [JSON schema](https://json-schema.org/) standard. By providing a schema in your field config, the editor will be guided in the admin UI, getting typeahead for properties and their formats automatically. When the document is saved, the default validation will prevent saving any invalid data in the field according to the schema in your config.

If you only provide a URL to a schema, Payload will fetch the desired schema if it is publicly available. If not, it is recommended to add the schema directly to your config or import it from another file so that it can be implemented consistently in your project.

[**Local JSON Schema**](https://payloadcms.com/docs/fields/json#local-json-schema)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'customerJSON',// required\
\
\
type:'json',// required\
\
\
jsonSchema:{\
\
\
uri:'a://b/foo.json',// required\
\
\
fileMatch:\['a://b/foo.json'\],// required\
\
\
schema:{\
\
\
type:'object',\
\
\
properties:{\
\
\
foo:{\
\
\
enum:\['bar','foobar'\],\
\
\
}\
\
\
},\
\
\
},\
\
\
},\
\
\
\
},\
\
\
\],

24

}

25

// {"foo": "bar"} or {"foo": "foobar"} - ok

26

// Attempting to create {"foo": "not-bar"} will throw an error

[**Remote JSON Schema**](https://payloadcms.com/docs/fields/json#remote-json-schema)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'customerJSON',// required\
\
\
type:'json',// required\
\
\
jsonSchema:{\
\
\
uri:'https://example.com/customer.schema.json',// required\
\
\
fileMatch:\['https://example.com/customer.schema.json'\],// required\
\
\
},\
\
\
},\
\
\
\],

15

}

16

// If 'https://example.com/customer.schema.json' has a JSON schema

17

// {"foo": "bar"} or {"foo": "foobar"} - ok

18

// Attempting to create {"foo": "not-bar"} will throw an error

[**Custom Components**](https://payloadcms.com/docs/fields/json#custom-components) [**Field**](https://payloadcms.com/docs/fields/json#field) [**Server Component**](https://payloadcms.com/docs/fields/json#server-component)

1

import type Reactfrom'react'

2

import{JSONField}from'@payloadcms/ui'

3

import type {JSONFieldServerComponent}from'payload'

4

5

exportconstCustomJSONFieldServer:JSONFieldServerComponent=({

6

clientField,

7

path,

8

schemaPath,

9

permissions,

10

})=>{

11

return(

12

<JSONField

13

field={clientField}

14

path={path}

15

schemaPath={schemaPath}

16

permissions={permissions}

17

/>

18

)

19

}

[**Client Component**](https://payloadcms.com/docs/fields/json#client-component)

1

'use client'

2

importReactfrom'react'

3

import{JSONField}from'@payloadcms/ui'

4

import type {JSONFieldClientComponent}from'payload'

5

6

exportconstCustomJSONFieldClient:JSONFieldClientComponent=(props)=>{

7

return<JSONField{...props}/>

8

}

[**Label**](https://payloadcms.com/docs/fields/json#label) [**Server Component**](https://payloadcms.com/docs/fields/json#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {JSONFieldLabelServerComponent}from'payload'

4

5

exportconstCustomJSONFieldLabelServer:JSONFieldLabelServerComponent=({

6

clientField,

7

path,

8

})=>{

9

return(

10

<FieldLabel

11

label={clientField?.label \|\| clientField?.name}

12

path={path}

13

required={clientField?.required}

14

/>

15

)

16

}

[**Client Component**](https://payloadcms.com/docs/fields/json#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {JSONFieldLabelClientComponent}from'payload'

5

6

exportconstCustomJSONFieldLabelClient:JSONFieldLabelClientComponent=({

7

field,

8

path,

9

})=>{

10

return(

11

<FieldLabel

12

label={field?.label \|\| field?.name}

13

path={path}

14

required={field?.required}

15

/>

16

)

17

}

[Next \\
**Code Field**](https://payloadcms.com/docs/fields/code)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264765&cv=11&fst=1741443264765&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102693808~102717422~102788824~102791784~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fjson&hn=www.googleadservices.com&frm=0&tiba=JSON%20Field%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1575826030.1741443265&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264950&cv=11&fst=1741443264950&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814059~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Fjson&hn=www.googleadservices.com&frm=0&tiba=JSON%20Field%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1575826030.1741443265&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload Deployment Guide
# Production Deployment

So you've developed a Payload app, it's fully tested, and running great locally. Now it's time to launch. **Awesome! Great work!** Now, what's next?

There are many ways to deploy Payload to a production environment. When evaluating how you will deploy Payload, you need to consider these main aspects:

1. [Basics](https://payloadcms.com/docs/production/deployment#basics)
2. [Security](https://payloadcms.com/docs/production/deployment#security)
3. [Your database](https://payloadcms.com/docs/production/deployment#database)
4. [Permanent File Storage](https://payloadcms.com/docs/production/deployment#file-storage)
5. [Docker](https://payloadcms.com/docs/production/deployment#docker)

Payload can be deployed _anywhere that Next.js can run_ \- including Vercel, Netlify, SST, DigitalOcean, AWS, and more. Because it's open source, you can self-host it.

But it's important to remember that most Payload projects will also need a database, file storage, an email provider, and a CDN. Make sure you have all of the requirements that your project needs, no matter what deployment platform you choose.

Often, the easiest and fastest way to deploy Payload is to use [Payload Cloud](https://payloadcms.com/new) — where you get everything you need out of the box, including:

1. A MongoDB Atlas database
2. S3 file storage
3. Resend email service
4. Cloudflare CDN
5. Blue / green deployments
6. Logs
7. And more

[**Basics**](https://payloadcms.com/docs/production/deployment#basics)

Payload runs fully in Next.js, so the [Next.js build process](https://nextjs.org/docs/app/building-your-application/deploying) is used for building Payload. If you've used `create-payload-app` to create your project, executing the `build` npm script will build Payload for production.

[**Security**](https://payloadcms.com/docs/production/deployment#security)

Payload features a suite of security features that you can rely on to strengthen your application's security. When deploying to Production, it's a good idea to double-check that you are making proper use of each of them.

[**The Secret Key**](https://payloadcms.com/docs/production/deployment#the-secret-key)

When you initialize Payload, you provide it with a `secret` property. This property should be impossible to guess and extremely difficult for brute-force attacks to crack. Make sure your Production `secret` is a long, complex string.

[**Double-check and thoroughly test all Access Control**](https://payloadcms.com/docs/production/deployment#double-check-and-thoroughly-test-all-access-control)

Because _**you**_ are in complete control of who can do what with your data, you should double and triple-check that you wield that power responsibly before deploying to Production.

\\*\\* By default, all Access Control functions require that a user is successfully logged in to Payload to create, read, update, or delete data. \*\* But, if you allow public user registration, for example, you will want to make sure that your access control functions are more strict - permitting

\\*\\* only appropriate users \*\*

to perform appropriate actions.

[**Running in Production**](https://payloadcms.com/docs/production/deployment#running-in-production)

Depending on where you deploy Payload, you may need to provide a start script to your deployment platform in order to start up Payload in production mode.

Note that this is different than running `next dev`. Generally, Next.js apps come configured with a `start` script which runs `next start`.

[**Secure Cookie Settings**](https://payloadcms.com/docs/production/deployment#secure-cookie-settings)

You should be using an SSL certificate for production Payload instances, which means you can [enable secure cookies](https://payloadcms.com/docs/authentication/overview) in your Authentication-enabled Collection configs.

[**Preventing API Abuse**](https://payloadcms.com/docs/production/deployment#preventing-api-abuse)

Payload comes with a robust set of built-in anti-abuse measures, such as locking out users after X amount of failed login attempts, GraphQL query complexity limits, max `depth` settings, and more. [Click here to learn more](https://payloadcms.com/docs/production/preventing-abuse).

[**Database**](https://payloadcms.com/docs/production/deployment#database)

Payload can be used with any Postgres database or MongoDB-compatible database including AWS DocumentDB or Azure Cosmos DB. Make sure your production environment has access to the database that Payload uses.

Out of the box, Payload templates pass the `process.env.DATABASE_URI` environment variable to its database adapters, so make sure you've got that environment variable (and all others that you use) assigned in your deployment platform.

[**DocumentDB**](https://payloadcms.com/docs/production/deployment#documentdb)

When using AWS DocumentDB, you will need to configure connection options for authentication in the `connectOptions` passed to the `mongooseAdapter` . You also need to set `connectOptions.useFacet` to `false` to disable use of the unsupported `$facet` aggregation.

[**CosmosDB**](https://payloadcms.com/docs/production/deployment#cosmosdb)

When using Azure Cosmos DB, an index is needed for any field you may want to sort on. To add the sort index for all fields that may be sorted in the admin UI use the [indexSortableFields](https://payloadcms.com/docs/configuration/overview) option.

[**File storage**](https://payloadcms.com/docs/production/deployment#file-storage)

If you are using Payload to [manage file uploads](https://payloadcms.com/docs/upload/overview), you need to consider where your uploaded files will be permanently stored. If you do not use Payload for file uploads, then this section does not impact your app whatsoever.

[**Persistent vs Ephemeral Filesystems**](https://payloadcms.com/docs/production/deployment#persistent-vs-ephemeral-filesystems)

Some cloud app hosts such as [Heroku](https://heroku.com/) use `ephemeral` file systems, which means that any files uploaded to your server only last until the server restarts or shuts down. Heroku and similar providers schedule restarts and shutdowns without your control, meaning your uploads will accidentally disappear without any way to get them back.

Alternatively, persistent filesystems will never delete your files and can be trusted to reliably host uploads perpetually.

**Popular cloud providers with ephemeral filesystems:**

- Heroku
- DigitalOcean Apps

**Popular cloud providers with persistent filesystems:**

- DigitalOcean Droplets
- Amazon EC2
- GoDaddy
- Many other more traditional web hosts

**Warning:**

If you rely on Payload's **Upload** functionality, make sure you either use a host with a persistent filesystem or have an integration with a third-party file host like Amazon S3.

[**Using cloud storage providers**](https://payloadcms.com/docs/production/deployment#using-cloud-storage-providers)

If you don't use Payload's `upload` functionality, you can completely disregard this section.

But, if you do, and you still want to use an ephemeral filesystem provider, you can use one of Payload's official cloud storage plugins or write your own to save the files your users upload to a more permanent storage solution like Amazon S3 or DigitalOcean Spaces.

Payload provides a list of official cloud storage adapters for you to use:

- [Azure Blob Storage](https://github.com/payloadcms/payload/tree/main/packages/storage-azure)
- [Google Cloud Storage](https://github.com/payloadcms/payload/tree/main/packages/storage-gcs)
- [AWS S3](https://github.com/payloadcms/payload/tree/main/packages/storage-s3)
- [Uploadthing](https://github.com/payloadcms/payload/tree/main/packages/storage-uploadthing)
- [Vercel Blob Storage](https://github.com/payloadcms/payload/tree/main/packages/storage-vercel-blob)

Follow the docs to configure any one of these storage providers. For local development, it might be handy to simply store uploads on your own computer, and then when it comes to production, simply enable the plugin for the cloud storage vendor of your choice.

[**Docker**](https://payloadcms.com/docs/production/deployment#docker)

This is an example of a multi-stage docker build of Payload for production. Ensure you are setting your environment variables on deployment, like `PAYLOAD_SECRET`, `PAYLOAD_CONFIG_PATH`, and `DATABASE_URI` if needed.

In your Next.js config, set the `output` property `standalone`.

1

// next.config.js

2

const nextConfig ={

3

output:'standalone',

4

}

Dockerfile

1

\# Dockerfile

2

\# From https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile

3

4

FROMnode:18-alpine AS base

5

6

\# Install dependencies only when needed

7

FROM base AS deps

8

\# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.

9

RUN apk add --no-cache libc6-compat

10

WORKDIR/app

11

12

\# Install dependencies based on the preferred package manager

13

COPYpackage.json yarn.lock\*package-lock.json\* pnpm-lock.yaml\*./

14

RUN \

15

if\[-f yarn.lock\]; then yarn --frozen-lockfile; \

16

elif \[-f package-lock.json\]; then npm ci; \

17

elif \[-f pnpm-lock.yaml\]; then corepack enable pnpm && pnpm i --frozen-lockfile; \

18

else echo "Lockfile not found."&& exit 1; \

19

fi

20

21

22

\# Rebuild the source code only when needed

23

FROM base AS builder

24

WORKDIR/app

25

COPY--from=deps /app/node\_modules ./node\_modules

26

COPY..

27

28

\# Next.js collects completely anonymous telemetry data about general usage.

29

\# Learn more here: https://nextjs.org/telemetry

30

\# Uncomment the following line incase you want to disable telemetry during the build.

31

\# ENVNEXT\_TELEMETRY\_DISABLED1

32

33

RUN \

34

if\[-f yarn.lock\]; then yarn run build; \

35

elif \[-f package-lock.json\]; then npm run build; \

36

elif \[-f pnpm-lock.yaml\]; then corepack enable pnpm && pnpm run build; \

37

else echo "Lockfile not found."&& exit 1; \

38

fi

39

40

\# Production image, copy all the files and run next

41

FROM base AS runner

42

WORKDIR/app

43

44

ENVNODE\_ENV production

45

\# Uncomment the following line incase you want to disable telemetry during runtime.

46

\# ENVNEXT\_TELEMETRY\_DISABLED1

47

48

RUN addgroup --system --gid 1001 nodejs

49

RUN adduser --system --uid 1001 nextjs

50

51

COPY--from=builder /app/public./public

52

53

\# Set the correct permission for prerender cache

54

RUN mkdir .next

55

RUN chown nextjs:nodejs .next

56

57

\# Automatically leverage output traces to reduce image size

58

\# https://nextjs.org/docs/advanced-features/output-file-tracing

59

COPY--from=builder --chown=nextjs:nodejs /app/.next/standalone ./

60

COPY--from=builder --chown=nextjs:nodejs /app/.next/static./.next/static

61

62

USER nextjs

63

64

EXPOSE3000

65

66

ENVPORT3000

67

68

\# server.js is created by next build from the standalone output

69

\# https://nextjs.org/docs/pages/api-reference/next-config-js/output

70

CMDHOSTNAME="0.0.0.0" node server.js

[**Docker Compose**](https://payloadcms.com/docs/production/deployment#docker-compose)

Here is an example of a docker-compose.yml file that can be used for development

1

version:'3'

2

3

services:

4

payload:

5

image: node:18-alpine

6

ports:

7

-'3000:3000'

8

volumes:

9

-.:/home/node/app

10

- node\_modules:/home/node/app/node\_modules

11

working\_dir:/home/node/app/

12

command: sh -c "corepack enable && corepack prepare pnpm@latest --activate && pnpm install && pnpm dev"

13

depends\_on:

14

- mongo

15

# - postgres

16

env\_file:

17

-.env

18

19

# Ensure your DATABASE\_URI uses 'mongo'as the hostname ie.mongodb://mongo/my-db-name

20

mongo:

21

image: mongo:latest

22

ports:

23

-'27017:27017'

24

command:

25

---storageEngine=wiredTiger

26

volumes:

27

- data:/data/db

28

logging:

29

driver: none

30

31

# Uncomment the following to use postgres

32

# postgres:

33

# restart: always

34

# image: postgres:latest

35

# volumes:

36

# - pgdata:/var/lib/postgresql/data

37

# ports:

38

# -"5432:5432"

39

40

volumes:

41

data:

42

# pgdata:

43

node\_modules:

[Next \\
**Preventing Production API Abuse**](https://payloadcms.com/docs/production/preventing-abuse)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264384&cv=11&fst=1741443264384&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fproduction%2Fdeployment&hn=www.googleadservices.com&frm=0&tiba=Production%20Deployment%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=599707606.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264553&cv=11&fst=1741443264553&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fproduction%2Fdeployment&hn=www.googleadservices.com&frm=0&tiba=Production%20Deployment%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=599707606.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload Fields Overview
# Fields Overview

Fields are the building blocks of Payload. They define the schema of the Documents that will be stored in the [Database](https://payloadcms.com/docs/database/overview), as well as automatically generate the corresponding UI within the [Admin Panel](https://payloadcms.com/docs/admin/overview).

There are many [Field Types](https://payloadcms.com/docs/fields/overview#field-types) to choose from, ranging anywhere from simple text strings to nested arrays and blocks. Most fields save data to the database, while others are strictly presentational. Fields can have [Custom Validations](https://payloadcms.com/docs/fields/overview#validation), [Conditional Logic](https://payloadcms.com/docs/fields/overview#conditional-logic), [Access Control](https://payloadcms.com/docs/fields/overview#field-level-access-control), [Hooks](https://payloadcms.com/docs/fields/overview#field-level-hooks), and so much more.

Fields can be endlessly customized in their appearance and behavior without affecting their underlying data structure. Fields are designed to withstand heavy modification or even complete replacement through the use of [Custom Field Components](https://payloadcms.com/docs/fields/overview#custom-components).

To configure fields, use the `fields` property in your [Collection](https://payloadcms.com/docs/configuration/collections) or [Global](https://payloadcms.com/docs/configuration/globals) config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPage:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
\]

8

}

[**Field Types**](https://payloadcms.com/docs/fields/overview#field-types)

Payload provides a wide variety of built-in Field Types, each with its own unique properties and behaviors that determine which values it can accept, how it is presented in the API, and how it will be rendered in the [Admin Panel](https://payloadcms.com/docs/admin/overview).

To configure fields, use the `fields` property in your [Collection](https://payloadcms.com/docs/configuration/collections) or [Global](https://payloadcms.com/docs/configuration/globals) config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPage:CollectionConfig={

4

slug:'pages',

5

fields:\[\
\
\
{\
\
\
name:'field',\
\
\
type:'text',\
\
\
}\
\
\
\]

11

}

**Reminder:** Each field is an object with at least the `type` property. This matches the field to its corresponding Field Type. [More details](https://payloadcms.com/docs/fields/overview#field-options).

There are three main categories of fields in Payload:

- [Data Fields](https://payloadcms.com/docs/fields/overview#data-fields)
- [Presentational Fields](https://payloadcms.com/docs/fields/overview#presentational-fields)
- [Virtual Fields](https://payloadcms.com/docs/fields/overview#virtual-fields)

To begin writing fields, first determine which [Field Type](https://payloadcms.com/docs/fields/overview#field-types) best supports your application. Then author your field accordingly using the [Field Options](https://payloadcms.com/docs/fields/overview#field-options) for your chosen field type.

[**Data Fields**](https://payloadcms.com/docs/fields/overview#data-fields)

Data Fields are used to store data in the [Database](https://payloadcms.com/docs/database/overview). All Data Fields have a `name` property. This is the key that will be used to store the field's value.

Here are the available Data Fields:

- [Array](https://payloadcms.com/docs/fields/array) \- for repeating content, supports nested fields
- [Blocks](https://payloadcms.com/docs/fields/blocks) \- for block-based content, supports nested fields
- [Checkbox](https://payloadcms.com/docs/fields/checkbox) \- saves boolean true / false values
- [Code](https://payloadcms.com/docs/fields/code) \- renders a code editor interface that saves a string
- [Date](https://payloadcms.com/docs/fields/date) \- renders a date picker and saves a timestamp
- [Email](https://payloadcms.com/docs/fields/email) \- ensures the value is a properly formatted email address
- [Group](https://payloadcms.com/docs/fields/group) \- nests fields within a keyed object
- [JSON](https://payloadcms.com/docs/fields/json) \- renders a JSON editor interface that saves a JSON object
- [Number](https://payloadcms.com/docs/fields/number) \- saves numeric values
- [Point](https://payloadcms.com/docs/fields/point) \- for location data, saves geometric coordinates
- [Radio](https://payloadcms.com/docs/fields/radio) \- renders a radio button group that allows only one value to be selected
- [Relationship](https://payloadcms.com/docs/fields/relationship) \- assign relationships to other collections
- [Rich Text](https://payloadcms.com/docs/fields/rich-text) \- renders a fully extensible rich text editor
- [Select](https://payloadcms.com/docs/fields/select) \- renders a dropdown / picklist style value selector
- [Tabs (Named)](https://payloadcms.com/docs/fields/tabs) \- similar to group, but renders nested fields within a tabbed layout
- [Text](https://payloadcms.com/docs/fields/text) \- simple text input that saves a string
- [Textarea](https://payloadcms.com/docs/fields/textarea) \- similar to text, but allows for multi-line input
- [Upload](https://payloadcms.com/docs/fields/upload) \- allows local file and image upload

[**Presentational Fields**](https://payloadcms.com/docs/fields/overview#presentational-fields)

Presentational Fields do not store data in the database. Instead, they are used to organize and present other fields in the [Admin Panel](https://payloadcms.com/docs/admin/overview), or to add custom UI components.

Here are the available Presentational Fields:

- [Collapsible](https://payloadcms.com/docs/fields/collapsible) \- nests fields within a collapsible component
- [Row](https://payloadcms.com/docs/fields/row) \- aligns fields horizontally
- [Tabs (Unnamed)](https://payloadcms.com/docs/fields/tabs) \- nests fields within a tabbed layout
- [UI](https://payloadcms.com/docs/fields/ui) \- blank field for custom UI components

[**Virtual Fields**](https://payloadcms.com/docs/fields/overview#virtual-fields)

Virtual fields are used to display data that is not stored in the database. They are useful for displaying computed values that populate within the APi response through hooks, etc.

Here are the available Virtual Fields:

- [Join](https://payloadcms.com/docs/fields/join) \- achieves two-way data binding between fields

**Tip:** Don't see a built-in field type that you need? Build it! Using a combination of [Field Validations](https://payloadcms.com/docs/fields/overview#validation) and [Custom Components](https://payloadcms.com/docs/custom-components/overview), you can override the entirety of how a component functions within the [Admin Panel](https://payloadcms.com/docs/admin/overview) to effectively create your own field type.

[**Field Options**](https://payloadcms.com/docs/fields/overview#field-options)

All fields require at least the `type` property. This matches the field to its corresponding [Field Type](https://payloadcms.com/docs/fields/overview#field-types) to determine its appearance and behavior within the [Admin Panel](https://payloadcms.com/docs/admin/overview). Each Field Type has its own unique set of options based on its own type.

To set a field's type, use the `type` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

}

For a full list of configuration options, see the documentation for each [Field Type](https://payloadcms.com/docs/fields/overview#field-types).

[**Field Names**](https://payloadcms.com/docs/fields/overview#field-names)

All [Data Fields](https://payloadcms.com/docs/fields/overview#data-fields) require a `name` property. This is the key that will be used to store and retrieve the field's value in the database. This property must be unique amongst this field's siblings.

To set a field's name, use the `name` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

}

Payload reserves various field names for internal use. Using reserved field names will result in your field being sanitized from the config.

The following field names are forbidden and cannot be used:

- `__v`
- `salt`
- `hash`
- `file`

[**Field-level Hooks**](https://payloadcms.com/docs/fields/overview#field-level-hooks)

In addition to being able to define [Hooks](https://payloadcms.com/docs/hooks/overview) on a document-level, you can define extremely granular logic field-by-field.

To define Field-level Hooks, use the `hooks` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

hooks:{

7

// ...

8

}

9

}

For full details on Field-level Hooks, see the [Field Hooks](https://payloadcms.com/docs/hooks/fields) documentation.

[**Field-level Access Control**](https://payloadcms.com/docs/fields/overview#field-level-access-control)

In addition to being able to define [Access Control](https://payloadcms.com/docs/access-control/overview) on a document-level, you can define extremely granular permissions field-by-field.

To define Field-level Access Control, use the `access` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

access:{

7

// ...

8

}

9

}

For full details on Field-level Access Control, see the [Field Access Control](https://payloadcms.com/docs/access-control/fields) documentation.

[**Default Values**](https://payloadcms.com/docs/fields/overview#default-values)

Fields can be optionally prefilled with initial values. This is used in both the [Admin Panel](https://payloadcms.com/docs/admin/overview) as well as API requests to populate missing or undefined field values during the `create` or `update` operations.

To set a field's default value, use the `defaultValue` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

defaultValue:'Hello, World!',

7

}

Default values can be defined as a static value or a function that returns a value. When a `defaultValue` is defined statically, Payload's [Database Adapters](https://payloadcms.com/docs/database/overview) will apply it to the database schema or models.

Functions can be written to make use of the following argument properties:

- `user` \- the authenticated user object
- `locale` \- the currently selected locale string
- `req` \- the `PayloadRequest` object

Here is an example of a `defaultValue` function:

1

import type {Field}from'payload'

2

3

consttranslation:{

4

en:'Written by'

5

es:'Escrito por'

6

}

7

8

exportconstmyField:Field={

9

name:'attribution',

10

type:'text',

11

defaultValue:({ user, locale, req })=>

12

\`${translation\[locale\]}${user.name}\`,

13

}

**Tip:** You can use async `defaultValue` functions to fill fields with data from API requests or Local API using `req.payload`.

[**Validation**](https://payloadcms.com/docs/fields/overview#validation)

Fields are automatically validated based on their [Field Type](https://payloadcms.com/docs/fields/overview#field-types) and other [Field Options](https://payloadcms.com/docs/fields/overview#field-options) such as `required` or `min` and `max` value constraints. If needed, however, field validations can be customized or entirely replaced by providing your own custom validation functions.

To set a custom field validation function, use the `validate` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

validate:value=>Boolean(value)\|\|'This field is required'

7

}

Custom validation functions should return either `true` or a `string` representing the error message to display in API responses.

The following arguments are provided to the `validate` function:

| Argument | Description |
| --- | --- |
| `value` | The value of the field being validated. |
| `ctx` | An object with additional data and context. [More details](https://payloadcms.com/docs/fields/overview#validation-context) |

[**Validation Context**](https://payloadcms.com/docs/fields/overview#validation-context)

The `ctx` argument contains full document data, sibling field data, the current operation, and other useful information such as currently authenticated user:

1

import type {Field}from'payload'

2

3

exportconstMyField:Field={

4

type:'text',

5

name:'myField',

6

validate:(val,{ user })=>

7

Boolean(user)\|\|'You must be logged in to save this field',

8

}

The following additional properties are provided in the `ctx` object:

| Property | Description |
| --- | --- |
| `data` | An object containing the full collection or global document currently being edited. |
| `siblingData` | An object containing document data that is scoped to only fields within the same parent of this field. |
| `operation` | Will be `create` or `update` depending on the UI action or API call. |
| `id` | The `id` of the current document being edited. `id` is `undefined` during the `create` operation. |
| `req` | The current HTTP request object. Contains `payload`, `user`, etc. |
| `event` | Either `onChange` or `submit` depending on the current action. Used as a performance opt-in. [More details](https://payloadcms.com/docs/fields/overview#async-field-validations). |

[**Reusing Default Field Validations**](https://payloadcms.com/docs/fields/overview#reusing-default-field-validations)

When using custom validation functions, Payload will use yours in place of the default. However, you might want to simply augment the default validation with your own custom logic.

To reuse default field validations, call them from within your custom validation function:

1

import{ text }from'payload/shared'

2

3

constfield:Field={

4

name:'notBad',

5

type:'text',

6

validate:(val, args)=>{

7

if(val ==='bad')return'This cannot be "bad"'

8

returntext(val, args)

9

},

10

}

Here is a list of all default field validation functions:

1

import{

2

array,

3

blocks,

4

checkbox,

5

code,

6

date,

7

email,

8

group,

9

json,

10

number,

11

point,

12

radio,

13

relationship,

14

richText,

15

select,

16

tabs,

17

text,

18

textarea,

19

upload,

20

}from'payload/shared'

[**Async Field Validations**](https://payloadcms.com/docs/fields/overview#async-field-validations)

Custom validation functions can also be asynchronous depending on your needs. This makes it possible to make requests to external services or perform other miscellaneous asynchronous logic.

When writing async validation functions, it is important to consider the performance implications. Validations are executed on every change to the field, so they should be as lightweight as possible. If you need to perform expensive validations, such as querying the database, consider using the `event` property in the `ctx` object to only run the validation on form submission.

To write asynchronous validation functions, use the `async` keyword to define your function:

1

import type {CollectionConfig}from'payload'

2

3

exportconstOrders:CollectionConfig={

4

slug:'orders',

5

fields:\[\
\
\
{\
\
\
name:'customerNumber',\
\
\
type:'text',\
\
\
validate:async(val,{ event })=>{\
\
\
if(event ==='onChange'){\
\
\
returntrue\
\
\
}\
\
\
\
// only perform expensive validation when the form is submitted\
\
\
const response =awaitfetch(\`https://your-api.com/customers/${val}\`)\
\
\
\
if(response.ok){\
\
\
returntrue\
\
\
}\
\
\
\
return'The customer number provided does not match any customers within our records.'\
\
\
},\
\
\
},\
\
\
\],

25

}

[**Custom ID Fields**](https://payloadcms.com/docs/fields/overview#custom-id-fields)

All [Collections](https://payloadcms.com/docs/configuration/collections) automatically generate their own ID field. If needed, you can override this behavior by providing an explicit ID field to your config. This field should either be required or have a hook to generate the ID dynamically.

To define a custom ID field, add a top-level field with the `name` property set to `id`:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollection:CollectionConfig={

4

// ...

5

fields:\[\
\
\
{\
\
\
name:'id',\
\
\
required:true,\
\
\
type:'number',\
\
\
},\
\
\
\],

12

}

**Reminder:** The Custom ID Fields can only be of type [`Number`](https://payloadcms.com/docs/fields/number) or [`Text`](https://payloadcms.com/docs/fields/text). Custom ID fields with type `text` must not contain `/` or `.` characters.

[**Admin Options**](https://payloadcms.com/docs/fields/overview#admin-options)

You can customize the appearance and behavior of fields within the [Admin Panel](https://payloadcms.com/docs/admin/overview) through the `admin` property of any Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
name:'myField',\
\
\
type:'text',\
\
\
admin:{\
\
\
// ...\
\
\
},\
\
\
}\
\
\
\]

15

}

The following options are available:

| Option | Description |
| --- | --- |
| `condition` | Programmatically show / hide fields based on other fields. [More details](https://payloadcms.com/docs/fields/overview#conditional-logic). |
| `components` | All Field Components can be swapped out for [Custom Components](https://payloadcms.com/docs/custom-components/overview) that you define. |
| `description` | Helper text to display alongside the field to provide more information for the editor. [More details](https://payloadcms.com/docs/fields/overview#description). |
| `position` | Specify if the field should be rendered in the sidebar by defining `position: 'sidebar'`. |
| `width` | Restrict the width of a field. You can pass any string-based value here, be it pixels, percentages, etc. This property is especially useful when fields are nested within a `Row` type where they can be organized horizontally. |
| `style` | [CSS Properties](https://developer.mozilla.org/en-US/docs/Web/CSS) to inject into the root element of the field. |
| `className` | Attach a [CSS class attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors) to the root DOM element of a field. |
| `readOnly` | Setting a field to `readOnly` has no effect on the API whatsoever but disables the admin component's editability to prevent editors from modifying the field's value. |
| `disabled` | If a field is `disabled`, it is completely omitted from the [Admin Panel](https://payloadcms.com/docs/admin/overview) entirely. |
| `disableBulkEdit` | Set `disableBulkEdit` to `true` to prevent fields from appearing in the select options when making edits for multiple documents. Defaults to `true` for UI fields. |
| `disableListColumn` | Set `disableListColumn` to `true` to prevent fields from appearing in the list view column selector. |
| `disableListFilter` | Set `disableListFilter` to `true` to prevent fields from appearing in the list view filter options. |
| `hidden` | Will transform the field into a `hidden` input type. Its value will still submit with requests in the Admin Panel, but the field itself will not be visible to editors. |

[**Field Descriptions**](https://payloadcms.com/docs/fields/overview#field-descriptions)

Field Descriptions are used to provide additional information to the editor about a field, such as special instructions. Their placement varies from field to field, but typically are displayed with subtle style differences beneath the field inputs.

A description can be configured in three ways:

- As a string.
- As a function which returns a string. [More details](https://payloadcms.com/docs/fields/overview#description-functions).
- As a React component. [More details](https://payloadcms.com/docs/fields/overview#description).

To add a Custom Description to a field, use the `admin.description` property in your Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
name:'myField',\
\
\
type:'text',\
\
\
admin:{\
\
\
description:'Hello, world!'\
\
\
},\
\
\
},\
\
\
\]

15

}

**Reminder:** To replace the Field Description with a [Custom Component](https://payloadcms.com/docs/custom-components/overview), use the `admin.components.Description` property. [More details](https://payloadcms.com/docs/fields/overview#description).

[**Description Functions**](https://payloadcms.com/docs/fields/overview#description-functions)

Custom Descriptions can also be defined as a function. Description Functions are executed on the server and can be used to format simple descriptions based on the user's current [Locale](https://payloadcms.com/docs/configuration/localization).

To add a Description Function to a field, set the `admin.description` property to a _function_ in your Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
name:'myField',\
\
\
type:'text',\
\
\
admin:{\
\
\
description:({ t })=>\`${t('Hello, world!')}\`\
\
\
},\
\
\
},\
\
\
\]

15

}

All Description Functions receive the following arguments:

| Argument | Description |
| --- | --- |
| `t` | The `t` function used to internationalize the Admin Panel. [More details](https://payloadcms.com/docs/configuration/i18n) |

**Note:** If you need to subscribe to live updates within your form, use a Description Component instead. [More details](https://payloadcms.com/docs/fields/overview#description).

[**Conditional Logic**](https://payloadcms.com/docs/fields/overview#conditional-logic)

You can show and hide fields based on what other fields are doing by utilizing conditional logic on a field by field basis. The `condition` property on a field's admin config accepts a function which takes three arguments:

- `data` \- the entire document's data that is currently being edited
- `siblingData` \- only the fields that are direct siblings to the field with the condition
- `{ user }` \- the final argument is an object containing the currently authenticated user

The `condition` function should return a boolean that will control if the field should be displayed or not.

**Example:**

1

{

2

fields:\[\
\
\
{\
\
\
name:'enableGreeting',\
\
\
type:'checkbox',\
\
\
defaultValue:false,\
\
\
},\
\
\
{\
\
\
name:'greeting',\
\
\
type:'text',\
\
\
admin:{\
\
\
condition:(data, siblingData,{ user })=>{\
\
\
if(data.enableGreeting){\
\
\
returntrue\
\
\
}else{\
\
\
returnfalse\
\
\
}\
\
\
},\
\
\
},\
\
\
},\
\
\
\]

22

}

[**Custom Components**](https://payloadcms.com/docs/fields/overview#custom-components)

Within the [Admin Panel](https://payloadcms.com/docs/admin/overview), fields are represented in three distinct places:

- [Field](https://payloadcms.com/docs/fields/overview#field) \- The actual form field rendered in the Edit View.
- [Cell](https://payloadcms.com/docs/fields/overview#cell) \- The table cell component rendered in the List View.
- [Filter](https://payloadcms.com/docs/fields/overview#filter) \- The filter component rendered in the List View.
- [Diff](https://payloadcms.com/docs/fields/overview#diff) \- The Diff component rendered in the Version Diff View

To swap in Field Components with your own, use the `admin.components` property in your Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
// ...\
\
\
admin:{\
\
\
components:{\
\
\
// ...\
\
\
},\
\
\
},\
\
\
}\
\
\
\]

16

}

The following options are available:

| Component | Description |
| --- | --- |
| `Field` | The form field rendered of the Edit View. [More details](https://payloadcms.com/docs/fields/overview#field). |
| `Cell` | The table cell rendered of the List View. [More details](https://payloadcms.com/docs/fields/overview#cell). |
| `Filter` | The filter component rendered in the List View. [More details](https://payloadcms.com/docs/fields/overview#filter). |
| `Label` | Override the default Label of the Field Component. [More details](https://payloadcms.com/docs/fields/overview#label). |
| `Error` | Override the default Error of the Field Component. [More details](https://payloadcms.com/docs/fields/overview#error). |
| `Diff` | Override the default Diff component rendered in the Version Diff View. [More details](https://payloadcms.com/docs/fields/overview#diff). |
| `Description` | Override the default Description of the Field Component. [More details](https://payloadcms.com/docs/fields/overview#description). |
| `beforeInput` | An array of elements that will be added before the input of the Field Component. [More details](https://payloadcms.com/docs/fields/overview#afterinput-and-beforeinput). |
| `afterInput` | An array of elements that will be added after the input of the Field Component. [More details](https://payloadcms.com/docs/fields/overview#afterinput-and-beforeinput). |

[**Field**](https://payloadcms.com/docs/fields/overview#field)

The Field Component is the actual form field rendered in the Edit View. This is the input that user's will interact with when editing a document.

To swap in your own Field Component, use the `admin.components.Field` property in your Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
// ...\
\
\
admin:{\
\
\
components:{\
\
\
Field:'/path/to/MyFieldComponent',\
\
\
},\
\
\
},\
\
\
}\
\
\
\]

16

}

_For details on how to build Custom Components, see_ [_Building Custom Components_](https://payloadcms.com/docs/custom-components/overview#building-custom-components) _._

Instead of replacing the entire Field Component, you can alternately replace or slot-in only specific parts by using the [`Label`](https://payloadcms.com/docs/fields/overview#label), [`Error`](https://payloadcms.com/docs/fields/overview#error), [`beforeInput`](https://payloadcms.com/docs/fields/overview#afterinput-and-beforinput), and [`afterInput`](https://payloadcms.com/docs/fields/overview#afterinput-and-beforinput) properties.

[**Default Props**](https://payloadcms.com/docs/fields/overview#default-props)

All Field Components receive the following props by default:

| Property | Description |
| --- | --- |
| `docPreferences` | An object that contains the [Preferences](https://payloadcms.com/docs/admin/preferences) for the document. |
| `field` | In Client Components, this is the sanitized Client Field Config. In Server Components, this is the original Field Config. Server Components will also receive the sanitized field config through the `clientField` prop (see below). |
| `locale` | The locale of the field. [More details](https://payloadcms.com/docs/configuration/localization). |
| `readOnly` | A boolean value that represents if the field is read-only or not. |
| `user` | The currently authenticated user. [More details](https://payloadcms.com/docs/authentication/overview). |
| `validate` | A function that can be used to validate the field. |
| `path` | A string representing the direct, dynamic path to the field at runtime, i.e. `myGroup.myArray.0.myField`. |
| `schemaPath` | A string representing the direct, static path to the Field Config, i.e. `posts.myGroup.myArray.myField`. |
| `indexPath` | A hyphen-notated string representing the path to the field _within the nearest named ancestor field_, i.e. `0-0` |

In addition to the above props, all Server Components will also receive the following props:

| Property | Description |
| --- | --- |
| `clientField` | The serializable Client Field Config. |
| `field` | The Field Config. |
| `data` | The current document being edited. |
| `i18n` | The [i18n](https://payloadcms.com/docs/configuration/i18n) object. |
| `payload` | The [Payload](https://payloadcms.com/docs/local-api/overview) class. |
| `permissions` | The field permissions based on the currently authenticated user. |
| `siblingData` | The data of the field's siblings. |
| `user` | The currently authenticated user. [More details](https://payloadcms.com/docs/authentication/overview). |
| `value` | The value of the field at render-time. |

[**Sending and receiving values from the form**](https://payloadcms.com/docs/fields/overview#sending-and-receiving-values-from-the-form)

When swapping out the `Field` component, you are responsible for sending and receiving the field's `value` from the form itself.

To do so, import the [`useField`](https://payloadcms.com/docs/admin/react-hooks#usefield) hook from `@payloadcms/ui` and use it to manage the field's value:

1

'use client'

2

import{ useField }from'@payloadcms/ui'

3

4

exportconstCustomTextField:React.FC=()=>{

5

const{ value, setValue }=useField()

6

7

return(

8

<input

9

onChange={(e)=>setValue(e.target.value)}

10

value={value}

11

/>

12

)

13

}

For a complete list of all available React hooks, see the [Payload React Hooks](https://payloadcms.com/docs/admin/react-hooks) documentation. For additional help, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**TypeScript**](https://payloadcms.com/docs/fields/overview#field-component-types)

When building Custom Field Components, you can import the client field props to ensure type safety in your component. There is an explicit type for the Field Component, one for every Field Type and server/client environment. The convention is to prepend the field type onto the target type, i.e. `TextFieldClientComponent`:

1

import type {

2

TextFieldClientComponent,

3

TextFieldServerComponent,

4

TextFieldClientProps,

5

TextFieldServerProps,

6

// ...and so on for each Field Type

7

}from'payload'

See each individual Field Type for exact type imports.

[**Cell**](https://payloadcms.com/docs/fields/overview#cell)

The Cell Component is rendered in the table of the List View. It represents the value of the field when displayed in a table cell.

To swap in your own Cell Component, use the `admin.components.Cell` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstmyField:Field={

4

name:'myField',

5

type:'text',

6

admin:{

7

components:{

8

Cell:'/path/to/MyCustomCellComponent',

9

},

10

},

11

}

All Cell Components receive the same [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field), plus the following:

| Property | Description |
| --- | --- |
| `link` | A boolean representing whether this cell should be wrapped in a link. |
| `onClick` | A function that is called when the cell is clicked. |

For details on how to build Custom Components themselves, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**Filter**](https://payloadcms.com/docs/fields/overview#filter)

The Filter Component is the actual input element rendered within the "Filter By" dropdown of the List View used to represent this field when building filters.

To swap in your own Filter Component, use the `admin.components.Filter` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstmyField:Field={

4

name:'myField',

5

type:'text',

6

admin:{

7

components:{

8

Filter:'/path/to/MyCustomFilterComponent',

9

},

10

},

11

}

All Custom Filter Components receive the same [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field).

For details on how to build Custom Components themselves, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**Label**](https://payloadcms.com/docs/fields/overview#label)

The Label Component is rendered anywhere a field needs to be represented by a label. This is typically used in the Edit View, but can also be used in the List View and elsewhere.

To swap in your own Label Component, use the `admin.components.Label` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstmyField:Field={

4

name:'myField',

5

type:'text',

6

admin:{

7

components:{

8

Label:'/path/to/MyCustomLabelComponent',

9

},

10

},

11

}

All Custom Label Components receive the same [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field).

For details on how to build Custom Components themselves, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**TypeScript**](https://payloadcms.com/docs/fields/overview#label-component-types)

When building Custom Label Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Label Component, one for every Field Type and server/client environment. The convention is to append `LabelServerComponent` or `LabelClientComponent` to the type of field, i.e. `TextFieldLabelClientComponent`.

1

import type {

2

TextFieldLabelServerComponent,

3

TextFieldLabelClientComponent,

4

// ...and so on for each Field Type

5

}from'payload'

[**Description**](https://payloadcms.com/docs/fields/overview#description)

Alternatively to the [Description Property](https://payloadcms.com/docs/fields/overview#field-descriptions), you can also use a [Custom Component](https://payloadcms.com/docs/custom-components/overview) as the Field Description. This can be useful when you need to provide more complex feedback to the user, such as rendering dynamic field values or other interactive elements.

To add a Description Component to a field, use the `admin.components.Description` property in your Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
name:'myField',\
\
\
type:'text',\
\
\
admin:{\
\
\
components:{\
\
\
Description:'/path/to/MyCustomDescriptionComponent',\
\
\
}\
\
\
}\
\
\
}\
\
\
\]

17

}

All Custom Description Components receive the same [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field).

For details on how to build a Custom Components themselves, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**TypeScript**](https://payloadcms.com/docs/fields/overview#description-component-types)

When building Custom Description Components, you can import the component props to ensure type safety in your component. There is an explicit type for the Description Component, one for every Field Type and server/client environment. The convention is to append `DescriptionServerComponent` or `DescriptionClientComponent` to the type of field, i.e. `TextFieldDescriptionClientComponent`.

1

import type {

2

TextFieldDescriptionServerComponent,

3

TextFieldDescriptionClientComponent,

4

// And so on for each Field Type

5

}from'payload'

[**Error**](https://payloadcms.com/docs/fields/overview#error)

The Error Component is rendered when a field fails validation. It is typically displayed beneath the field input in a visually-compelling style.

To swap in your own Error Component, use the `admin.components.Error` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstmyField:Field={

4

name:'myField',

5

type:'text',

6

admin:{

7

components:{

8

Error:'/path/to/MyCustomErrorComponent',

9

},

10

},

11

}

All Error Components receive the [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field).

For details on how to build Custom Components themselves, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**TypeScript**](https://payloadcms.com/docs/fields/overview#error-component-types)

When building Custom Error Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Error Component, one for every Field Type and server/client environment. The convention is to append `ErrorServerComponent` or `ErrorClientComponent` to the type of field, i.e. `TextFieldErrorClientComponent`.

1

import type {

2

TextFieldErrorServerComponent,

3

TextFieldErrorClientComponent,

4

// And so on for each Field Type

5

}from'payload'

[**Diff**](https://payloadcms.com/docs/fields/overview#diff)

The Diff Component is rendered in the Version Diff view. It will only be visible in entities with versioning enabled,

To swap in your own Diff Component, use the `admin.components.Diff` property in your Field Config:

1

import type {Field}from'payload'

2

3

exportconstmyField:Field={

4

name:'myField',

5

type:'text',

6

admin:{

7

components:{

8

Diff:'/path/to/MyCustomDiffComponent',

9

},

10

},

11

}

All Error Components receive the [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field).

For details on how to build Custom Components themselves, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**TypeScript**](https://payloadcms.com/docs/fields/overview#diff-component-types)

When building Custom Diff Components, you can import the component types to ensure type safety in your component. There is an explicit type for the Diff Component, one for every Field Type and server/client environment. The convention is to append `DiffServerComponent` or `DiffClientComponent` to the type of field, i.e. `TextFieldDiffClientComponent`.

1

import type {

2

TextFieldDiffServerComponent,

3

TextFieldDiffClientComponent,

4

// And so on for each Field Type

5

}from'payload'

[**afterInput and beforeInput**](https://payloadcms.com/docs/fields/overview#afterinput-and-beforeinput)

With these properties you can add multiple components _before_ and _after_ the input element, as their name suggests. This is useful when you need to render additional elements alongside the field without replacing the entire field component.

To add components before and after the input element, use the `admin.components.beforeInput` and `admin.components.afterInput` properties in your Field Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollectionConfig:CollectionConfig={

4

// ...

5

fields:\[\
\
\
// ...\
\
\
{\
\
\
name:'myField',\
\
\
type:'text',\
\
\
admin:{\
\
\
components:{\
\
\
beforeInput:\['/path/to/MyCustomComponent'\],\
\
\
afterInput:\['/path/to/MyOtherCustomComponent'\],\
\
\
}\
\
\
}\
\
\
}\
\
\
\]

18

}

All `afterInput` and `beforeInput` Components receive the same [Default Field Component Props](https://payloadcms.com/docs/fields/overview#field).

For details on how to build Custom Components, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**TypeScript**](https://payloadcms.com/docs/fields/overview#typescript)

You can import the Payload `Field` type as well as other common types from the `payload` package. [More details](https://payloadcms.com/docs/typescript/overview).

1

import type {Field}from'payload'

[Next \\
**Array Field**](https://payloadcms.com/docs/fields/array)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264695&cv=11&fst=1741443264695&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102693808~102717422~102788824~102791784~102813108~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Fields%20Overview%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=433069456.1741443265&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443265061&cv=11&fst=1741443265061&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102643510~102717422~102788824~102791784~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Ffields%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Fields%20Overview%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=433069456.1741443265&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Redirects Plugin
# Redirects Plugin

![https://www.npmjs.com/package/@payloadcms/plugin-redirects](https://img.shields.io/npm/v/@payloadcms/plugin-redirects)

This plugin allows you to easily manage redirects for your application from within your [Admin Panel](https://payloadcms.com/docs/admin/overview). It does so by adding a `redirects` collection to your config that allows you specify a redirect from one URL to another. Your front-end application can use this data to automatically redirect users to the correct page using proper HTTP status codes. This is useful for SEO, indexing, and search engine ranking when re-platforming or when changing your URL structure.

For example, if you have a page at `/about` and you want to change it to `/about-us`, you can create a redirect from the old page to the new one, then you can use this data to write HTTP redirects into your front-end application. This will ensure that users are redirected to the correct page without penalty because search engines are notified of the change at the request level. This is a very lightweight plugin that will allow you to integrate managed redirects for any front-end framework.

This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-redirects). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%redirects&template=bug_report.md&title=plugin-redirects%3A) with as much detail as possible.

[**Core features**](https://payloadcms.com/docs/plugins/redirects#core-features)

- Adds a `redirects` collection to your config that:
- includes a `from` and `to` fields
- allows `to` to be a document reference

[**Installation**](https://payloadcms.com/docs/plugins/redirects#installation)

Install the plugin using any JavaScript package manager like [pnpm](https://pnpm.io/), [npm](https://npmjs.com/), or [Yarn](https://yarnpkg.com/):

1

pnpm add @payloadcms/plugin-redirects

[**Basic Usage**](https://payloadcms.com/docs/plugins/redirects#basic-usage)

In the `plugins` array of your [Payload Config](https://payloadcms.com/docs/configuration/overview), call the plugin with [options](https://payloadcms.com/docs/plugins/redirects#options):

1

import{ buildConfig }from'payload'

2

import{ redirectsPlugin }from'@payloadcms/plugin-redirects'

3

4

const config =buildConfig({

5

collections:\[\
\
\
{\
\
\
slug:'pages',\
\
\
fields:\[\],\
\
\
},\
\
\
\],

11

plugins:\[\
\
\
redirectsPlugin({\
\
\
collections:\['pages'\],\
\
\
}),\
\
\
\],

16

})

17

18

exportdefault config

[**Options**](https://payloadcms.com/docs/plugins/redirects#options)

| Option | Type | Description |
| --- | --- | --- |
| `collections` | `string[]` | An array of collection slugs to populate in the `to` field of each redirect. |
| `overrides` | `object` | A partial collection config that allows you to override anything on the `redirects` collection. |
| `redirectTypes` | `string[]` | Provide an array of redirects if you want to provide options for the type of redirects to be supported. |
| `redirectTypeFieldOverride` | `Field` | A partial Field config that allows you to override the Redirect Type field if enabled above. |

Note that the fields in overrides take a function that receives the default fields and returns an array of fields. This allows you to add fields to the collection.

1

redirectsPlugin({

2

collections:\['pages'\],

3

overrides:{

4

fields:({ defaultFields })=>{

5

return\[\
\
\
...defaultFields,\
\
\
{\
\
\
type:'text',\
\
\
name:'customField',\
\
\
},\
\
\
\]

12

},

13

},

14

redirectTypes:\['301','302'\],

15

redirectTypeFieldOverride:{

16

label:'Redirect Type (Overridden)',

17

},

18

})

[**TypeScript**](https://payloadcms.com/docs/plugins/redirects#typescript)

All types can be directly imported:

1

import{PluginConfig}from'@payloadcms/plugin-redirects/types'

[**Examples**](https://payloadcms.com/docs/plugins/redirects#examples)

The [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates) also contains an official [Website Template](https://github.com/payloadcms/payload/tree/main/templates/website) and [E-commerce Template](https://github.com/payloadcms/payload/tree/main/templates/ecommerce), both of which use this plugin.

[Next \\
**Nested Docs Plugin**](https://payloadcms.com/docs/plugins/nested-docs)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264377&cv=11&fst=1741443264377&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fplugins%2Fredirects&hn=www.googleadservices.com&frm=0&tiba=Redirects%20Plugin%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=862652519.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264620&cv=11&fst=1741443264620&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fplugins%2Fredirects&hn=www.googleadservices.com&frm=0&tiba=Redirects%20Plugin%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=862652519.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Payload MongoDB Integration
# MongoDB

To use Payload with MongoDB, install the package `@payloadcms/db-mongodb`. It will come with everything you need to store your Payload data in MongoDB.

Then from there, pass it to your Payload Config as follows:

1

import{ mongooseAdapter }from'@payloadcms/db-mongodb'

2

3

exportdefaultbuildConfig({

4

// Your config goes here

5

collections:\[\
\
\
// Collections go here\
\
\
\],

8

// Configure the Mongoose adapter here

9

db:mongooseAdapter({

10

// Mongoose-specific arguments go here.

11

// URL is required.

12

url: process.env.DATABASE\_URI,

13

}),

14

})

[**Options**](https://payloadcms.com/docs/database/mongodb#options)

| Option | Description |
| --- | --- |
| `autoPluralization` | Tell Mongoose to auto-pluralize any collection names if it encounters any singular words used as collection `slug` s. |
| `connectOptions` | Customize MongoDB connection options. Payload will connect to your MongoDB database using default options which you can override and extend to include all the [options](https://mongoosejs.com/docs/connections.html#options) available to mongoose. |
| `collectionsSchemaOptions` | Customize Mongoose schema options for collections. |
| `disableIndexHints` | Set to true to disable hinting to MongoDB to use 'id' as index. This is currently done when counting documents for pagination, as it increases the speed of the count function used in that query. Disabling this optimization might fix some problems with AWS DocumentDB. Defaults to false |
| `migrationDir` | Customize the directory that migrations are stored. |
| `transactionOptions` | An object with configuration properties used in [transactions](https://www.mongodb.com/docs/manual/core/transactions/) or `false` which will disable the use of transactions. |
| `collation` | Enable language-specific string comparison with customizable options. Available on MongoDB 3.4+. Defaults locale to "en". Example: `{ strength: 3 }`. For a full list of collation options and their definitions, see the [MongoDB documentation](https://www.mongodb.com/docs/manual/reference/collation/). |

[**Access to Mongoose models**](https://payloadcms.com/docs/database/mongodb#access-to-mongoose-models)

After Payload is initialized, this adapter exposes all of your Mongoose models and they are available for you to work with directly.

You can access Mongoose models as follows:

- Collection models - `payload.db.collections[myCollectionSlug]`
- Globals model - `payload.db.globals`
- Versions model (both collections and globals) - `payload.db.versions[myEntitySlug]`

[**Using other MongoDB implementations**](https://payloadcms.com/docs/database/mongodb#using-other-mongodb-implementations)

Limitations with [DocumentDB](https://aws.amazon.com/documentdb/) and [Azure Cosmos DB](https://azure.microsoft.com/en-us/products/cosmos-db):

- For Azure Cosmos DB you must pass `transactionOptions: false` to the adapter options. Azure Cosmos DB does not support transactions that update two and more documents in different collections, which is a common case when using Payload (via hooks).
- For Azure Cosmos DB the root config property `indexSortableFields` must be set to `true`.
- The [Join Field](https://payloadcms.com/docs/fields/join) is not supported in DocumentDB and Azure Cosmos DB, as we internally use MongoDB aggregations to query data for that field, which are limited there. This can be changed in the future.
- For DocumentDB pass `disableIndexHints: true` to disable hinting to the DB to use `id` as index which can cause problems with DocumentDB.

[Next \\
**Postgres**](https://payloadcms.com/docs/database/postgres)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264495&cv=11&fst=1741443264495&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102308675~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fdatabase%2Fmongodb&hn=www.googleadservices.com&frm=0&tiba=MongoDB%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=1416960981.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264732&cv=11&fst=1741443264732&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fdatabase%2Fmongodb&hn=www.googleadservices.com&frm=0&tiba=MongoDB%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=1416960981.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Document Depth Management
# Depth

Documents in Payload can have relationships to other Documents. This is true for both [Collections](https://payloadcms.com/docs/configuration/collections) as well as [Globals](https://payloadcms.com/docs/configuration/globals). When you query a Document, you can specify the depth at which to populate any of its related Documents either as full objects, or only their IDs.

Depth will optimize the performance of your application by limiting the amount of processing made in the database and significantly reducing the amount of data returned. Since Documents can be infinitely nested or recursively related, it's important to be able to control how deep your API populates.

For example, when you specify a `depth` of `0`, the API response might look like this:

1

{

2

"id":"5ae8f9bde69e394e717c8832",

3

"title":"This is a great post",

4

"author":"5f7dd05cd50d4005f8bcab17"

5

}

But with a `depth` of `1`, the response might look like this:

1

{

2

"id":"5ae8f9bde69e394e717c8832",

3

"title":"This is a great post",

4

"author":{

5

"id":"5f7dd05cd50d4005f8bcab17",

6

"name":"John Doe"

7

}

8

}

**Important:** Depth has no effect in the [GraphQL API](https://payloadcms.com/docs/graphql/overview), because there, depth is based on the shape of your queries.

[**Local API**](https://payloadcms.com/docs/queries/depth#local-api)

To specify depth in the [Local API](https://payloadcms.com/docs/local-api/overview), you can use the `depth` option in your query:

1

import type {Payload}from'payload'

2

3

constgetPosts=async(payload:Payload)=>{

4

const posts =await payload.find({

5

collection:'posts',

6

depth:2,

7

})

8

9

return posts

10

}

**Reminder:** This is the same for [Globals](https://payloadcms.com/docs/configuration/globals) using the `findGlobal` operation.

[**REST API**](https://payloadcms.com/docs/queries/depth#rest-api)

To specify depth in the [REST API](https://payloadcms.com/docs/rest-api/overview), you can use the `depth` parameter in your query:

1

fetch('https://localhost:3000/api/posts?depth=2')

2

.then((res)=> res.json())

3

.then((data)=>console.log(data))

**Reminder:** This is the same for [Globals](https://payloadcms.com/docs/configuration/globals) using the `/api/globals` endpoint.

[**Max Depth**](https://payloadcms.com/docs/queries/depth#max-depth)

Fields like the [Relationship Field](https://payloadcms.com/docs/fields/relationship) or the [Upload Field](https://payloadcms.com/docs/fields/upload) can also set a maximum depth. If exceeded, this will limit the population depth regardless of what the depth might be on the request.

To set a max depth for a field, use the `maxDepth` property in your field configuration:

1

{

2

slug:'posts',

3

fields:\[\
\
\
{\
\
\
name:'author',\
\
\
type:'relationship',\
\
\
relationTo:'users',\
\
\
maxDepth:2,\
\
\
}\
\
\
\]

11

}

[Next \\
**Pagination**](https://payloadcms.com/docs/queries/pagination)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264322&cv=11&fst=1741443264322&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336z8838164383za201zb838164383&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fqueries%2Fdepth&hn=www.googleadservices.com&frm=0&tiba=Depth%20%7C%20Documentation%20%7C%20Payload&npa=0&pscdl=noapi&auid=918407227.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&_tu=Cg)[iframe](https://td.doubleclick.net/td/rul/10790486956?random=1741443264613&cv=11&fst=1741443264613&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9102059336za200zb887556972&gcd=13l3l3l3l1l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fpayloadcms.com%2Fdocs%2Fqueries%2Fdepth&hn=www.googleadservices.com&frm=0&tiba=Depth%20%7C%20Documentation%20%7C%20Payload&did=dZTQ1Zm&gdid=dZTQ1Zm&npa=0&pscdl=noapi&auid=918407227.1741443264&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## SEO Plugin Overview
# SEO Plugin

![https://www.npmjs.com/package/@payloadcms/plugin-seo](https://img.shields.io/npm/v/@payloadcms/plugin-seo)

This plugin allows you to easily manage SEO metadata for your application from within your [Admin Panel](https://payloadcms.com/docs/admin/overview). When enabled on your [Collections](https://payloadcms.com/docs/configuration/collections) and [Globals](https://payloadcms.com/docs/configuration/globals), it adds a new `meta` field group containing `title`, `description`, and `image` by default. Your front-end application can then use this data to render meta tags however your application requires. For example, you would inject a `title` tag into the `<head>` of your page using `meta.title` as its content.

As users are editing documents within the Admin Panel, they have the option to "auto-generate" these fields. When clicked, this plugin will execute your own custom functions that re-generate the title, description, and image. This way you can build your own SEO writing assistance directly into your application. For example, you could append your site name onto the page title, or use the document's excerpt field as the description, or even integrate with some third-party API to generate the image using AI.

To help you visualize what your page might look like in a search engine, a preview is rendered on the page just beneath the meta fields. This preview is updated in real-time as you edit your metadata. There are also visual indicators to help you write effective meta, such as a character counter for the title and description fields. You can even inject your own custom fields into the `meta` field group as your application requires, like `og:title` or `json-ld`. If you've ever used something like Yoast SEO, this plugin might feel very familiar.

This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-seo). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20seo&template=bug_report.md&title=plugin-seo%3A) with as much detail as possible.

[**Core features**](https://payloadcms.com/docs/plugins/seo#core-features)

- Adds a `meta` field group to every SEO-enabled collection or global
- Allows you to define custom functions to auto-generate metadata
- Displays hints and indicators to help content editor write effective meta
- Renders a snippet of what a search engine might display
- Extendable so you can define custom fields like `og:title` or `json-ld`
- Soon will support dynamic variable injection

[**Installation**](https://payloadcms.com/docs/plugins/seo#installation)

Install the plugin using any JavaScript package manager like [pnpm](https://pnpm.io/), [npm](https://npmjs.com/), or [Yarn](https://yarnpkg.com/):

1

pnpm add @payloadcms/plugin-seo

[**Basic Usage**](https://payloadcms.com/docs/plugins/seo#basic-usage)

In the `plugins` array of your [Payload Config](https://payloadcms.com/docs/configuration/overview), call the plugin with [options](https://payloadcms.com/docs/plugins/seo#options):

1

import{ buildConfig }from'payload';

2

import{ seoPlugin }from'@payloadcms/plugin-seo';

3

4

const config =buildConfig({

5

collections:\[\
\
\
{\
\
\
slug:'pages',\
\
\
fields:\[\]\
\
\
},\
\
\
{\
\
\
slug:'media',\
\
\
upload:{\
\
\
staticDir:// path to your static directory,\
\
\
},\
\
\
fields:\[\]\
\
\
}\
\
\
\],

18

plugins:\[\
\
\
seoPlugin({\
\
\
collections:\[\
\
\
'pages',\
\
\
\],\
\
\
uploadsCollection:'media',\
\
\
generateTitle:({ doc })=>\`Website.com — ${doc.title}\`,\
\
\
generateDescription:({ doc })=> doc.excerpt\
\
\
})\
\
\
\]

28

});

29

30

exportdefault config;

[**Options**](https://payloadcms.com/docs/plugins/seo#options) [**collections**](https://payloadcms.com/docs/plugins/seo#collections)

An array of collections slugs to enable SEO. Enabled collections receive a `meta` field which is an object of title, description, and image subfields.

[**globals**](https://payloadcms.com/docs/plugins/seo#globals)

An array of global slugs to enable SEO. Enabled globals receive a `meta` field which is an object of title, description, and image subfields.

[**fields**](https://payloadcms.com/docs/plugins/seo#fields)

A function that takes in the default fields via an object and expects an array of fields in return. You can use this to modify existing fields or add new ones.

1

// payload.config.ts

2

{

3

// ...

4

seoPlugin({

5

fields:({ defaultFields })=>\[\
\
\
...defaultFields,\
\
\
{\
\
\
name:'customField',\
\
\
type:'text',\
\
\
}\
\
\
\]

12

})

13

}

[**uploadsCollection**](https://payloadcms.com/docs/plugins/seo#uploadscollection)

Set the `uploadsCollection` to your application's upload-enabled collection slug. This is used to provide an `image` field on the `meta` field group.

[**tabbedUI**](https://payloadcms.com/docs/plugins/seo#tabbedui)

When the `tabbedUI` property is `true`, it appends an `SEO` tab onto your config using Payload's [Tabs Field](https://payloadcms.com/docs/fields/tabs). If your collection is not already tab-enabled, meaning the first field in your config is not of type `tabs`, then one will be created for you called `Content`. Defaults to `false`.

If you wish to continue to use top-level or sidebar fields with `tabbedUI`, you must not let the default `Content` tab get created for you (see the note above). Instead, you must define the first field of your config with type `tabs` and place all other fields adjacent to this one.

[**generateTitle**](https://payloadcms.com/docs/plugins/seo#generatetitle)

A function that allows you to return any meta title, including from the document's content.

1

// payload.config.ts

2

{

3

// ...

4

seoPlugin({

5

generateTitle:({ doc })=>\`Website.com — ${doc?.title}\`,

6

})

7

}

All "generate" functions receive the following arguments:

| Argument | Description |
| --- | --- |
| `collectionConfig` | The configuration of the collection. |
| `collectionSlug` | The slug of the collection. |
| `doc` | The data of the current document. |
| `docPermissions` | The permissions of the document. |
| `globalConfig` | The configuration of the global. |
| `globalSlug` | The slug of the global. |
| `hasPublishPermission` | Whether the user has permission to publish the document. |
| `hasSavePermission` | Whether the user has permission to save the document. |
| `id` | The ID of the document. |
| `initialData` | The initial data of the document. |
| `initialState` | The initial state of the document. |
| `locale` | The locale of the document. |
| `preferencesKey` | The preferences key of the document. |
| `publishedDoc` | The published document. |
| `req` | The Payload request object containing `user`, `payload`, `i18n`, etc. |
| `title` | The title of the document. |
| `versionsCount` | The number of versions of the document. |

[**generateDescription**](https://payloadcms.com/docs/plugins/seo#generatedescription)

A function that allows you to return any meta description, including from the document's content.

1

// payload.config.ts

2

{

3

// ...

4

seoPlugin({

5

generateDescription:({ doc })=> doc?.excerpt,

6

})

7

}

For a full list of arguments, see the [`generateTitle`](https://payloadcms.com/docs/plugins/seo#generatetitle) function.

[**generateImage**](https://payloadcms.com/docs/plugins/seo#generateimage)

A function that allows you to return any meta image, including from the document's content.

1

// payload.config.ts

2

{

3

// ...

4

seoPlugin({

5

generateImage:({ doc })=> doc?.featuredImage,

6

})

7

}

For a full list of arguments, see the [`generateTitle`](https://payloadcms.com/docs/plugins/seo#generatetitle) function.

[**generateURL**](https://payloadcms.com/docs/plugins/seo#generateurl)

A function called by the search preview component to display the actual URL of your page.

1

// payload.config.ts

2

{

3

// ...

4

seoPlugin({

5

generateURL:({ doc, collectionSlug })=>

6

\`https://yoursite.com/${collectionSlug}/${doc?.slug}\`,

7

})

8

}

For a full list of arguments, see the [`generateTitle`](https://payloadcms.com/docs/plugins/seo#generatetitle) function.

[**interfaceName**](https://payloadcms.com/docs/plugins/seo#interfacename)

Rename the meta group interface name that is generated for TypeScript and GraphQL.

1

// payload.config.ts

2

{

3

// ...

4

seoPlugin({

5

interfaceName:'customInterfaceNameSEO',

6

})

7

}

[**Direct use of fields**](https://payloadcms.com/docs/plugins/seo#direct-use-of-fields)

There is the option to directly import any of the fields from the plugin so that you can include them anywhere as needed.

You will still need to configure the plugin in the Payload Config in order to configure the generation functions. Since these fields are imported and used directly, they don't have access to the plugin config so they may need additional arguments to work the same way.

1

import{MetaDescriptionField,MetaImageField,MetaTitleField,OverviewField,PreviewField}from'@payloadcms/plugin-seo/fields'

2

3

// Used as fields

4

MetaImageField({

5

// the upload collection slug

6

relationTo:'media',

7

8

// if the \`generateImage\` function is configured

9

hasGenerateFn:true,

10

})

11

12

MetaDescriptionField({

13

// if the \`generateDescription\` function is configured

14

hasGenerateFn:true,

15

})

16

17

MetaTitleField({

18

// if the \`generateTitle\` function is configured

19

hasGenerateFn:true,

20

})

21

22

PreviewField({

23

// if the \`generateUrl\` function is configured

24

hasGenerateFn:true,

25

26

// field paths to match the target field for data

27

titlePath:'meta.title',

28

descriptionPath:'meta.description',

29

})

30

31

OverviewField({

32

// field paths to match the target field for data

33

titlePath:'meta.title',

34

descriptionPath:'meta.description',

35

imagePath:'meta.image',

36

})

Tip: You can override the length rules by changing the minLength and maxLength props on the fields. In the case of the OverviewField you can use `titleOverrides` and `descriptionOverrides` to override the length rules.

[**TypeScript**](https://payloadcms.com/docs/plugins/seo#typescript)

All types can be directly imported:

1

import type {

2

PluginConfig,

3

GenerateTitle,

4

GenerateDescription

5

GenerateURL

6

}from'@payloadcms/plugin-seo/types';

You can then pass the collections from your generated Payload types into the generation types, for example:

1

import type {Page}from'./payload-types.ts';

2

3

import type {GenerateTitle}from'@payloadcms/plugin-seo/types';

4

5

constgenerateTitle:GenerateTitle<Page> = async ({ doc, locale }) => {

6

return\`Website.com — ${doc?.title}\`

7

}

[**Examples**](https://payloadcms.com/docs/plugins/seo#examples)

The [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates) contains an official [Website Template](https://github.com/payloadcms/payload/tree/main/templates/website) and [E-commerce Template](https://github.com/payloadcms/payload/tree/main/templates/ecommere) which demonstrates exactly how to configure this plugin in Payload and implement it on your front-end.

[**Screenshots**](https://payloadcms.com/docs/plugins/seo#screenshots)

![image](https://user-images.githubusercontent.com/70709113/163850633-f3da5f8e-2527-4688-bc79-17233307a883.png)

[Next \\
**Multi-Tenant Plugin**](https://payloadcms.com/docs/plugins/multi-tenant)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Payload CMS Autosave
# Autosave

Extending on Payload's [Draft](https://payloadcms.com/docs/versions/drafts) functionality, you can configure your collections and globals to autosave changes as drafts, and publish only you're ready. The Admin UI will automatically adapt to autosaving progress at an interval that you define, and will store all autosaved changes as a new Draft version. Never lose your work - and publish changes to the live document only when you're ready.

Autosave relies on Versions and Drafts being enabled in order to function.

![Autosave Enabled](https://payloadcms.com/images/docs/autosave-enabled.png)

_If Autosave is enabled, drafts will be created automatically as the document is modified and the Admin UI adds an indicator describing when the document was last saved to the top right of the sidebar._

[**Options**](https://payloadcms.com/docs/versions/autosave#options)

Collections and Globals both support the same options for configuring autosave. You can either set `versions.drafts.autosave` to `true`, or pass an object to configure autosave properties.

| Drafts Autosave Options | Description |
| --- | --- |
| `interval` | Define an `interval` in milliseconds to automatically save progress while documents are edited. Document updates are "debounced" at this interval. Defaults to `800`. |

**Example config with versions, drafts, and autosave enabled:**

1

import type {CollectionConfig}from'payload'

2

3

exportconstPages:CollectionConfig={

4

slug:'pages',

5

access:{

6

read:({ req })=>{

7

// If there is a user logged in,

8

// let them retrieve all documents

9

if(req.user)returntrue

10

11

// If there is no user,

12

// restrict the documents that are returned

13

// to only those where \`\_status\` is equal to \`published\`

14

return{

15

\_status:{

16

equals:'published',

17

},

18

}

19

},

20

},

21

versions:{

22

drafts:{

23

autosave:true,

24

25

// Alternatively, you can specify an \`interval\`:

26

// autosave: {

27

// interval: 1500,

28

// },

29

},

30

},

31

//.. the rest of the Pages config here

32

}

[**Autosave API**](https://payloadcms.com/docs/versions/autosave#autosave-api)

When `autosave` is enabled, all `update` operations within Payload expose a new argument called `autosave`. When set to `true`, Payload will treat the incoming draft update as an `autosave`. This is primarily used by the Admin UI, but there may be some cases where you are building an app for your users and wish to implement `autosave` in your own app. To do so, use the `autosave` argument in your `update` operations.

[**How autosaves are stored**](https://payloadcms.com/docs/versions/autosave#how-autosaves-are-stored)

If we created a new version for each autosave, you'd quickly find a ton of autosaves that clutter up your `_versions` collection within the database. That would be messy quick because `autosave` is typically set to save a document at ~800ms intervals.

Instead of creating a new version each time a document is autosaved, Payload smartly only creates **one** autosave version, and then updates that specific version with each autosave performed. This makes sure that your versions remain nice and tidy.

[Next \\
**Uploads**](https://payloadcms.com/docs/upload/overview)

## UI Field Overview
# UI Field

The UI (user interface) Field gives you a ton of power to add your own React components directly into the [Admin Panel](https://payloadcms.com/docs/admin/overview), nested directly within your other fields. It has absolutely no effect on the data of your documents. It is presentational-only. Think of it as a way for you to "plug in" your own React components directly within your other fields, so you can provide your editors with new controls exactly where you want them to go.

With the UI Field, you can:

- Add a custom message or block of text within the body of an Edit View to describe the purpose of surrounding fields
- Add a "Refund" button to an Order's Edit View sidebar, which might make a fetch call to a custom `refund` endpoint
- Add a "view page" button into a Pages List View to give editors a shortcut to view a page on the frontend of the site
- Build a "clear cache" button or similar mechanism to manually clear caches of specific documents

To add a UI Field, set the `type` to `ui` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyUIField:Field={

4

// ...

5

type:'ui',

6

}

[**Config Options**](https://payloadcms.com/docs/fields/ui#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | A unique identifier for this field. |
| `label` | Human-readable label for this UI field. |
| `admin.components.Field` \\* | React component to be rendered for this field within the Edit View. [More](https://payloadcms.com/docs/fields/overview#field) |
| `admin.components.Cell` | React component to be rendered as a Cell within collection List views. [More](https://payloadcms.com/docs/fields/overview#cell) |
| `admin.disableListColumn` | Set `disableListColumn` to `true` to prevent the UI field from appearing in the list view column selector. |
| `custom` | Extension point for adding custom data (e.g. for plugins) |

_\\* An asterisk denotes that a property is required._

[**Example**](https://payloadcms.com/docs/fields/ui#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'myCustomUIField',// required\
\
\
type:'ui',// required\
\
\
admin:{\
\
\
components:{\
\
\
Field:'/path/to/MyCustomUIField',\
\
\
Cell:'/path/to/MyCustomUICell',\
\
\
},\
\
\
},\
\
\
},\
\
\
\],

17

}

[Next \\
**Upload Field**](https://payloadcms.com/docs/fields/upload)

## Collection Configuration Guide
# Collection Configs

A Collection is a group of records, called Documents, that all share a common schema. You can define as many Collections as your application needs. Each Document in a Collection is stored in the [Database](https://payloadcms.com/docs/database/overview) based on the [Fields](https://payloadcms.com/docs/fields/overview) that you define, and automatically generates a [Local API](https://payloadcms.com/docs/local-api/overview), [REST API](https://payloadcms.com/docs/rest-api/overview), and [GraphQL API](https://payloadcms.com/docs/graphql/overview) used to manage your Documents.

Collections are also used to achieve [Authentication](https://payloadcms.com/docs/authentication/overview) in Payload. By defining a Collection with `auth` options, that Collection receives additional operations to support user authentication.

Collections are the primary way to structure recurring data in your application, such as users, products, pages, posts, and other types of content that you might want to manage. Each Collection can have its own unique [Access Control](https://payloadcms.com/docs/access-control/overview), [Hooks](https://payloadcms.com/docs/hooks/overview), [Admin Options](https://payloadcms.com/docs/configuration/collections#admin-options), and more.

To define a Collection Config, use the `collection` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

collections:\[\
\
\
// Your Collections go here\
\
\
\],

8

})

**Tip:** If your Collection is only ever meant to contain a single Document, consider using a [Global](https://payloadcms.com/docs/configuration/globals) instead.

[**Config Options**](https://payloadcms.com/docs/configuration/collections#config-options)

It's often best practice to write your Collections in separate files and then import them into the main [Payload Config](https://payloadcms.com/docs/configuration/overview).

Here is what a simple Collection Config might look like:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPosts:CollectionConfig={

4

slug:'posts',

5

fields:\[\
\
\
{\
\
\
name:'title',\
\
\
type:'text',\
\
\
}\
\
\
\]

11

}

**Reminder:** For more complex examples, see the [Templates](https://github.com/payloadcms/payload/tree/main/templates) and [Examples](https://github.com/payloadcms/payload/tree/main/examples) directories in the Payload repository.

The following options are available:

| Option | Description |
| --- | --- |
| `admin` | The configuration options for the Admin Panel. [More details](https://payloadcms.com/docs/configuration/collections#admin-options). |
| `access` | Provide Access Control functions to define exactly who should be able to do what with Documents in this Collection. [More details](https://payloadcms.com/docs/access-control/collections). |
| `auth` | Specify options if you would like this Collection to feature authentication. [More details](https://payloadcms.com/docs/authentication/overview). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `disableDuplicate` | When true, do not show the "Duplicate" button while editing documents within this Collection and prevent `duplicate` from all APIs. |
| `defaultSort` | Pass a top-level field to sort by default in the Collection List View. Prefix the name of the field with a minus symbol ("-") to sort in descending order. Multiple fields can be specified by using a string array. |
| `dbName` | Custom table or Collection name depending on the Database Adapter. Auto-generated from slug if not defined. |
| `endpoints` | Add custom routes to the REST API. Set to `false` to disable routes. [More details](https://payloadcms.com/docs/rest-api/overview#custom-endpoints). |
| `fields` \\* | Array of field types that will determine the structure and functionality of the data stored within this Collection. [More details](https://payloadcms.com/docs/fields/overview). |
| `graphQL` | Manage GraphQL-related properties for this collection. [More](https://payloadcms.com/docs/configuration/collections#graphql) |
| `hooks` | Entry point for Hooks. [More details](https://payloadcms.com/docs/hooks/overview#collection-hooks). |
| `labels` | Singular and plural labels for use in identifying this Collection throughout Payload. Auto-generated from slug if not defined. |
| `lockDocuments` | Enables or disables document locking. By default, document locking is enabled. Set to an object to configure, or set to `false` to disable locking. [More details](https://payloadcms.com/docs/admin/locked-documents). |
| `slug` \\* | Unique, URL-friendly string that will act as an identifier for this Collection. |
| `timestamps` | Set to false to disable documents' automatically generated `createdAt` and `updatedAt` timestamps. |
| `typescript` | An object with property `interface` as the text used in schema generation. Auto-generated from slug if not defined. |
| `upload` | Specify options if you would like this Collection to support file uploads. For more, consult the [Uploads](https://payloadcms.com/docs/upload/overview) documentation. |
| `versions` | Set to true to enable default options, or configure with object properties. [More details](https://payloadcms.com/docs/versions/overview#collection-config). |
| `defaultPopulate` | Specify which fields to select when this Collection is populated from another document. [More Details](https://payloadcms.com/docs/queries/select#defaultpopulate-collection-config-property). |

_\\* An asterisk denotes that a property is required._

[**Fields**](https://payloadcms.com/docs/configuration/collections#fields)

Fields define the schema of the Documents within a Collection. To learn more, go to the [Fields](https://payloadcms.com/docs/fields/overview) documentation.

[**Access Control**](https://payloadcms.com/docs/configuration/collections#access-control)

[Collection Access Control](https://payloadcms.com/docs/access-control/overview) determines what a user can and cannot do with any given Document within a Collection. To learn more, go to the [Access Control](https://payloadcms.com/docs/access-control/overview) documentation.

[**Hooks**](https://payloadcms.com/docs/configuration/collections#hooks)

[Collection Hooks](https://payloadcms.com/docs/hooks/collections) allow you to tie into the lifecycle of your Documents so you can execute your own logic during specific events. To learn more, go to the [Hooks](https://payloadcms.com/docs/hooks/overview) documentation.

[**Admin Options**](https://payloadcms.com/docs/configuration/collections#admin-options)

The behavior of Collections within the [Admin Panel](https://payloadcms.com/docs/admin/overview) can be fully customized to fit the needs of your application. This includes grouping or hiding their navigation links, adding [Custom Components](https://payloadcms.com/docs/custom-components/overview), selecting which fields to display in the List View, and more.

To configure Admin Options for Collections, use the `admin` property in your Collection Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollection:CollectionConfig={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The following options are available:

| Option | Description |
| --- | --- |
| `group` | Text or localization object used to group Collection and Global links in the admin navigation. Set to `false` to hide the link from the navigation while keeping its routes accessible. |
| `hidden` | Set to true or a function, called with the current user, returning true to exclude this Collection from navigation and admin routing. |
| `hooks` | Admin-specific hooks for this Collection. [More details](https://payloadcms.com/docs/hooks/collections). |
| `useAsTitle` | Specify a top-level field to use for a document title throughout the Admin Panel. If no field is defined, the ID of the document is used as the title. A field with `virtual: true` cannot be used as the title. |
| `description` | Text to display below the Collection label in the List View to give editors more information. Alternatively, you can use the `admin.components.Description` to render a React component. [More details](https://payloadcms.com/docs/configuration/collections#custom-components). |
| `defaultColumns` | Array of field names that correspond to which columns to show by default in this Collection's List View. |
| `hideAPIURL` | Hides the "API URL" meta field while editing documents within this Collection. |
| `enableRichTextLink` | The [Rich Text](https://payloadcms.com/docs/fields/rich-text) field features a `Link` element which allows for users to automatically reference related documents within their rich text. Set to `true` by default. |
| `enableRichTextRelationship` | The [Rich Text](https://payloadcms.com/docs/fields/rich-text) field features a `Relationship` element which allows for users to automatically reference related documents within their rich text. Set to `true` by default. |
| `meta` | Page metadata overrides to apply to this Collection within the Admin Panel. [More details](https://payloadcms.com/docs/admin/metadata). |
| `preview` | Function to generate preview URLs within the Admin Panel that can point to your app. [More details](https://payloadcms.com/docs/admin/preview). |
| `livePreview` | Enable real-time editing for instant visual feedback of your front-end application. [More details](https://payloadcms.com/docs/live-preview/overview). |
| `components` | Swap in your own React components to be used within this Collection. [More details](https://payloadcms.com/docs/configuration/collections#custom-components). |
| `listSearchableFields` | Specify which fields should be searched in the List search view. [More details](https://payloadcms.com/docs/configuration/collections#list-searchable-fields). |
| `pagination` | Set pagination-specific options for this Collection. [More details](https://payloadcms.com/docs/configuration/collections#pagination). |
| `baseListFilter` | You can define a default base filter for this collection's List view, which will be merged into any filters that the user performs. |

[**Custom Components**](https://payloadcms.com/docs/configuration/collections#custom-components)

Collections can set their own [Custom Components](https://payloadcms.com/docs/custom-components/overview) which only apply to Collection-specific UI within the [Admin Panel](https://payloadcms.com/docs/admin/overview). This includes elements such as the Save Button, or entire layouts such as the Edit View.

To override Collection Components, use the `admin.components` property in your Collection Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMyCollection:CollectionConfig={

4

// ...

5

admin:{

6

components:{

7

// ...

8

},

9

},

10

}

The following options are available:

| Option | Description |
| --- | --- |
| `afterList` | An array of components to inject _after_ the built-in List View. [More details](https://payloadcms.com/docs/custom-components/list-view#afterlist). |
| `afterListTable` | An array of components to inject _after_ the built-in List View's table. [More details](https://payloadcms.com/docs/custom-components/list-view#afterlisttable). |
| `beforeList` | An array of components to inject _before_ the built-in List View. [More details](https://payloadcms.com/docs/custom-components/list-view#beforelist). |
| `beforeListTable` | An array of components to inject _before_ the built-in List View's table. [More details](https://payloadcms.com/docs/custom-components/list-view#beforelisttable). |
| `listMenuItems` | An array of components to render within a menu next to the List Controls (after the Columns and Filters options) |
| `Description` | A component to render below the Collection label in the List View. An alternative to the `admin.description` property. [More details](https://payloadcms.com/docs/custom-components/list-view#description). |
| `edit` | Override specific components within the Edit View. [More details](https://payloadcms.com/docs/configuration/collections#edit-view-options). |
| `views` | Override or create new views within the Admin Panel. [More details](https://payloadcms.com/docs/custom-components/custom-views). |

[**Edit View Options**](https://payloadcms.com/docs/configuration/collections#edit-view-options)

1

import type {CollectionCOnfig}from'payload'

2

3

exportconstMyCollection:CollectionCOnfig={

4

// ...

5

admin:{

6

components:{

7

edit:{

8

// ...

9

},

10

},

11

},

12

}

The following options are available:

| Option | Description |
| --- | --- |
| `SaveButton` | Replace the default Save Button within the Edit View. [Drafts](https://payloadcms.com/docs/versions/drafts) must be disabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#save-button). |
| `SaveDraftButton` | Replace the default Save Draft Button within the Edit View. [Drafts](https://payloadcms.com/docs/versions/drafts) must be enabled and autosave must be disabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#save-draft-button). |
| `PublishButton` | Replace the default Publish Button within the Edit View. [Drafts](https://payloadcms.com/docs/versions/drafts) must be enabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#publish-button). |
| `PreviewButton` | Replace the default Preview Button within the Edit View. [Preview](https://payloadcms.com/docs/admin/preview) must be enabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#preview-button). |
| `Upload` | Replace the default Upload component within the Edit View. [Upload](https://payloadcms.com/docs/upload/overview) must be enabled. [More details](https://payloadcms.com/docs/custom-components/edit-view#upload). |

**Note:** For details on how to build Custom Components, see [Building Custom Components](https://payloadcms.com/docs/custom-components/overview#building-custom-components).

[**Pagination**](https://payloadcms.com/docs/configuration/collections#pagination)

All Collections receive their own List View which displays a paginated list of documents that can be sorted and filtered. The pagination behavior of the List View can be customized on a per-Collection basis, and uses the same [Pagination](https://payloadcms.com/docs/queries/pagination) API that Payload provides.

To configure pagination options, use the `admin.pagination` property in your Collection Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPosts:CollectionConfig={

4

// ...

5

admin:{

6

pagination:{

7

defaultLimit:10,

8

limits:\[10,20,50\],

9

},

10

},

11

}

The following options are available:

| Option | Description |
| --- | --- |
| `defaultLimit` | Integer that specifies the default per-page limit that should be used. Defaults to 10. |
| `limits` | Provide an array of integers to use as per-page options for admins to choose from in the List View. |

[**List Searchable Fields**](https://payloadcms.com/docs/configuration/collections#list-searchable-fields)

In the List View, there is a "search" box that allows you to quickly find a document through a simple text search. By default, it searches on the ID field. If defined, the `admin.useAsTitle` field is used. Or, you can explicitly define which fields to search based on the needs of your application.

To define which fields should be searched, use the `admin.listSearchableFields` property in your Collection Config:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPosts:CollectionConfig={

4

// ...

5

admin:{

6

listSearchableFields:\['title','slug'\],

7

},

8

}

**Tip:** If you are adding `listSearchableFields`, make sure you index each of these fields so your admin queries can remain performant.

[**GraphQL**](https://payloadcms.com/docs/configuration/collections#graphql)

You can completely disable GraphQL for this collection by passing `graphQL: false` to your collection config. This will completely disable all queries, mutations, and types from appearing in your GraphQL schema.

You can also pass an object to the collection's `graphQL` property, which allows you to define the following properties:

| Option | Description |
| --- | --- |
| `singularName` | Override the "singular" name that will be used in GraphQL schema generation. |
| `pluralName` | Override the "plural" name that will be used in GraphQL schema generation. |
| `disableQueries` | Disable all GraphQL queries that correspond to this collection by passing `true`. |
| `disableMutations` | Disable all GraphQL mutations that correspond to this collection by passing `true`. |

[**TypeScript**](https://payloadcms.com/docs/configuration/collections#typescript)

You can import types from Payload to help make writing your Collection configs easier and type-safe. There are two main types that represent the Collection Config, `CollectionConfig` and `SanitizeCollectionConfig`.

The `CollectionConfig` type represents a raw Collection Config in its full form, where only the bare minimum properties are marked as required. The `SanitizedCollectionConfig` type represents a Collection Config after it has been fully sanitized. Generally, this is only used internally by Payload.

1

import type {CollectionConfig,SanitizedCollectionConfig}from'payload'

[Next \\
**Global Configs**](https://payloadcms.com/docs/configuration/globals)

## Payload CMS Configuration
# The Payload Config

Payload is a _config-based_, code-first CMS and application framework. The Payload Config is central to everything that Payload does, allowing for deep configuration of your application through a simple and intuitive API. The Payload Config is a fully-typed JavaScript object that can be infinitely extended upon.

Everything from your [Database](https://payloadcms.com/docs/database/overview) choice to the appearance of the [Admin Panel](https://payloadcms.com/docs/admin/overview) is fully controlled through the Payload Config. From here you can define [Fields](https://payloadcms.com/docs/fields/overview), add [Localization](https://payloadcms.com/docs/configuration/localization), enable [Authentication](https://payloadcms.com/docs/authentication/overview), configure [Access Control](https://payloadcms.com/docs/access-control/overview), and so much more.

The Payload Config is a `payload.config.ts` file typically located in the root of your project:

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// Your config goes here

5

})

The Payload Config is strongly typed and ties directly into Payload's TypeScript codebase. This means your IDE (such as VSCode) will provide helpful information like type-ahead suggestions while you write your config.

**Tip:** The location of your Payload Config can be customized. [More details](https://payloadcms.com/docs/configuration/overview#customizing-the-config-location).

[**Config Options**](https://payloadcms.com/docs/configuration/overview#config-options)

To author your Payload Config, first determine which [Database](https://payloadcms.com/docs/database/overview) you'd like to use, then use [Collections](https://payloadcms.com/docs/configuration/collections) or [Globals](https://payloadcms.com/docs/configuration/globals) to define the schema of your data through [Fields](https://payloadcms.com/docs/fields/overview).

Here is one of the simplest possible Payload configs:

1

import{ buildConfig }from'payload'

2

import{ mongooseAdapter }from'@payloadcms/db-mongodb'

3

4

exportdefaultbuildConfig({

5

secret: process.env.PAYLOAD\_SECRET,

6

db:mongooseAdapter({

7

url: process.env.DATABASE\_URI,

8

}),

9

collections:\[\
\
\
{\
\
\
slug:'pages',\
\
\
fields:\[\
\
\
{\
\
\
name:'title',\
\
\
type:'text'\
\
\
}\
\
\
\]\
\
\
}\
\
\
\],

20

})

**Note:** For more complex examples, see the [Templates](https://github.com/payloadcms/payload/tree/main/templates) and [Examples](https://github.com/payloadcms/payload/tree/main/examples) directories in the Payload repository.

The following options are available:

| Option | Description |
| --- | --- |
| `admin` | The configuration options for the Admin Panel, including Custom Components, Live Preview, etc. [More details](https://payloadcms.com/docs/admin/overview#admin-options). |
| `bin` | Register custom bin scripts for Payload to execute. [More Details](https://payloadcms.com/docs/configuration/overview#custom-bin-scripts). |
| `editor` | The Rich Text Editor which will be used by `richText` fields. [More details](https://payloadcms.com/docs/rich-text/overview). |
| `db` \\* | The Database Adapter which will be used by Payload. [More details](https://payloadcms.com/docs/database/overview). |
| `serverURL` | A string used to define the absolute URL of your app. This includes the protocol, for example `https://example.com`. No paths allowed, only protocol, domain and (optionally) port. |
| `collections` | An array of Collections for Payload to manage. [More details](https://payloadcms.com/docs/configuration/collections). |
| `compatibility` | Compatibility flags for earlier versions of Payload. [More details](https://payloadcms.com/docs/configuration/overview#compatibility-flags). |
| `globals` | An array of Globals for Payload to manage. [More details](https://payloadcms.com/docs/configuration/globals). |
| `cors` | Cross-origin resource sharing (CORS) is a mechanism that accept incoming requests from given domains. You can also customize the `Access-Control-Allow-Headers` header. [More details](https://payloadcms.com/docs/configuration/overview#cors). |
| `localization` | Opt-in to translate your content into multiple locales. [More details](https://payloadcms.com/docs/configuration/localization). |
| `logger` | Logger options, logger options with a destination stream, or an instantiated logger instance. [More details](https://getpino.io/#/docs/api?id=options). |
| `loggingLevels` | An object to override the level to use in the logger for Payload's errors. |
| `graphQL` | Manage GraphQL-specific functionality, including custom queries and mutations, query complexity limits, etc. [More details](https://payloadcms.com/docs/graphql/overview#graphql-options). |
| `cookiePrefix` | A string that will be prefixed to all cookies that Payload sets. |
| `csrf` | A whitelist array of URLs to allow Payload to accept cookies from. [More details](https://payloadcms.com/docs/authentication/cookies#csrf-attacks). |
| `defaultDepth` | If a user does not specify `depth` while requesting a resource, this depth will be used. [More details](https://payloadcms.com/docs/queries/depth). |
| `defaultMaxTextLength` | The maximum allowed string length to be permitted application-wide. Helps to prevent malicious public document creation. |
| `maxDepth` | The maximum allowed depth to be permitted application-wide. This setting helps prevent against malicious queries. Defaults to `10`. [More details](https://payloadcms.com/docs/queries/depth). |
| `indexSortableFields` | Automatically index all sortable top-level fields in the database to improve sort performance and add database compatibility for Azure Cosmos and similar. |
| `upload` | Base Payload upload configuration. [More details](https://payloadcms.com/docs/upload/overview#payload-wide-upload-options). |
| `routes` | Control the routing structure that Payload binds itself to. [More details](https://payloadcms.com/docs/admin/overview#root-level-routes). |
| `email` | Configure the Email Adapter for Payload to use. [More details](https://payloadcms.com/docs/email/overview). |
| `onInit` | A function that is called immediately following startup that receives the Payload instance as its only argument. |
| `debug` | Enable to expose more detailed error information. |
| `telemetry` | Disable Payload telemetry by passing `false`. [More details](https://payloadcms.com/docs/configuration/overview#telemetry). |
| `hooks` | An array of Root Hooks. [More details](https://payloadcms.com/docs/hooks/overview). |
| `plugins` | An array of Plugins. [More details](https://payloadcms.com/docs/plugins/overview). |
| `endpoints` | An array of Custom Endpoints added to the Payload router. [More details](https://payloadcms.com/docs/rest-api/overview#custom-endpoints). |
| `custom` | Extension point for adding custom data (e.g. for plugins). |
| `i18n` | Internationalization configuration. Pass all i18n languages you'd like the admin UI to support. Defaults to English-only. [More details](https://payloadcms.com/docs/configuration/i18n). |
| `secret` \\* | A secure, unguessable string that Payload will use for any encryption workflows - for example, password salt / hashing. |
| `sharp` | If you would like Payload to offer cropping, focal point selection, and automatic media resizing, install and pass the Sharp module to the config here. |
| `typescript` | Configure TypeScript settings here. [More details](https://payloadcms.com/docs/configuration/overview#typescript). |

_\\* An asterisk denotes that a property is required._

**Note:** Some properties are removed from the client-side bundle. [More details](https://payloadcms.com/docs/custom-components/overview#accessing-the-payload-config).

[**Typescript Config**](https://payloadcms.com/docs/configuration/overview#typescript-config)

Payload exposes a variety of TypeScript settings that you can leverage. These settings are used to auto-generate TypeScript interfaces for your [Collections](https://payloadcms.com/docs/configuration/collections) and [Globals](https://payloadcms.com/docs/configuration/globals), and to ensure that Payload uses your [Generated Types](https://payloadcms.com/docs/typescript/overview) for all [Local API](https://payloadcms.com/docs/local-api/overview) methods.

To customize the TypeScript settings, use the `typescript` property in your Payload Config:

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

typescript:{

6

// ...

7

}

8

})

The following options are available:

| Option | Description |
| --- | --- |
| `autoGenerate` | By default, Payload will auto-generate TypeScript interfaces for all collections and globals that your config defines. Opt out by setting `typescript.autoGenerate: false`. [More details](https://payloadcms.com/docs/typescript/overview). |
| `declare` | By default, Payload adds a `declare` block to your generated types, which makes sure that Payload uses your generated types for all Local API methods. Opt out by setting `typescript.declare: false`. |
| `outputFile` | Control the output path and filename of Payload's auto-generated types by defining the `typescript.outputFile` property to a full, absolute path. |

[**Config Location**](https://payloadcms.com/docs/configuration/overview#config-location)

For Payload command-line scripts, we need to be able to locate your Payload Config. We'll check a variety of locations for the presence of `payload.config.ts` by default, including:

1. The root current working directory
2. The `compilerOptions` in your `tsconfig`\*
3. The `dist` directory\*

_\\* Config location detection is different between development and production environments. See below for more details._

**Important:** Ensure your `tsconfig.json` is properly configured for Payload to auto-detect your config location. If if does not exist, or does not specify the proper `compilerOptions`, Payload will default to the current working directory.

**Development Mode**

In development mode, if the configuration file is not found at the root, Payload will attempt to read your `tsconfig.json`, and attempt to find the config file specified in the `rootDir`:

1

{

2

// ...

3

"compilerOptions":{

4

"rootDir":"src"

5

}

6

}

**Production Mode**

In production mode, Payload will first attempt to find the config file in the `outDir` of your `tsconfig.json`, and if not found, will fallback to the `rootDir` directory:

1

{

2

// ...

3

"compilerOptions":{

4

"outDir":"dist",

5

"rootDir":"src"

6

}

7

}

If none was in either location, Payload will finally check the `dist` directory.

[**Customizing the Config Location**](https://payloadcms.com/docs/configuration/overview#customizing-the-config-location)

In addition to the above automated detection, you can specify your own location for the Payload Config. This can be useful in situations where your config is not in a standard location, or you wish to switch between multiple configurations. To do this, Payload exposes an [Environment Variable](https://payloadcms.com/docs/configuration/environment-vars) to bypass all automatic config detection.

To use a custom config location, set the `PAYLOAD_CONFIG_PATH` environment variable:

1

{

2

"scripts":{

3

"payload":"PAYLOAD\_CONFIG\_PATH=/path/to/custom-config.ts payload"

4

}

5

}

**Tip:** `PAYLOAD_CONFIG_PATH` can be either an absolute path, or path relative to your current working directory.

[**Telemetry**](https://payloadcms.com/docs/configuration/overview#telemetry)

Payload collects **completely anonymous** telemetry data about general usage. This data is super important to us and helps us accurately understand how we're growing and what we can do to build the software into everything that it can possibly be. The telemetry that we collect also help us demonstrate our growth in an accurate manner, which helps us as we seek investment to build and scale our team. If we can accurately demonstrate our growth, we can more effectively continue to support Payload as free and open-source software. To opt out of telemetry, you can pass `telemetry: false` within your Payload Config.

For more information about what we track, take a look at our [privacy policy](https://payloadcms.com/privacy).

[**Cross-origin resource sharing (CORS)**](https://payloadcms.com/docs/configuration/overview#cors)

Cross-origin resource sharing (CORS) can be configured with either a whitelist array of URLS to allow CORS requests from, a wildcard string ( `*`) to accept incoming requests from any domain, or a object with the following properties:

| Option | Description |
| --- | --- |
| `origins` | Either a whitelist array of URLS to allow CORS requests from, or a wildcard string ( `'*'`) to accept incoming requests from any domain. |
| `headers` | A list of allowed headers that will be appended in `Access-Control-Allow-Headers`. |

Here's an example showing how to allow incoming requests from any domain:

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

cors:'\*'

6

})

Here's an example showing how to append a new header ( `x-custom-header`) in `Access-Control-Allow-Headers`:

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

cors:{

6

origins:\['http://localhost:3000'\]

7

headers:\['x-custom-header'\]

8

}

9

})

[**TypeScript**](https://payloadcms.com/docs/configuration/overview#typescript)

You can import types from Payload to help make writing your config easier and type-safe. There are two main types that represent the Payload Config, `Config` and `SanitizedConfig`.

The `Config` type represents a raw Payload Config in its full form. Only the bare minimum properties are marked as required. The `SanitizedConfig` type represents a Payload Config after it has been fully sanitized. Generally, this is only used internally by Payload.

1

import type {Config,SanitizedConfig}from'payload'

[**Server vs. Client**](https://payloadcms.com/docs/configuration/overview#server-vs-client)

The Payload Config only lives on the server and is not allowed to contain any client-side code. That way, you can load up the Payload Config in any server environment or standalone script, without having to use Bundlers or Node.js loaders to handle importing client-only modules (e.g. scss files or React Components) without any errors.

Behind the curtains, the Next.js-based Admin Panel generates a ClientConfig, which strips away any server-only code and enriches the config with React Components.

[**Compatibility flags**](https://payloadcms.com/docs/configuration/overview#compatibility-flags)

The Payload Config can accept compatibility flags for running the newest versions but with older databases. You should only use these flags if you need to, and should confirm that you need to prior to enabling these flags.

`allowLocalizedWithinLocalized`

Payload localization works on a field-by-field basis. As you can nest fields within other fields, you could potentially nest a localized field within a localized field—but this would be redundant and unnecessary. There would be no reason to define a localized field within a localized parent field, given that the entire data structure from the parent field onward would be localized.

By default, Payload will remove the `localized: true` property from sub-fields if a parent field is localized. Set this compatibility flag to `true` only if you have an existing Payload MongoDB database from pre-3.0, and you have nested localized fields that you would like to maintain without migrating.

[**Custom bin scripts**](https://payloadcms.com/docs/configuration/overview#custom-bin-scripts)

Using the `bin` configuration property, you can inject your own scripts to `npx payload`. Example for `pnpm payload seed`:

Step 1: create `seed.ts` file in the same folder with `payload.config.ts` with:

1

import type {SanitizedConfig}from'payload'

2

3

importpayloadfrom'payload'

4

5

// Script must define a "script" function export that accepts the sanitized config

6

exportconstscript=async(config:SanitizedConfig)=>{

7

await payload.init({ config })

8

await payload.create({collection:'pages',data:{title:'my title'}})

9

payload.logger.info('Succesffully seeded!')

10

process.exit(0)

11

}

Step 2: add the `seed` script to `bin`:

1

exportdefaultbuildConfig({

2

bin:\[\
\
\
{\
\
\
scriptPath: path.resolve(dirname,'seed.ts'),\
\
\
key:'seed',\
\
\
},\
\
\
\],

8

})

Now you can run the command using:

1

pnpm payload seed

[Next \\
**Collection Configs**](https://payloadcms.com/docs/configuration/collections)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Sentry Plugin
# Sentry Plugin

![https://www.npmjs.com/package/@payloadcms/plugin-sentry](https://img.shields.io/npm/v/@payloadcms/plugin-sentry)

This plugin allows you to integrate [Sentry](https://sentry.io/) seamlessly with your [Payload](https://github.com/payloadcms/payload) application.

[**What is Sentry?**](https://payloadcms.com/docs/plugins/sentry#what-is-sentry)

Sentry is a powerful error tracking and performance monitoring tool that helps developers identify, diagnose, and resolve issues in their applications.

Sentry does smart stuff with error data to make bugs easier to find and fix. - [sentry.io](https://sentry.io/)

This multi-faceted software offers a range of features that will help you manage errors with greater ease and ultimately ensure your application is running smoothly:

[**Core Features**](https://payloadcms.com/docs/plugins/sentry#core-features)

- **Error Tracking**: Instantly captures and logs errors as they occur in your application
- **Performance Monitoring**: Tracks application performance to identify slowdowns and bottlenecks
- **Detailed Reports**: Provides comprehensive insights into errors, including stack traces and context
- **Alerts and Notifications**: Send and customize event-triggered notifications
- **Issue Grouping, Filtering and Search**: Automatically groups similar errors, and allows filtering and searching issues by custom criteria
- **Breadcrumbs**: Records user actions and events leading up to an error
- **Integrations**: Connects with various tools and services for enhanced workflow and issue management

This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-sentry). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20seo&template=bug_report.md&title=plugin-sentry%3A) with as much detail as possible.

[**Installation**](https://payloadcms.com/docs/plugins/sentry#installation)

Install the plugin using any JavaScript package manager like [pnpm](https://pnpm.io/), [npm](https://npmjs.com/), or [Yarn](https://yarnpkg.com/):

1

pnpm add @payloadcms/plugin-sentry

[**Sentry for Next.js setup**](https://payloadcms.com/docs/plugins/sentry#sentry-for-nextjs-setup)

This plugin requires to complete the [Sentry + Next.js setup](https://docs.sentry.io/platforms/javascript/guides/nextjs/) before.

You can use either the [automatic setup](https://docs.sentry.io/platforms/javascript/guides/nextjs/#install) with the installation wizard:

1

npx @sentry/wizard@latest -i nextjs

Or the [Manual Setup](https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/)

[**Basic Usage**](https://payloadcms.com/docs/plugins/sentry#basic-usage)

In the `plugins` array of your [Payload Config](https://payloadcms.com/docs/configuration/overview), call the plugin and pass in your Sentry DSN as an option.

1

import{ buildConfig }from'payload'

2

import{ sentryPlugin }from'@payloadcms/plugin-sentry'

3

import{Pages,Media}from'./collections'

4

5

import\*asSentryfrom'@sentry/nextjs'

6

7

const config =buildConfig({

8

collections:\[Pages,Media\],

9

plugins:\[\
\
\
sentryPlugin({\
\
\
Sentry,\
\
\
}),\
\
\
\],

14

})

15

16

exportdefault config

[**Options**](https://payloadcms.com/docs/plugins/sentry#options)

- `Sentry` : Sentry \| **required**

The `Sentry` instance

Make sure to complete the [Sentry for Next.js Setup](https://payloadcms.com/docs/plugins/sentry#sentry-for-nextjs-setup) before.

- `enabled`: boolean \| optional

Set to false to disable the plugin. Defaults to `true`.

- `context`: `(args: ContextArgs) => Partial<ScopeContext> | Promise<Partial<ScopeContext>>`

Pass additional [contextual data](https://docs.sentry.io/platforms/javascript/enriching-events/context/#passing-context-directly) to Sentry

- `captureErrors`: number\[\] \| optional

By default, `Sentry.errorHandler` will capture only errors with a status code of 500 or higher. To capture additional error codes, pass the values as numbers in an array.

[**Example**](https://payloadcms.com/docs/plugins/sentry#example)

Configure any of these options by passing them to the plugin:

1

import{ buildConfig }from'payload'

2

import{ sentryPlugin }from'@payloadcms/plugin-sentry'

3

4

import\*asSentryfrom'@sentry/nextjs'

5

6

import{Pages,Media}from'./collections'

7

8

const config =buildConfig({

9

collections:\[Pages,Media\],

10

plugins:\[\
\
\
sentryPlugin({\
\
\
options:{\
\
\
captureErrors:\[400,403\],\
\
\
context:({ defaultContext, req })=>{\
\
\
return{\
\
\
...defaultContext,\
\
\
tags:{\
\
\
locale: req.locale,\
\
\
},\
\
\
}\
\
\
},\
\
\
debug:true,\
\
\
},\
\
\
Sentry,\
\
\
}),\
\
\
\],

27

})

28

29

exportdefault config

[**TypeScript**](https://payloadcms.com/docs/plugins/sentry#typescript)

All types can be directly imported:

1

import{PluginOptions}from'@payloadcms/plugin-sentry'

[Next \\
**Search Plugin**](https://payloadcms.com/docs/plugins/search)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Payload Cookie Authentication
# Cookie Strategy

Payload offers the ability to [Authenticate](https://payloadcms.com/docs/authentication/overview) via HTTP-only cookies. These can be read from the responses of `login`, `logout`, `refresh`, and `me` auth operations.

**Tip:** You can access the logged-in user from within [Access Control](https://payloadcms.com/docs/access-control/overview) and [Hooks](https://payloadcms.com/docs/hooks/overview) through the `req.user` argument. [More details](https://payloadcms.com/docs/authentication/token-data).

[**Automatic browser inclusion**](https://payloadcms.com/docs/authentication/cookies#automatic-browser-inclusion)

Modern browsers automatically include `http-only` cookies when making requests directly to URLs—meaning that if you are running your API on `https://example.com`, and you have logged in and visit `https://example.com/test-page`, your browser will automatically include the Payload authentication cookie for you.

[**HTTP Authentication**](https://payloadcms.com/docs/authentication/cookies#http-authentication)

However, if you use `fetch` or similar APIs to retrieve Payload resources from its REST or GraphQL API, you must specify to include credentials (cookies).

Fetch example, including credentials:

1

const response =awaitfetch('http://localhost:3000/api/pages',{

2

credentials:'include',

3

})

4

5

const pages =await response.json()

For more about including cookies in requests from your app to your Payload API, [read the MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Sending_a_request_with_credentials_included).

**Tip:** To make sure you have a Payload cookie set properly in your browser after logging in, you can use the browsers Developer Tools > Application > Cookies > \[your-domain-here\]. The Developer tools will still show HTTP-only cookies.

[**CSRF Attacks**](https://payloadcms.com/docs/authentication/cookies#csrf-attacks)

CSRF (cross-site request forgery) attacks are common and dangerous. By using an HTTP-only cookie, Payload removes many XSS vulnerabilities, however, CSRF attacks can still be possible.

For example, let's say you have a popular app `https://payload-finances.com` that allows users to manage finances, send and receive money. As Payload is using HTTP-only cookies, that means that browsers automatically will include cookies when sending requests to your domain - **no matter what page created the request**.

So, if a user of `https://payload-finances.com` is logged in and is browsing around on the internet, they might stumble onto a page with malicious intent. Let's look at an example:

1

// malicious-intent.com

2

// makes an authenticated request as on your behalf

3

4

const maliciousRequest =awaitfetch(\`https://payload-finances.com/api/me\`,{

5

credentials:'include'

6

}).then(res=>await res.json())

In this scenario, if your cookie was still valid, malicious-intent.com would be able to make requests like the one above on your behalf. This is a CSRF attack.

[**CSRF Prevention**](https://payloadcms.com/docs/authentication/cookies#csrf-prevention)

Define domains that your trust and are willing to accept Payload HTTP-only cookie based requests from. Use the `csrf` option on the base Payload Config to do this:

1

// payload.config.ts

2

3

import{ buildConfig }from'payload'

4

5

const config =buildConfig({

6

serverURL:'https://my-payload-instance.com',

7

csrf:\[\
\
\
// whitelist of domains to allow cookie auth from\
\
\
'https://your-frontend-app.com',\
\
\
'https://your-other-frontend-app.com',\
\
\
// \`config.serverURL\` is added by default if defined\
\
\
\],

13

collections:\[\
\
\
// collections here\
\
\
\],

16

})

17

18

exportdefault config

[**Cross domain authentication**](https://payloadcms.com/docs/authentication/cookies#cross-domain-authentication)

If your frontend is on a different domain than your Payload API then you will not be able to use HTTP-only cookies for authentication by default as they will be considered third-party cookies by the browser. There are a few strategies to get around this:

[**1\. Use subdomains**](https://payloadcms.com/docs/authentication/cookies#1-use-subdomains)

Cookies can cross subdomains without being considered third party cookies, for example if your API is at api.example.com then you can authenticate from example.com.

[**2\. Configure cookies**](https://payloadcms.com/docs/authentication/cookies#2-configure-cookies)

If option 1 isn't possible, then you can get around this limitation by [configuring your cookies](https://payloadcms.com/docs/authentication/overview#config-options) on your authentication collection to achieve the following setup:

1

SameSite:None// allows the cookie to cross domains

2

Secure:true// ensures its sent over HTTPS only

3

HttpOnly:true// ensures its not accessible via client side JavaScript

Configuration example:

1

{

2

slug:'users',

3

auth:{

4

cookies:{

5

sameSite:'None',

6

secure:true,

7

}

8

},

9

fields:\[\
\
\
// your auth fields here\
\
\
\]

12

},

If you're configuring [cors](https://payloadcms.com/docs/production/preventing-abuse#cross-origin-resource-sharing-cors) in your Payload config, you won't be able to use a wildcard anymore, you'll need to specify the list of allowed domains.

**Good to know:** Setting up `secure: true` will not work if you're developing on `http://localhost` or any non-https domain. For local development you should conditionally set this to `false` based on the environment.

[Next \\
**API Key Strategy**](https://payloadcms.com/docs/authentication/api-keys)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Email Functionality Overview
# Email Functionality

[**Introduction**](https://payloadcms.com/docs/email/overview#introduction)

Payload has a few email adapters that can be imported to enable email functionality. The [@payloadcms/email-nodemailer](https://www.npmjs.com/package/@payloadcms/email-nodemailer) package will be the package most will want to install. This package provides an easy way to use [Nodemailer](https://nodemailer.com/) for email and won't get in your way for those already familiar.

The email adapter should be passed into the `email` property of the Payload Config. This will allow Payload to send [auth-related emails](https://payloadcms.com/docs/authentication/email) for things like password resets, new user verification, and any other email sending needs you may have.

[**Configuration**](https://payloadcms.com/docs/email/overview#configuration) [**Default Configuration**](https://payloadcms.com/docs/email/overview#default-configuration)

When email is not needed or desired, Payload will log a warning on startup notifying that email is not configured. A warning message will also be logged on any attempt to send an email.

[**Email Adapter**](https://payloadcms.com/docs/email/overview#email-adapter)

An email adapter will require at least the following fields:

| Option | Description |
| --- | --- |
| `defaultFromName` \\* | The name part of the From field that will be seen on the delivered email |
| `defaultFromAddress` \\* | The email address part of the From field that will be used when delivering email |

[**Official Email Adapters**](https://payloadcms.com/docs/email/overview#official-email-adapters)

| Name | Package | Description |
| --- | --- | --- |
| Nodemailer | [@payloadcms/email-nodemailer](https://www.npmjs.com/package/@payloadcms/email-nodemailer) | Use any [Nodemailer transport](https://nodemailer.com/transports), including SMTP, Resend, SendGrid, and more. This was provided by default in Payload 2.x. This is the easiest migration path. |
| Resend | [@payloadcms/email-resend](https://www.npmjs.com/package/@payloadcms/email-resend) | Resend email via their REST API. This is preferred for serverless platforms such as Vercel because it is much more lightweight than the nodemailer adapter. |

[**Nodemailer Configuration**](https://payloadcms.com/docs/email/overview#nodemailer-configuration)

| Option | Description |
| --- | --- |
| `transport` | The Nodemailer transport object for when you want to do it yourself, not needed when transportOptions is set |
| `transportOptions` | An object that configures the transporter that Payload will create. For all the available options see the [Nodemailer documentation](https://nodemailer.com/) or see the examples below |

[**Use SMTP**](https://payloadcms.com/docs/email/overview#use-smtp)

Simple Mail Transfer Protocol (SMTP) options can be passed in using the `transportOptions` object on the `email` options. See the [Nodemailer SMTP documentation](https://nodemailer.com/smtp/) for more information, including details on when `secure` should and should not be set to `true`.

**Example email options using SMTP:**

1

import{ buildConfig }from'payload'

2

import{ nodemailerAdapter }from'@payloadcms/email-nodemailer'

3

4

exportdefaultbuildConfig({

5

email:nodemailerAdapter({

6

defaultFromAddress:'info@payloadcms.com',

7

defaultFromName:'Payload',

8

// Nodemailer transportOptions

9

transportOptions:{

10

host: process.env.SMTP\_HOST,

11

port:587,

12

auth:{

13

user: process.env.SMTP\_USER,

14

pass: process.env.SMTP\_PASS,

15

},

16

},

17

}),

18

})

**Example email options using nodemailer.createTransport:**

1

import{ buildConfig }from'payload'

2

import{ nodemailerAdapter }from'@payloadcms/email-nodemailer'

3

importnodemailerfrom'nodemailer'

4

5

exportdefaultbuildConfig({

6

email:nodemailerAdapter({

7

defaultFromAddress:'info@payloadcms.com',

8

defaultFromName:'Payload',

9

// Any Nodemailer transport can be used

10

transport: nodemailer.createTransport({

11

host: process.env.SMTP\_HOST,

12

port:587,

13

auth:{

14

user: process.env.SMTP\_USER,

15

pass: process.env.SMTP\_PASS,

16

},

17

}),

18

}),

19

})

**Custom Transport:**

You also have the ability to bring your own nodemailer transport. This is an example of using the SendGrid nodemailer transport.

1

import{ buildConfig }from'payload'

2

import{ nodemailerAdapter }from'@payloadcms/email-nodemailer'

3

importnodemailerSendgridfrom'nodemailer-sendgrid'

4

5

6

exportdefaultbuildConfig({

7

email:nodemailerAdapter({

8

defaultFromAddress:'info@payloadcms.com',

9

defaultFromName:'Payload',

10

transportOptions:nodemailerSendgrid({

11

apiKey: process.env.SENDGRID\_API\_KEY,

12

}),

13

}),

14

})

During development, if you pass nothing to `nodemailerAdapter`, it will use the [ethereal.email](https://ethereal.email/) service.

This will log the ethereal.email details to console on startup.

1

import{ nodemailerAdapter }from'@payloadcms/email-nodemailer'

2

3

exportdefaultbuildConfig({

4

email:nodemailerAdapter(),

5

})

[**Resend Configuration**](https://payloadcms.com/docs/email/overview#resend-configuration)

The Resend adapter requires an API key to be passed in the options. This can be found in the Resend dashboard. This is the preferred package if you are deploying on Vercel because this is much more lightweight than the Nodemailer adapter.

| Option | Description |
| --- | --- |
| apiKey | The API key for the Resend service. |

1

import{ buildConfig }from'payload'

2

import{ resendAdapter }from'@payloadcms/email-resend'

3

4

exportdefaultbuildConfig({

5

email:resendAdapter({

6

defaultFromAddress:'dev@payloadcms.com',

7

defaultFromName:'Payload CMS',

8

apiKey: process.env.RESEND\_API\_KEY\|\|'',

9

}),

10

})

[**Sending Mail**](https://payloadcms.com/docs/email/overview#sending-mail)

With a working transport you can call it anywhere you have access to Payload by calling `payload.sendEmail(message)`. The `message` will contain the `to`, `subject` and `html` or `text` for the email being sent. Other options are also available and can be seen in the sendEmail args. Support for these will depend on the adapter being used.

1

// Example of sending an email

2

const email =await payload.sendEmail({

3

to:'test@example.com',

4

subject:'This is a test email',

5

text:'This is my message body',

6

})

[**Using multiple mail providers**](https://payloadcms.com/docs/email/overview#using-multiple-mail-providers)

Payload supports the use of a single transporter of email, but there is nothing stopping you from having more. Consider a use case where sending bulk email is handled differently than transactional email and could be done using a [hook](https://payloadcms.com/docs/hooks/overview).

[Next \\
**Jobs Queue**](https://payloadcms.com/docs/jobs-queue/overview)

## Tabs Field Overview
# Tabs Field

The Tabs Field is presentational-only and only affects the [Admin Panel](https://payloadcms.com/docs/admin/overview) (unless a tab is named). By using it, you can place fields within a nice layout component that separates certain sub-fields by a tabbed interface.

![Shows a tabs field used to separate Hero and Page layout in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/tabs.png)

Tabs field type used to separate Hero fields from Page Layout

To add a Tabs Field, set the `type` to `tabs` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyTabsField:Field={

4

// ...

5

type:'tabs',

6

tabs:\[\
\
\
// ...\
\
\
\]

9

}

[**Config Options**](https://payloadcms.com/docs/fields/tabs#config-options)

| Option | Description |
| --- | --- |
| `tabs` \\* | Array of tabs to render within this Tabs field. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/overview#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |

[**Tab-specific Config**](https://payloadcms.com/docs/fields/tabs#tab-specific-config)

Each tab must have either a `name` or `label` and the required `fields` array. You can also optionally pass a `description` to render within each individual tab.

| Option | Description |
| --- | --- |
| `name` | Groups field data into an object when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `label` | The label to render on the tab itself. Required when name is undefined, defaults to name converted to words. |
| `fields` \\* | The fields to render within this tab. |
| `description` | Optionally render a description within this tab to describe the contents of the tab itself. |
| `interfaceName` | Create a top level, reusable [Typescript interface](https://payloadcms.com/docs/typescript/generating-types#custom-field-interfaces) & [GraphQL type](https://payloadcms.com/docs/graphql/graphql-schema#custom-field-schemas). ( `name` must be present) |
| `virtual` | Provide `true` to disable field in the database ( `name` must be present). See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |

_\\* An asterisk denotes that a property is required._

[**Example**](https://payloadcms.com/docs/fields/tabs#example)

`collections/ExampleCollection.ts`

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
type:'tabs',// required\
\
\
tabs:\[\
\
\
// required\
\
\
{\
\
\
label:'Tab One Label',// required\
\
\
description:'This will appear within the tab above the fields.',\
\
\
fields:\[\
\
\
// required\
\
\
{\
\
\
name:'someTextField',\
\
\
type:'text',\
\
\
required:true,\
\
\
},\
\
\
\],\
\
\
},\
\
\
{\
\
\
name:'tabTwo',\
\
\
label:'Tab Two Label',// required\
\
\
interfaceName:'TabTwo',// optional (\`name\` must be present)\
\
\
fields:\[\
\
\
// required\
\
\
{\
\
\
name:'numberField',// accessible via tabTwo.numberField\
\
\
type:'number',\
\
\
required:true,\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],\
\
\
},\
\
\
\],

38

}

[Next \\
**Text Field**](https://payloadcms.com/docs/fields/text)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Payload Cloud Teams
# Cloud Teams

Within Payload Cloud, the team management feature offers you the ability to manage your organization, team members, billing, and subscription settings.

![Payload Cloud Team Settings](https://payloadcms.com/images/docs/cloud/team-settings.jpg)

_A screenshot of the Team Settings page._

[**Members**](https://payloadcms.com/docs/cloud/teams#members)

Each team has members that can interact with your projects. You can invite multiple people to your team and each individual can belong to more than one team. You can assign them either `owner` or `user` permissions. Owners are able to make admin-only changes, such as deleting projects, and editing billing information.

[**Adding Members**](https://payloadcms.com/docs/cloud/teams#adding-members)

To add a new member to your team, visit your Team’s Settings page, and click “Invite Teammate”. You can then add their email address, and assign their role. Press “Save” to send the invitations, which will send an email to the invited team member where they can create a new account.

[**Billing**](https://payloadcms.com/docs/cloud/teams#billing)

Users can update billing settings and subscriptions for any teams where they are designated as an `owner`. To make updates to the team’s payment methods, visit the Billing page under the Team Settings tab. You can add new cards, delete cards, and set a payment method as a default. The default payment method will be used in the event that another payment method fails.

[**Subscriptions**](https://payloadcms.com/docs/cloud/teams#subscriptions)

From the Subscriptions page, a team owner can see all current plans for their team. From here, you can see the price of each plan, if there is an active trial, and when you will be billed next.

[**Invoices**](https://payloadcms.com/docs/cloud/teams#invoices)

The Invoices page will you show you the invoices for your account, as well as the status on their payment.

[Next \\
**Cloud Projects**](https://payloadcms.com/docs/cloud/projects)

## Payload Cloud Configuration
# Project Configuration

[**Select your plan**](https://payloadcms.com/docs/cloud/configuration#select-your-plan)

Once you have created a project, you will need to select your plan. This will determine the resources that are allocated to your project and the features that are available to you.

Note: All Payload Cloud teams that deploy a project require a card on file. This helps us prevent fraud and abuse on our platform. If you select a plan with a free trial, you will not be charged until your trial period is over. We’ll remind you 7 days before your trial ends and you can cancel anytime.

[**Project Details**](https://payloadcms.com/docs/cloud/configuration#project-details)

| Option | Description |
| --- | --- |
| **Region** | Select the region closest to your audience. This will ensure the fastest communication between your data and your client. |
| **Project Name** | A name for your project. You can change this at any time. |
| **Project Slug** | Choose a unique slug to identify your project. This needs to be unique for your team and you can change it any time. |
| **Team** | Select the team you want to create the project under. If this is your first project, a personal team will be created for you automatically. You can modify your team settings and invite new members at any time from the Team Settings page. |

[**Build Settings**](https://payloadcms.com/docs/cloud/configuration#build-settings)

If you are deploying a new project from a template, the following settings will be automatically configured for you. If you are using your own repository, you need to make sure your build settings are accurate for your project to deploy correctly.

| Option | Description |
| --- | --- |
| **Root Directory** | The folder where your `package.json` file lives. |
| **Install Command** | The command used to install your modules, for example: `yarn install` or `npm install` |
| **Build Command** | The command used to build your application, for example: `yarn build` or `npm run build` |
| **Serve Command** | The command used to serve your application, for example: `yarn serve` or `npm run serve` |
| **Branch to Deploy** | Select the branch of your repository that you want to deploy from. This is the branch that will be used to build your project when you commit new changes. |
| **Default Domain** | Set a default domain for your project. This must be unique and you will not able to change it. You can always add a custom domain later in your project settings. |

[**Environment Variables**](https://payloadcms.com/docs/cloud/configuration#environment-variables)

Any of the features in Payload Cloud that require environment variables will automatically be provided to your application. If your app requires any custom environment variables, you can set them here.

Note: For security reasons, any variables you wish to provide to the [Admin Panel](https://payloadcms.com/docs/admin/overview) must be prefixed with `NEXT_PUBLIC_`.  Learn more [here](https://payloadcms.com/docs/configuration/environment-vars).

[**Payment**](https://payloadcms.com/docs/cloud/configuration#payment)

Payment methods can be set per project and can be updated any time. You can use team’s default payment method, or add a new one. Modify your payment methods in your Project settings / Team settings.

**Note:** All Payload Cloud teams that deploy a project require a card on file. This helps us prevent fraud and abuse on our platform. If you select a plan with a free trial, you will not be charged until your trial period is over. We’ll remind you 7 days before your trial ends and you can cancel anytime.

[Next \\
**Cloud Teams**](https://payloadcms.com/docs/cloud/teams)

## Payload CMS Context
# Context

The `context` object is used to share data across different Hooks. This persists throughout the entire lifecycle of a request and is available within every Hook. By setting properties to `req.context`, you can effectively share logic across multiple Hooks.

[**When To Use Context**](https://payloadcms.com/docs/hooks/context#when-to-use-context)

Context gives you a way forward on otherwise difficult problems such as:

1. **Passing data between Hooks**: Needing data in multiple Hooks from a 3rd party API, it could be retrieved and used in `beforeChange` and later used again in an `afterChange` hook without having to fetch it twice.
2. **Preventing infinite loops**: Calling `payload.update()` on the same document that triggered an `afterChange` hook will create an infinite loop, control the flow by assigning a no-op condition to context
3. **Passing data to local API**: Setting values on the `req.context` and pass it to `payload.create()` you can provide additional data to hooks without adding extraneous fields.
4. **Passing data between hooks and middleware or custom endpoints**: Hooks could set context across multiple collections and then be used in a final `postMiddleware`.

[**How To Use Context**](https://payloadcms.com/docs/hooks/context#how-to-use-context)

Let's see examples on how context can be used in the first two scenarios mentioned above:

[**Passing Data Between Hooks**](https://payloadcms.com/docs/hooks/context#passing-data-between-hooks)

To pass data between hooks, you can assign values to context in an earlier hook in the lifecycle of a request and expect it the context in a later hook.

For example:

1

import type {CollectionConfig}from'payload'

2

3

constCustomer:CollectionConfig={

4

slug:'customers',

5

hooks:{

6

beforeChange:\[\
\
\
async({ context, data })=>{\
\
\
// assign the customerData to context for use later\
\
\
context.customerData=awaitfetchCustomerData(data.customerID)\
\
\
return{\
\
\
...data,\
\
\
// some data we use here\
\
\
name: context.customerData.name,\
\
\
}\
\
\
},\
\
\
\],

17

afterChange:\[\
\
\
async({ context, doc, req })=>{\
\
\
// use context.customerData without needing to fetch it again\
\
\
if(context.customerData.contacted===false){\
\
\
createTodo('Call Customer', context.customerData)\
\
\
}\
\
\
},\
\
\
\],

25

},

26

fields:\[\
\
\
/\\* ... \*/\
\
\
\],

29

}

[**Preventing Infinite Loops**](https://payloadcms.com/docs/hooks/context#preventing-infinite-loops)

Let's say you have an `afterChange` hook, and you want to do a calculation inside the hook (as the document ID needed for the calculation is available in the `afterChange` hook, but not in the `beforeChange` hook). Once that's done, you want to update the document with the result of the calculation.

Bad example:

1

import type {CollectionConfig}from'payload'

2

3

constCustomer:CollectionConfig={

4

slug:'customers',

5

hooks:{

6

afterChange:\[\
\
\
async({ doc, req })=>{\
\
\
await req.payload.update({\
\
\
// DANGER: updating the same slug as the collection in an afterChange will create an infinite loop!\
\
\
collection:'customers',\
\
\
id: doc.id,\
\
\
data:{\
\
\
...(awaitfetchCustomerData(data.customerID)),\
\
\
},\
\
\
})\
\
\
},\
\
\
\],

18

},

19

fields:\[\
\
\
/\\* ... \*/\
\
\
\],

22

}

Instead of the above, we need to tell the `afterChange` hook to not run again if it performs the update (and thus not update itself again). We can solve that with context.

Fixed example:

1

import type {CollectionConfig}from'payload'

2

3

constMyCollection:CollectionConfig={

4

slug:'slug',

5

hooks:{

6

afterChange:\[\
\
\
async({ context, doc, req })=>{\
\
\
// return if flag was previously set\
\
\
if(context.triggerAfterChange===false){\
\
\
return\
\
\
}\
\
\
await req.payload.update({\
\
\
collection: contextHooksSlug,\
\
\
id: doc.id,\
\
\
data:{\
\
\
...(awaitfetchCustomerData(data.customerID)),\
\
\
},\
\
\
context:{\
\
\
// set a flag to prevent from running again\
\
\
triggerAfterChange:false,\
\
\
},\
\
\
})\
\
\
},\
\
\
\],

25

},

26

fields:\[\
\
\
/\\* ... \*/\
\
\
\],

29

}

[**TypeScript**](https://payloadcms.com/docs/hooks/context#typescript)

The default TypeScript interface for `context` is `{ [key: string]: unknown }`. If you prefer a more strict typing in your project or when authoring plugins for others, you can override this using the `declare` syntax.

This is known as "type augmentation", a TypeScript feature which allows us to add types to existing types. Simply put this in any `.ts` or `.d.ts` file:

1

import{RequestContextasOriginalRequestContext}from'payload'

2

3

declare module 'payload'{

4

// Create a new interface that merges your additional fields with the original one

5

exportinterfaceRequestContextextendsOriginalRequestContext{

6

myObject?: string

7

// ...

8

}

9

}

This will add the property `myObject` with a type of string to every context object. Make sure to follow this example correctly, as type augmentation can mess up your types if you do it wrong.

[Next \\
**Local API**](https://payloadcms.com/docs/local-api/overview)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## File Upload Overview
# Uploads

Payload provides everything you need to enable file upload, storage, and management directly on your server—including extremely powerful file [access control](https://payloadcms.com/docs/upload/overview#access-control).

![Shows an Upload enabled collection in the Payload Admin Panel](https://payloadcms.com/images/docs/upload-admin.jpg)

Admin Panel screenshot depicting a Media Collection with Upload enabled

**Here are some common use cases of Uploads:**

- Creating a "Media Library" that contains images for use throughout your site or app
- Building a Gated Content library where users need to sign up to gain access to downloadable assets like ebook PDFs, whitepapers, etc.
- Storing publicly available, downloadable assets like software, ZIP files, MP4s, etc.

**By simply enabling Upload functionality on a Collection, Payload will automatically transform your Collection into a robust file management / storage solution. The following modifications will be made:**

1. `filename`, `mimeType`, and `filesize` fields will be automatically added to your Collection. Optionally, if you pass `imageSizes` to your Collection's Upload config, a [`sizes`](https://payloadcms.com/docs/upload/overview#image-sizes) array will also be added containing auto-resized image sizes and filenames.
2. The Admin Panel will modify its built-in `List` component to show a thumbnail for each upload within the List View
3. The Admin Panel will modify its `Edit` view(s) to add a new set of corresponding Upload UI which will allow for file upload
4. The `create`, `update`, and `delete` Collection operations will be modified to support file upload, re-upload, and deletion

[**Enabling Uploads**](https://payloadcms.com/docs/upload/overview#enabling-uploads)

Every Payload Collection can opt-in to supporting Uploads by specifying the `upload` property on the Collection's config to either `true` or to an object containing `upload` options.

**Tip:**

A common pattern is to create a **"media"** collection and enable **upload** on that collection.

1

import type {CollectionConfig}from'payload'

2

3

exportconstMedia:CollectionConfig={

4

slug:'media',

5

upload:{

6

staticDir:'media',

7

imageSizes:\[\
\
\
{\
\
\
name:'thumbnail',\
\
\
width:400,\
\
\
height:300,\
\
\
position:'centre',\
\
\
},\
\
\
{\
\
\
name:'card',\
\
\
width:768,\
\
\
height:1024,\
\
\
position:'centre',\
\
\
},\
\
\
{\
\
\
name:'tablet',\
\
\
width:1024,\
\
\
// By specifying \`undefined\` or leaving a height undefined,\
\
\
// the image will be sized to a certain width,\
\
\
// but it will retain its original aspect ratio\
\
\
// and calculate a height automatically.\
\
\
height:undefined,\
\
\
position:'centre',\
\
\
},\
\
\
\],

31

adminThumbnail:'thumbnail',

32

mimeTypes:\['image/\*'\],

33

},

34

fields:\[\
\
\
{\
\
\
name:'alt',\
\
\
type:'text',\
\
\
},\
\
\
\],

40

}

[**Collection Upload Options**](https://payloadcms.com/docs/upload/overview#collection-upload-options)

_An asterisk denotes that an option is required._

| Option | Description |
| --- | --- |
| `adminThumbnail` | Set the way that the [Admin Panel](https://payloadcms.com/docs/admin/overview) will display thumbnails for this Collection. [More](https://payloadcms.com/docs/upload/overview#admin-thumbnails) |
| `bulkUpload` | Allow users to upload in bulk from the list view, default is true |
| `cacheTags` | Set to `false` to disable the cache tag set in the UI for the admin thumbnail component. Useful for when CDNs don't allow certain cache queries. |
| `crop` | Set to `false` to disable the cropping tool in the [Admin Panel](https://payloadcms.com/docs/admin/overview). Crop is enabled by default. [More](https://payloadcms.com/docs/upload/overview#crop-and-focal-point-selector) |
| `disableLocalStorage` | Completely disable uploading files to disk locally. [More](https://payloadcms.com/docs/upload/overview#disabling-local-upload-storage) |
| `displayPreview` | Enable displaying preview of the uploaded file in Upload fields related to this Collection. Can be locally overridden by `displayPreview` option in Upload field. [More](https://payloadcms.com/docs/fields/upload#config-options). |
| `externalFileHeaderFilter` | Accepts existing headers and returns the headers after filtering or modifying. |
| `filesRequiredOnCreate` | Mandate file data on creation, default is true. |
| `filenameCompoundIndex` | Field slugs to use for a compound index instead of the default filename index. |
| `focalPoint` | Set to `false` to disable the focal point selection tool in the [Admin Panel](https://payloadcms.com/docs/admin/overview). The focal point selector is only available when `imageSizes` or `resizeOptions` are defined. [More](https://payloadcms.com/docs/upload/overview#crop-and-focal-point-selector) |
| `formatOptions` | An object with `format` and `options` that are used with the Sharp image library to format the upload file. [More](https://sharp.pixelplumbing.com/api-output#toformat) |
| `handlers` | Array of Request handlers to execute when fetching a file, if a handler returns a Response it will be sent to the client. Otherwise Payload will retrieve and send back the file. |
| `imageSizes` | If specified, image uploads will be automatically resized in accordance to these image sizes. [More](https://payloadcms.com/docs/upload/overview#image-sizes) |
| `mimeTypes` | Restrict mimeTypes in the file picker. Array of valid mimetypes or mimetype wildcards [More](https://payloadcms.com/docs/upload/overview#mimetypes) |
| `pasteURL` | Controls whether files can be uploaded from remote URLs by pasting them into the Upload field. **Enabled by default.** Accepts `false` to disable or an object with an `allowList` of valid remote URLs. [More](https://payloadcms.com/docs/upload/overview#uploading-files-from-remote-urls) |
| `resizeOptions` | An object passed to the the Sharp image library to resize the uploaded file. [More](https://sharp.pixelplumbing.com/api-resize) |
| `staticDir` | The folder directory to use to store media in. Can be either an absolute path or relative to the directory that contains your config. Defaults to your collection slug |
| `trimOptions` | An object passed to the the Sharp image library to trim the uploaded file. [More](https://sharp.pixelplumbing.com/api-resize#trim) |
| `withMetadata` | If specified, appends metadata to the output image file. Accepts a boolean or a function that receives `metadata` and `req`, returning a boolean. |
| `hideFileInputOnCreate` | Set to `true` to prevent the admin UI from showing file inputs during document creation, useful for programmatic file generation. |
| `hideRemoveFile` | Set to `true` to prevent the admin UI having a way to remove an existing file while editing. |

[**Payload-wide Upload Options**](https://payloadcms.com/docs/upload/overview#payload-wide-upload-options)

Upload options are specifiable on a Collection by Collection basis, you can also control app wide options by passing your base Payload Config an `upload` property containing an object supportive of all `Busboy` configuration options.

| Option | Description |
| --- | --- |
| `abortOnLimit` | A boolean that, if `true`, returns HTTP 413 if a file exceeds the file size limit. If `false`, the file is truncated. Defaults to `false`. |
| `createParentPath` | Set to `true` to automatically create a directory path when moving files from a temporary directory or buffer. Defaults to `false`. |
| `debug` | A boolean that turns upload process logging on if `true`, or off if `false`. Useful for troubleshooting. Defaults to `false`. |
| `limitHandler` | A function which is invoked if the file is greater than configured limits. |
| `parseNested` | Set to `true` to turn `req.body` and `req.files` into nested structures. By default `req.body` and `req.files` are flat objects. Defaults to `false`. |
| `preserveExtension` | Preserves file extensions with the `safeFileNames` option. Limits file names to 3 characters if `true` or a custom length if a `number`, trimming from the start of the extension. |
| `responseOnLimit` | A `string` that is sent in the Response to a client if the file size limit is exceeded when used with `abortOnLimit`. |
| `safeFileNames` | Set to `true` to strip non-alphanumeric characters except dashes and underscores. Can also be set to a regex to determine what to strip. Defaults to `false`. |
| `tempFileDir` | A `string` path to store temporary files used when the `useTempFiles` option is set to `true`. Defaults to `'./tmp'`. |
| `uploadTimeout` | A `number` that defines how long to wait for data before aborting, specified in milliseconds. Set to `0` to disable timeout checks. Defaults to `60000`. |
| `uriDecodeFileNames` | Set to `true` to apply uri decoding to file names. Defaults to `false`. |
| `useTempFiles` | Set to `true` to store files to a temporary directory instead of in RAM, reducing memory usage for large files or many files. |

[Click here](https://github.com/mscdex/busboy#api) for more documentation about what you can control with `Busboy`.

A common example of what you might want to customize within Payload-wide Upload options would be to increase the allowed `fileSize` of uploads sent to Payload:

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

collections:\[\
\
\
{\
\
\
slug:'media',\
\
\
fields:\[\
\
\
{\
\
\
name:'alt',\
\
\
type:'text',\
\
\
},\
\
\
\],\
\
\
upload:true,\
\
\
},\
\
\
\],

16

upload:{

17

limits:{

18

fileSize:5000000,// 5MB, written in bytes

19

},

20

},

21

})

[**Custom filename via hooks**](https://payloadcms.com/docs/upload/overview#custom-filename-via-hooks)

You can customize the filename before it's uploaded to the server by using a `beforeOperation` hook.

1

beforeOperation:\[\
\
\
({ req, operation })=>{\
\
\
if((operation ==='create'\|\| operation ==='update')&& req.file){\
\
\
req.file.name='test.jpg'\
\
\
}\
\
\
},\
\
\
\],

The `req.file` object will have additional information about the file, such as mimeType and extension, and you also have full access to the file data itself. The filename from here will also be threaded to image sizes if they're enabled.

[**Image Sizes**](https://payloadcms.com/docs/upload/overview#image-sizes)

If you specify an array of `imageSizes` to your `upload` config, Payload will automatically crop and resize your uploads to fit each of the sizes specified by your config.

The [Admin Panel](https://payloadcms.com/docs/admin/overview) will also automatically display all available files, including width, height, and file size, for each of your uploaded files.

Behind the scenes, Payload relies on [`sharp`](https://sharp.pixelplumbing.com/api-resize#resize) to perform its image resizing. You can specify additional options for `sharp` to use while resizing your images.

Note that for image resizing to work, `sharp` must be specified in your [Payload Config](https://payloadcms.com/docs/configuration/overview). This is configured by default if you created your Payload project with `create-payload-app`. See `sharp` in [Config Options](https://payloadcms.com/docs/configuration/overview#config-options).

[**Accessing the resized images in hooks**](https://payloadcms.com/docs/upload/overview#accessing-the-resized-images-in-hooks)

All auto-resized images are exposed to be re-used in hooks and similar via an object that is bound to `req.payloadUploadSizes`.

The object will have keys for each size generated, and each key will be set equal to a buffer containing the file data.

[**Handling Image Enlargement**](https://payloadcms.com/docs/upload/overview#handling-image-enlargement)

When an uploaded image is smaller than the defined image size, we have 3 options:

`withoutEnlargement: undefined | false | true`

1. `undefined` \[default\]: uploading images with smaller width AND height than the image size will return null
2. `false`: always enlarge images to the image size
3. `true`: if the image is smaller than the image size, return the original image

**Note:**

By default, the image size will return NULL when the uploaded image is smaller than the defined image size. Use the `withoutEnlargement` prop to change this.

[**Custom file name per size**](https://payloadcms.com/docs/upload/overview#custom-file-name-per-size)

Each image size supports a `generateImageName` function that can be used to generate a custom file name for the resized image. This function receives the original file name, the resize name, the extension, height and width as arguments.

1

{

2

name:'thumbnail',

3

width:400,

4

height:300,

5

generateImageName:({ height, sizeName, extension, width })=>{

6

return\`custom-${sizeName}-${height}-${width}.${extension}\`

7

},

8

}

[**Crop and Focal Point Selector**](https://payloadcms.com/docs/upload/overview#crop-and-focal-point-selector)

This feature is only available for image file types.

Setting `crop: false` and `focalPoint: false` in your Upload config will be disable the respective selector in the [Admin Panel](https://payloadcms.com/docs/admin/overview).

Image cropping occurs before any resizing, the resized images will therefore be generated from the cropped image ( **not** the original image).

If no resizing options are specified ( `imageSizes` or `resizeOptions`), the focal point selector will not be displayed.

[**Disabling Local Upload Storage**](https://payloadcms.com/docs/upload/overview#disabling-local-upload-storage)

If you are using a plugin to send your files off to a third-party file storage host or CDN, like Amazon S3 or similar, you may not want to store your files locally at all. You can prevent Payload from writing files to disk by specifying `disableLocalStorage: true` on your collection's upload config.

**Note:**

This is a fairly advanced feature. If you do disable local file storage, by default, your admin panel's thumbnails will be broken as you will not have stored a file. It will be totally up to you to use either a plugin or your own hooks to store your files in a permanent manner, as well as provide your own admin thumbnail using **upload.adminThumbnail**.

[**Admin Thumbnails**](https://payloadcms.com/docs/upload/overview#admin-thumbnails)

You can specify how Payload retrieves admin thumbnails for your upload-enabled Collections with one of the following:

1. `adminThumbnail` as a **string**, equal to one of your provided image size names.

1

import type {CollectionConfig}from'payload'

2

3

exportconstMedia:CollectionConfig={

4

slug:'media',

5

upload:{

6

adminThumbnail:'small',

7

imageSizes:\[\
\
\
{\
\
\
name:'small',\
\
\
fit:'cover',\
\
\
height:300,\
\
\
width:900,\
\
\
},\
\
\
{\
\
\
name:'large',\
\
\
fit:'cover',\
\
\
height:600,\
\
\
width:1800,\
\
\
}\
\
\
\]

21

}

22

}

1. `adminThumbnail` as a **function** that takes the document's data and sends back a full URL to load the thumbnail.

1

import type {CollectionConfig}from'payload'

2

3

exportconstMedia:CollectionConfig={

4

slug:'media',

5

upload:{

6

adminThumbnail:({ doc })=>\`https://google.com/custom-path-to-file/${doc.filename}\`,

7

}

8

}

[**MimeTypes**](https://payloadcms.com/docs/upload/overview#mimetypes)

Specifying the `mimeTypes` property can restrict what files are allowed from the user's file picker. This accepts an array of strings, which can be any valid mimetype or mimetype wildcards

Some example values are: `image/*`, `audio/*`, `video/*`, `image/png`, `application/pdf`

**Example mimeTypes usage:**

1

import type {CollectionConfig}from'payload'

2

3

exportconstMedia:CollectionConfig={

4

slug:'media',

5

upload:{

6

mimeTypes:\['image/\*','application/pdf'\],

7

},

8

}

[**Uploading Files**](https://payloadcms.com/docs/upload/overview#uploading-files)

**Important:**

Uploading files is currently only possible through the REST and Local APIs due to how GraphQL works. It's difficult and fairly nonsensical to support uploading files through GraphQL.

To upload a file, use your collection's [`create`](https://payloadcms.com/docs/rest-api/overview#collections) endpoint. Send it all the data that your Collection requires, as well as a `file` key containing the file that you'd like to upload.

Send your request as a `multipart/form-data` request, using [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) if possible.

1

const fileInput =document.querySelector('#your-file-input');

2

const formData =newFormData();

3

4

formData.append('file', fileInput.files\[0\]);

5

6

fetch('api/:upload-slug',{

7

method:'POST',

8

body: formData,

9

/\*\*

10

\\* Do not manually add the Content-Type Header

11

\\* the browser will handle this.

12

\*

13

\\* headers: {

14

\\* 'Content-Type': 'multipart/form-data'

15

\\* }

16

\*/

17

})

[**Uploading Files stored locally**](https://payloadcms.com/docs/upload/overview#uploading-files-stored-locally)

If you want to upload a file stored on your machine directly using the `payload.create` method, for example, during a seed script, you can use the `filePath` property to specify the local path of the file.

1

const localFilePath = path.resolve(\_\_dirname, filename)

2

3

await payload.create({

4

collection:'media',

5

data:{

6

alt,

7

},

8

filePath: localFilePath,

9

})

The `data` property should still include all the required fields of your `media` collection.

**Important:**

Remember that all custom hooks attached to the `media` collection will still trigger. Ensure that files match the specified mimeTypes or sizes defined in the collection's `formatOptions` or custom `hooks`.

[**Uploading Files from Remote URLs**](https://payloadcms.com/docs/upload/overview#uploading-files-from-remote-urls)

The `pasteURL` option allows users to fetch files from remote URLs by pasting them into an Upload field. This option is **enabled by default** and can be configured to either **allow unrestricted client-side fetching** or **restrict server-side fetching** to specific trusted domains.

By default, Payload uses **client-side fetching**, where the browser downloads the file directly from the provided URL. However, **client-side fetching will fail if the URL’s server has CORS restrictions**, making it suitable only for internal URLs or public URLs without CORS blocks.

To fetch files from **restricted URLs** that would otherwise be blocked by CORS, use **server-side fetching** by configuring the `pasteURL` option with an `allowList` of trusted domains. This method ensures that Payload downloads the file on the server and streams it to the browser. However, for security reasons, only URLs that match the specified `allowList` will be allowed.

[**Configuration Example**](https://payloadcms.com/docs/upload/overview#configuration-example)

Here’s how to configure the pasteURL option to control remote URL fetching:

1

import type {CollectionConfig}from'payload'

2

3

exportconstMedia:CollectionConfig={

4

slug:'media',

5

upload:{

6

pasteURL:{

7

allowList:\[\
\
\
{\
\
\
hostname:'payloadcms.com',// required\
\
\
pathname:'',\
\
\
port:'',\
\
\
protocol:'https',\
\
\
search:''\
\
\
},\
\
\
{\
\
\
hostname:'example.com',\
\
\
pathname:'/images/\*',\
\
\
},\
\
\
\],

20

},

21

},

22

}

[**Accepted Values for `pasteURL`**](https://payloadcms.com/docs/upload/overview#accepted-values-for)

| Option | Description |
| --- | --- |
| `undefined` | Default behavior. Enables client-side fetching for internal or public URLs. |
| `false` | Disables the ability to paste URLs into Upload fields. |
| `allowList` | Enables server-side fetching for specific trusted URLs. Requires an array of objects defining trusted domains. See the table below for details on `AllowItem`. |

[**`AllowItem` Properties**](https://payloadcms.com/docs/upload/overview#allowitem)

_An asterisk denotes that an option is required._

| Option | Description | Example |
| --- | --- | --- |
| `hostname` \\* | The hostname of the allowed URL. This is required to ensure the URL is coming from a trusted source. | `example.com` |
| `pathname` | The path portion of the URL. Supports wildcards to match multiple paths. | `/images/*` |
| `port` | The port number of the URL. If not specified, the default port for the protocol will be used. | `3000` |
| `protocol` | The protocol to match. Must be either `http` or `https`. Defaults to `https`. | `https` |
| `search` | The query string of the URL. If specified, the URL must match this exact query string. | `?version=1` |

[**Access Control**](https://payloadcms.com/docs/upload/overview#access-control)

All files that are uploaded to each Collection automatically support the `read` [Access Control](https://payloadcms.com/docs/access-control/overview) function from the Collection itself. You can use this to control who should be allowed to see your uploads, and who should not.

[Next \\
**Storage Adapters**](https://payloadcms.com/docs/upload/storage-adapters)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Document Sorting in Payload
# Sort

Documents in Payload can be easily sorted by a specific [Field](https://payloadcms.com/docs/fields/overview). When querying Documents, you can pass the name of any top-level field, and the response will sort the Documents by that field in _ascending_ order. If prefixed with a minus symbol ("-"), they will be sorted in _descending_ order. In Local API multiple fields can be specified by using an array of strings. In REST API multiple fields can be specified by separating fields with comma. The minus symbol can be in front of individual fields.

Because sorting is handled by the database, the field cannot be a [Virtual Field](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges). It must be stored in the database to be searchable.

**Tip:** For performance reasons, it is recommended to enable `index: true` for the fields that will be sorted upon. [More details](https://payloadcms.com/docs/fields/overview).

[**Local API**](https://payloadcms.com/docs/queries/sort#local-api)

To sort Documents in the [Local API](https://payloadcms.com/docs/local-api/overview), you can use the `sort` option in your query:

1

import type {Payload}from'payload'

2

3

constgetPosts=async(payload:Payload)=>{

4

const posts =await payload.find({

5

collection:'posts',

6

sort:'-createdAt',

7

})

8

9

return posts

10

}

To sort by multiple fields, you can use the `sort` option with fields in an array:

1

import type {Payload}from'payload'

2

3

constgetPosts=async(payload:Payload)=>{

4

const posts =await payload.find({

5

collection:'posts',

6

sort:\['priority','-createdAt'\],

7

})

8

9

return posts

10

}

[**REST API**](https://payloadcms.com/docs/queries/sort#rest-api)

To sort in the [REST API](https://payloadcms.com/docs/rest-api/overview), you can use the `sort` parameter in your query:

1

fetch('https://localhost:3000/api/posts?sort=-createdAt')

2

.then((response)=> response.json())

3

.then((data)=>console.log(data))

To sort by multiple fields, you can use the `sort` parameter with fields separated by comma:

1

fetch('https://localhost:3000/api/posts?sort=priority,-createdAt')

2

.then((response)=> response.json())

3

.then((data)=>console.log(data))

[**GraphQL API**](https://payloadcms.com/docs/queries/sort#graphql-api)

To sort in the [GraphQL API](https://payloadcms.com/docs/graphql/overview), you can use the `sort` parameter in your query:

1

query {

2

Posts(sort:"-createdAt"){

3

docs {

4

color

5

}

6

}

7

}

[Next \\
**Select**](https://payloadcms.com/docs/queries/select)

## Payload Migrations Guide
# Migrations

Payload exposes a full suite of migration controls available for your use. Migration commands are accessible via the `npm run payload` command in your project directory.

Ensure you have an npm script called "payload" in your `package.json` file.

1

{

2

"scripts":{

3

"payload":"cross-env PAYLOAD\_CONFIG\_PATH=src/payload.config.ts payload"

4

}

5

}

Note that you need to run Payload migrations through the package manager that you are using, because Payload should not be globally installed on your system.

[**Migration file contents**](https://payloadcms.com/docs/database/migrations#migration-file-contents)

Payload stores all created migrations in a folder that you can specify. By default, migrations are stored in `./src/migrations`.

A migration file has two exports - an `up` function, which is called when a migration is executed, and a `down` function that will be called if for some reason the migration fails to complete successfully. The `up` function should contain all changes that you attempt to make within the migration, and the `down` should ideally revert any changes you make.

Here is an example migration file:

1

import{MigrateUpArgs,MigrateDownArgs}from'@payloadcms/your-db-adapter'

2

3

exportasyncfunctionup({ payload, req }:MigrateUpArgs):Promise<void>{

4

// Perform changes to your database here.

5

// You have access to \`payload\` as an argument, and

6

// everything is done in TypeScript.

7

}

8

9

export async function down({ payload, req }: MigrateDownArgs): Promise<void>{

10

// Do whatever you need to revert changes if the \`up\` function fails

11

}

[**Using Transactions**](https://payloadcms.com/docs/database/migrations#using-transactions)

When migrations are run, each migration is performed in a new [transaction](https://payloadcms.com/docs/database/transactions) for you. All you need to do is pass the `req` object to any [local API](https://payloadcms.com/docs/local-api/overview) or direct database calls, such as `payload.db.updateMany()`, to make database changes inside the transaction. Assuming no errors were thrown, the transaction is committed after your `up` or `down` function runs. If the migration errors at any point or fails to commit, it is caught and the transaction gets aborted. This way no change is made to the database if the migration fails.

[**Using database directly with the transaction**](https://payloadcms.com/docs/database/migrations#using-database-directly-with-the-transaction)

Additionally, you can bypass Payload's layer entirely and perform operations directly on your underlying database within the active transaction:

[**MongoDB:**](https://payloadcms.com/docs/database/migrations#mongodb)

1

import{ type MigrateUpArgs}from'@payloadcms/db-mongodb'

2

3

exportasyncfunctionup({ session, payload, req }:MigrateUpArgs):Promise<void>{

4

const posts =await payload.db.collections.posts.collection.find({ session }).toArray()

5

}

[**Postgres:**](https://payloadcms.com/docs/database/migrations#postgres)

1

import{ type MigrateUpArgs, sql }from'@payloadcms/db-postgres'

2

3

exportasyncfunctionup({ db, payload, req }:MigrateUpArgs):Promise<void>{

4

const{rows: posts }=await db.execute(sql\`SELECT\*from posts\`)

5

}

[**SQLite:**](https://payloadcms.com/docs/database/migrations#sqlite)

In SQLite, transactions are disabled by default. [More](https://payloadcms.com/docs/database/transactions).

1

import{ type MigrateUpArgs, sql }from'@payloadcms/db-sqlite'

2

3

exportasyncfunctionup({ db, payload, req }:MigrateUpArgs):Promise<void>{

4

const{rows: posts }=await db.run(sql\`SELECT\*from posts\`)

5

}

[**Migrations Directory**](https://payloadcms.com/docs/database/migrations#migrations-directory)

Each DB adapter has an optional property `migrationDir` where you can override where you want your migrations to be stored/read. If this is not specified, Payload will check the default and possibly make a best effort to find your migrations directory by searching in common locations ie. `./src/migrations`, `./dist/migrations`, `./migrations`, etc.

All database adapters should implement similar migration patterns, but there will be small differences based on the adapter and its specific needs. Below is a list of all migration commands that should be supported by your database adapter.

[**Commands**](https://payloadcms.com/docs/database/migrations#commands) [**Migrate**](https://payloadcms.com/docs/database/migrations#migrate)

The `migrate` command will run any migrations that have not yet been run.

1

npm run payload migrate

[**Create**](https://payloadcms.com/docs/database/migrations#create)

Create a new migration file in the migrations directory. You can optionally name the migration that will be created. By default, migrations will be named using a timestamp.

1

npm run payload migrate:create optional-name-here

[**Status**](https://payloadcms.com/docs/database/migrations#status)

The `migrate:status` command will check the status of migrations and output a table of which migrations have been run, and which migrations have not yet run.

`payload migrate:status`

1

npm run payload migrate:status

[**Down**](https://payloadcms.com/docs/database/migrations#down)

Roll back the last batch of migrations.

1

npm run payload migrate:down

[**Refresh**](https://payloadcms.com/docs/database/migrations#refresh)

Roll back all migrations that have been run, and run them again.

1

npm run payload migrate:refresh

[**Reset**](https://payloadcms.com/docs/database/migrations#reset)

Roll back all migrations.

1

npm run payload migrate:reset

[**Fresh**](https://payloadcms.com/docs/database/migrations#fresh)

Drops all entities from the database and re-runs all migrations from scratch.

1

npm run payload migrate:fresh

[**When to run migrations**](https://payloadcms.com/docs/database/migrations#when-to-run-migrations)

Depending on which Database Adapter you use, your migration workflow might differ subtly.

In relational databases, migrations will be **required** for non-development database environments. But with MongoDB, you might only need to run migrations once in a while (or never even need them).

[**MongoDB**](https://payloadcms.com/docs/database/migrations#mongodb)

In MongoDB, you'll only ever really need to run migrations for times where you change your database shape, and you have lots of existing data that you'd like to transform from Shape A to Shape B.

In this case, you can create a migration by running `pnpm payload migrate:create`, and then write the logic that you need to perform to migrate your documents to their new shape. You can then either run your migrations in CI before you build / deploy, or you can run them locally, against your production database, by using your production database connection string on your local computer and running the `pnpm payload migrate` command.

[**Postgres**](https://payloadcms.com/docs/database/migrations#postgres)

In relational databases like Postgres, migrations are a bit more important, because each time you add a new field or a new collection, you'll need to update the shape of your database to match your Payload Config (otherwise you'll see errors upon trying to read / write your data).

That means that Postgres users of Payload should become familiar with the entire migration workflow from top to bottom.

Here is an overview of a common workflow for working locally against a development database, creating migrations, and then running migrations against your production database before deploying.

**1 - work locally using push mode**

Payload uses Drizzle ORM's powerful `push` mode to automatically sync data changes to your database for you while in development mode. By default, this is enabled and is the suggested workflow to using Postgres and Payload while doing local development.

You can disable this setting and solely use migrations to manage your local development database (pass `push: false` to your Postgres adapter), but if you do disable it, you may see frequent errors while running development mode. This is because Payload will have updated to your new data shape, but your local database will not have updated.

For this reason, we suggest that you leave `push` as its default setting and treat your local dev database as a sandbox.

For more information about push mode and prototyping in development, [click here](https://payloadcms.com/docs/database/postgres#prototyping-in-development-mode).

The typical workflow in Payload is to build out your Payload configs, install plugins, and make progress in development mode - allowing Drizzle to push your changes to your local database for you. Once you're finished, you can create a migration.

But importantly, you do not need to run migrations against your development database, because Drizzle will have already pushed your changes to your database for you.

Warning: do not mix "push" and migrations with your local development database. If you use "push" locally, and then try to migrate, Payload will throw a warning, telling you that these two methods are not meant to be used interchangeably.

**2 - create a migration**

Once you're done with working in your Payload Config, you can create a migration. It's best practice to try and complete a specific task or fully build out a feature before you create a migration.

But once you're ready, you can run `pnpm payload migrate:create`, which will perform the following steps for you:

- We will look for any existing migrations, and automatically generate SQL changes necessary to convert your schema from its prior state to the new state of your Payload Config
- We will then create a new migration file in your `/migrations` folder that contains all the SQL necessary to be run

We won't immediately run this migration for you, however.

Tip: migrations created by Payload are relatively programmatic in nature, so there should not be any surprises, but before you check in the created migration it's a good idea to always double-check the contents of the migration files.

**3 - set up your build process to run migrations**

Generally, you want to run migrations before you build Payload for production. This typically happens in your CI pipeline and can usually be configured on platforms like Payload Cloud, Vercel, or Netlify by specifying your build script.

A common set of scripts in a `package.json`, set up to run migrations in CI, might look like this:

1

"scripts":{

2

// For running in dev mode

3

"dev":"next dev --turbo",

4

5

// To build your Next + Payload app for production

6

"build":"next build",

7

8

// A "tie-in" to Payload's CLI for convenience

9

// this helps you run \`pnpm payload migrate:create\` and similar

10

"payload":"cross-env NODE\_OPTIONS=--no-deprecation payload",

11

12

// This command is what you'd set your \`build script\` to.

13

// Notice how it runs \`payload migrate\` and then \`pnpm build\`?

14

// This will run all migrations for you before building, in your CI,

15

// against your production database

16

"ci":"payload migrate && pnpm build",

17

},

In the example above, we've specified a `ci` script which we can use as our "build script" in the platform that we are deploying to production with.

This will require that your build pipeline can connect to your database, and it will simply run the `payload migrate` command prior to starting the build process. By calling `payload migrate`, Payload will automatically execute any migrations in your `/migrations` folder that have not yet been executed against your production database, in the order that they were created.

If it fails, the deployment will be rejected. But now, with your build script set up to run your migrations, you will be all set! Next time you deploy, your CI will execute the required migrations for you, and your database will be caught up with the shape that your Payload Config requires.

[**Running migrations in production**](https://payloadcms.com/docs/database/migrations#running-migrations-in-production)

In certain cases, you might want to run migrations at runtime when the server starts. Running them during build time may be impossible due to not having access to your database connection while building or similar reasoning.

If you're using a long-running server or container where your Node server starts up one time and then stays initialized, you might prefer to run migrations on server startup instead of within your CI.

In order to run migrations at runtime, on initialization, you can pass your migrations to your database adapter under the `prodMigrations` key as follows:

1

// Import your migrations from the \`index.ts\` file

2

// that Payload generates for you

3

import{ migrations }from'./migrations'

4

import{ buildConfig }from'payload'

5

6

exportdefaultbuildConfig({

7

// your config here

8

db:postgresAdapter({

9

// your adapter config here

10

prodMigrations: migrations

11

})

12

})

Passing your migrations as shown above will tell Payload, in production only, to execute any migrations that need to be run prior to completing the initialization of Payload. This is ideal for long-running services where Payload will only be initialized at startup.

**Warning:** if Payload is instructed to run migrations in production, this may slow down serverless cold starts on platforms such as Vercel. Generally, this option should only be used for long-running servers / containers.

[Next \\
**Transactions**](https://payloadcms.com/docs/database/transactions)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Content Localization
# Localization

Localization is one of the most important features of a modern CMS. It allows you to manage content in multiple languages, then serve it to your users based on their requested language. This is similar to [I18n](https://payloadcms.com/docs/configuration/i18n), but instead of managing translations for your application's interface, you are managing translations for the data itself.

With Localization, you can begin to serve personalized content to your users based on their specific language preferences, such as a multilingual website or multi-site application. There are no limits to the number of locales you can add to your Payload project.

To configure Localization, use the `localization` key in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

localization:{

6

// ...

7

},

8

})

[**Config Options**](https://payloadcms.com/docs/configuration/localization#config-options)

Add the `localization` property to your Payload Config to enable Localization project-wide. You'll need to provide a list of all locales that you'd like to support as well as set a few other options.

To configure locales, use the `localization.locales` property in your [Payload Config](https://payloadcms.com/docs/configuration/overview):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

// ...

5

localization:{

6

locales:\['en','es','de'\],// required

7

defaultLocale:'en',// required

8

},

9

})

You can also define locales using [full configuration objects](https://payloadcms.com/docs/configuration/localization#locale-object):

1

import{ buildConfig }from'payload'

2

3

exportdefaultbuildConfig({

4

collections:\[\
\
\
// collections go here\
\
\
\],

7

localization:{

8

locales:\[\
\
\
{\
\
\
label:'English',\
\
\
code:'en',\
\
\
},\
\
\
{\
\
\
label:'Arabic',\
\
\
code:'ar',\
\
\
// opt-in to setting default text-alignment on Input fields to rtl (right-to-left)\
\
\
// when current locale is rtl\
\
\
rtl:true,\
\
\
},\
\
\
\],

21

defaultLocale:'en',// required

22

fallback:true,// defaults to true

23

},

24

})

**Tip:** Localization works very well alongside [I18n](https://payloadcms.com/docs/configuration/i18n).

The following options are available:

| Option | Description |
| --- | --- |
| `locales` | Array of all the languages that you would like to support. [More details](https://payloadcms.com/docs/configuration/localization#locales) |
| `defaultLocale` | Required string that matches one of the locale codes from the array provided. By default, if no locale is specified, documents will be returned in this locale. |
| `fallback` | Boolean enabling "fallback" locale functionality. If a document is requested in a locale, but a field does not have a localized value corresponding to the requested locale, then if this property is enabled, the document will automatically fall back to the fallback locale value. If this property is not enabled, the value will not be populated unless a fallback is explicitly provided in the request. True by default. |
| `filterAvailableLocales` | A function that is called with the array of `locales` and the `req`, it should return locales to show in admin UI selector. [See more](https://payloadcms.com/docs/configuration/localization#filter-available-options). |

[**Locales**](https://payloadcms.com/docs/configuration/localization#locales)

The locales array is a list of all the languages that you would like to support. This can be strings for each language code, or [full configuration objects](https://payloadcms.com/docs/configuration/localization#locale-object) for more advanced options.

The locale codes do not need to be in any specific format. It's up to you to define how to represent your locales. Common patterns are to use two-letter ISO 639 language codes or four-letter language and country codes (ISO 3166‑1) such as `en-US`, `en-UK`, `es-MX`, etc.

[**Locale Object**](https://payloadcms.com/docs/configuration/localization#locale-object)

| Option | Description |
| --- | --- |
| `code` \\* | Unique code to identify the language throughout the APIs for `locale` and `fallbackLocale` |
| `label` | A string to use for the selector when choosing a language, or an object keyed on the i18n keys for different languages in use. |
| `rtl` | A boolean that when true will make the admin UI display in Right-To-Left. |
| `fallbackLocale` | The code for this language to fallback to when properties of a document are not present. |

_\\* An asterisk denotes that a property is required._

[**Filter Available Options**](https://payloadcms.com/docs/configuration/localization#filter-available-options)

In some projects you may want to filter the available locales shown in the admin UI selector. You can do this by providing a `filterAvailableLocales` function in your Payload Config. This is called on the server side and is passed the array of locales. This means that you can determine what locales are visible in the localizer selection menu at the top of the admin panel. You could do this per user, or implement a function that scopes these to tenants and more. Here is an example using request headers in a multi-tenant application:

1

// ... rest of payload config

2

localization:{

3

defaultLocale:'en',

4

locales:\['en','es'\],

5

filterAvailableLocales:async({ req, locales })=>{

6

if(getTenantFromCookie(req.headers,'text')){

7

const fullTenant =await req.payload.findByID({

8

id:getTenantFromCookie(req.headers,'text')as string,

9

collection:'tenants',

10

req,

11

})

12

if(fullTenant && fullTenant.supportedLocales?.length){

13

return locales.filter((locale)=>{

14

return fullTenant.supportedLocales?.includes(locale.codeas'en'\|'es')

15

})

16

}

17

}

18

return locales

19

},

20

}

Since the filtering happens at the root level of the application and its result is not calculated every time you navigate to a new page, you may want to call `router.refresh` in a custom component that watches when values that affect the result change. In the example above, you would want to do this when `supportedLocales` changes on the tenant document.

[**Field Localization**](https://payloadcms.com/docs/configuration/localization#field-localization)

Payload Localization works on a **field** level—not a document level. In addition to configuring the base Payload Config to support Localization, you need to specify each field that you would like to localize.

**Here is an example of how to enable Localization for a field:**

1

{

2

name:'title',

3

type:'text',

4

localized:true,

5

}

With the above configuration, the `title` field will now be saved in the database as an object of all locales instead of a single string.

All field types with a `name` property support the `localized` property—even the more complex field types like `array` s and `block` s.

**Note:** Enabling Localization for field types that support nested fields will automatically create localized "sets" of all fields contained within the field. For example, if you have a page layout using a blocks field type, you have the choice of either localizing the full layout, by enabling Localization on the top-level blocks field, or only certain fields within the layout.

**Important:** When converting an existing field to or from `localized: true` the data structure in the document will change for this field and so existing data for this field will be lost. Before changing the Localization setting on fields with existing data, you may need to consider a field migration strategy.

[**Retrieving Localized Docs**](https://payloadcms.com/docs/configuration/localization#retrieving-localized-docs)

When retrieving documents, you can specify which locale you'd like to receive as well as which fallback locale should be used.

[**REST API**](https://payloadcms.com/docs/configuration/localization#rest-api)

REST API locale functionality relies on URL query parameters.

`?locale=`

Specify your desired locale by providing the `locale` query parameter directly in the endpoint URL.

`?fallback-locale=`

Specify fallback locale to be used by providing the `fallback-locale` query parameter. This can be provided as either a valid locale as provided to your base Payload Config, or `'null'`, `'false'`, or `'none'` to disable falling back.

**Example:**

1

fetch('https://localhost:3000/api/pages?locale=es&fallback-locale=none');

[**GraphQL API**](https://payloadcms.com/docs/configuration/localization#graphql-api)

In the GraphQL API, you can specify `locale` and `fallbackLocale` args to all relevant queries and mutations.

The `locale` arg will only accept valid locales, but locales will be formatted automatically as valid GraphQL enum

values (dashes or special characters will be converted to underscores, spaces will be removed, etc.). If you are curious

to see how locales are auto-formatted, you can use the [GraphQL playground](https://payloadcms.com/docs/graphql/overview#graphql-playground).

The `fallbackLocale` arg will accept valid locales as well as `none` to disable falling back.

**Example:**

1

query {

2

Posts(locale: de,fallbackLocale: none){

3

docs {

4

title

5

}

6

}

7

}

In GraphQL, specifying the locale at the top level of a query will automatically apply it throughout all nested relationship fields. You can override this behavior by re-specifying locale arguments in nested related document queries.

[**Local API**](https://payloadcms.com/docs/configuration/localization#local-api)

You can specify `locale` as well as `fallbackLocale` within the Local API as well as properties on the `options` argument. The `locale` property will accept any valid locale, and the `fallbackLocale` property will accept any valid locale as well as `'null'`, `'false'`, `false`, and `'none'`.

**Example:**

1

const posts =await payload.find({

2

collection:'posts',

3

locale:'es',

4

fallbackLocale:false,

5

})

**Tip:** The REST and Local APIs can return all Localization data in one request by passing 'all' or '\*' as the **locale** parameter. The response will be structured so that field values come back as the full objects keyed for each locale instead of the single, translated value.

[Next \\
**Environment Variables**](https://payloadcms.com/docs/configuration/environment-vars)

#### Community Help Threads

- [Search on a localized field (i.e.: slug) with fallback](https://payloadcms.com/community-help/discord/search-on-a-localized-field-ie-slug-with-fallback)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Payload Relationship Field
# Relationship Field

The Relationship Field is one of the most powerful fields Payload features. It provides the ability to easily relate documents together.

![Shows a relationship field in the Payload Admin Panel](https://payloadcms.com/images/docs/fields/relationship.png)

Admin Panel screenshot of a Relationship field

The Relationship field is used in a variety of ways, including:

- To add `Product` documents to an `Order` document
- To allow for an `Order` to feature a `placedBy` relationship to either an `Organization` or `User` collection
- To assign `Category` documents to `Post` documents

To add a Relationship Field, set the `type` to `relationship` in your [Field Config](https://payloadcms.com/docs/fields/overview):

1

import type {Field}from'payload'

2

3

exportconstMyRelationshipField:Field={

4

// ...

5

type:'relationship',

6

relationTo:'products',

7

}

[**Config Options**](https://payloadcms.com/docs/fields/relationship#config-options)

| Option | Description |
| --- | --- |
| `name` \\* | To be used as the property name when stored and retrieved from the database. [More](https://payloadcms.com/docs/fields/overview#field-names) |
| `relationTo` \\* | Provide one or many collection `slug` s to be able to assign relationships to. |
| `filterOptions` | A query to filter which options appear in the UI and validate against. [More](https://payloadcms.com/docs/fields/relationship#filtering-relationship-options). |
| `hasMany` | Boolean when, if set to `true`, allows this field to have many relations instead of only one. |
| `minRows` | A number for the fewest allowed items during validation when a value is present. Used with `hasMany`. |
| `maxRows` | A number for the most allowed items during validation when a value is present. Used with `hasMany`. |
| `maxDepth` | Sets a maximum population depth for this field, regardless of the remaining depth when this field is reached. [Max Depth](https://payloadcms.com/docs/queries/depth#max-depth) |
| `label` | Text used as a field label in the Admin Panel or an object with keys for each language. |
| `unique` | Enforce that each entry in the Collection has a unique value for this field. |
| `validate` | Provide a custom validation function that will be executed on both the Admin Panel and the backend. [More](https://payloadcms.com/docs/fields/overview#validation) |
| `index` | Build an [index](https://payloadcms.com/docs/database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |
| `saveToJWT` | If this field is top-level and nested in a config supporting [Authentication](https://payloadcms.com/docs/authentication/overview), include its data in the user JWT. |
| `hooks` | Provide Field Hooks to control logic for this field. [More details](https://payloadcms.com/docs/hooks/fields). |
| `access` | Provide Field Access Control to denote what users can see and do with this field's data. [More details](https://payloadcms.com/docs/access-control/fields). |
| `hidden` | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin Panel. |
| `defaultValue` | Provide data to be used for this field's default value. [More](https://payloadcms.com/docs/fields/overview#default-values) |
| `localized` | Enable localization for this field. Requires [localization to be enabled](https://payloadcms.com/docs/configuration/localization) in the Base config. |
| `required` | Require this field to have a value. |
| `admin` | Admin-specific configuration. [More details](https://payloadcms.com/docs/fields/relationship#admin-options). |
| `custom` | Extension point for adding custom data (e.g. for plugins) |
| `typescriptSchema` | Override field type generation with providing a JSON schema |
| `virtual` | Provide `true` to disable field in the database. See [Virtual Fields](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges) |
| `graphQL` | Custom graphQL configuration for the field. [More details](https://payloadcms.com/docs/graphql/overview#field-complexity) |

_\\* An asterisk denotes that a property is required._

**Tip:** The [Depth](https://payloadcms.com/docs/queries/depth) parameter can be used to automatically populate related documents that are returned by the API.

[**Admin Options**](https://payloadcms.com/docs/fields/relationship#admin-options)

To the appearance and behavior of the Relationship Field in the [Admin Panel](https://payloadcms.com/docs/admin/overview), you can use the `admin` option:

1

import type {Field}from'payload'

2

3

exportconstMyRelationshipField:Field={

4

// ...

5

admin:{

6

// ...

7

},

8

}

The Relationship Field inherits all of the default options from the base [Field Admin Config](https://payloadcms.com/docs/fields/overview#admin-options), plus the following additional options:

| Property | Description |
| --- | --- |
| `isSortable` | Set to `true` if you'd like this field to be sortable within the Admin UI using drag and drop (only works when `hasMany` is set to `true`). |
| `allowCreate` | Set to `false` if you'd like to disable the ability to create new documents from within the relationship field. |
| `allowEdit` | Set to `false` if you'd like to disable the ability to edit documents from within the relationship field. |
| `sortOptions` | Define a default sorting order for the options within a Relationship field's dropdown. [More](https://payloadcms.com/docs/fields/relationship#sort-options) |

[**Sort Options**](https://payloadcms.com/docs/fields/relationship#sort-options)

You can specify `sortOptions` in two ways:

**As a string:**

Provide a string to define a global default sort field for all relationship field dropdowns across different collections. You can prefix the field name with a minus symbol ("-") to sort in descending order.

Example:

1

sortOptions:'fieldName',

This configuration will sort all relationship field dropdowns by `"fieldName"` in ascending order.

**As an object :**

Specify an object where keys are collection slugs and values are strings representing the field names to sort by. This allows for different sorting fields for each collection's relationship dropdown.

Example:

1

sortOptions:{

2

"pages":"fieldName1",

3

"posts":"-fieldName2",

4

"categories":"fieldName3"

5

}

In this configuration:

- Dropdowns related to `pages` will be sorted by `"fieldName1"` in ascending order.
- Dropdowns for `posts` will use `"fieldName2"` for sorting in descending order (noted by the "-" prefix).
- Dropdowns associated with `categories` will sort based on `"fieldName3"` in ascending order.

Note: If `sortOptions` is not defined, the default sorting behavior of the Relationship field dropdown will be used.

[**Filtering relationship options**](https://payloadcms.com/docs/fields/relationship#filtering-relationship-options)

Options can be dynamically limited by supplying a [query constraint](https://payloadcms.com/docs/queries/overview), which will be used both for validating input and filtering available relationships in the UI.

The `filterOptions` property can either be a `Where` query, or a function returning `true` to not filter, `false` to prevent all, or a `Where` query. When using a function, it will be called with an argument object with the following properties:

| Property | Description |
| --- | --- |
| `blockData` | The data of the nearest parent block. Will be `undefined` if the field is not within a block or when called on a `Filter` component within the list view. |
| `data` | An object containing the full collection or global document currently being edited. Will be an empty object when called on a `Filter` component within the list view. |
| `id` | The `id` of the current document being edited. Will be `undefined` during the `create` operation or when called on a `Filter` component within the list view. |
| `relationTo` | The collection `slug` to filter against, limited to this field's `relationTo` property. |
| `req` | The Payload Request, which contains references to `payload`, `user`, `locale`, and more. |
| `siblingData` | An object containing document data that is scoped to only fields within the same parent of this field. Will be an emprt object when called on a `Filter` component within the list view. |
| `user` | An object containing the currently authenticated user. |

[**Example**](https://payloadcms.com/docs/fields/relationship#example)

1

import type {CollectionConfig}from'payload'

2

3

exportconstExampleCollection:CollectionConfig={

4

slug:'example-collection',

5

fields:\[\
\
\
{\
\
\
name:'purchase',\
\
\
type:'relationship',\
\
\
relationTo:\['products','services'\],\
\
\
filterOptions:({ relationTo, siblingData })=>{\
\
\
// returns a Where query dynamically by the type of relationship\
\
\
if(relationTo ==='products'){\
\
\
return{\
\
\
stock:{greater\_than: siblingData.quantity},\
\
\
}\
\
\
}\
\
\
\
if(relationTo ==='services'){\
\
\
return{\
\
\
isAvailable:{equals:true},\
\
\
}\
\
\
}\
\
\
},\
\
\
},\
\
\
\],

26

}

You can learn more about writing queries [here](https://payloadcms.com/docs/queries/overview).

**Note:**

When a relationship field has both **filterOptions** and a custom **validate** function, the api will not validate **filterOptions** unless you call the default relationship field validation function imported from **payload/shared** in your validate function.

[**Bi-directional relationships**](https://payloadcms.com/docs/fields/relationship#bi-directional-relationships)

The `relationship` field on its own is used to define relationships for the document that contains the relationship field, and this can be considered as a "one-way" relationship. For example, if you have a Post that has a `category` relationship field on it, the related `category` itself will not surface any information about the posts that have the category set.

However, the `relationship` field can be used in conjunction with the `Join` field to produce powerful bi-directional relationship authoring capabilities. If you're interested in bi-directional relationships, check out the [documentation for the Join field](https://payloadcms.com/docs/fields/join).

[**How the data is saved**](https://payloadcms.com/docs/fields/relationship#how-the-data-is-saved)

Given the variety of options possible within the `relationship` field type, the shape of the data needed for creating and updating these fields can vary. The following sections will describe the variety of data shapes that can arise from this field.

[**Has One**](https://payloadcms.com/docs/fields/relationship#has-one)

The most simple pattern of a relationship is to use `hasMany: false` with a `relationTo` that allows for only one type of collection.

1

{

2

slug:'example-collection',

3

fields:\[\
\
\
{\
\
\
name:'owner',// required\
\
\
type:'relationship',// required\
\
\
relationTo:'users',// required\
\
\
hasMany:false,\
\
\
}\
\
\
\]

11

}

The shape of the data to save for a document with the field configured this way would be:

1

{

2

// ObjectID of the related user

3

"owner":"6031ac9e1289176380734024"

4

}

When querying documents in this collection via REST API, you could query as follows:

`?where[owner][equals]=6031ac9e1289176380734024`.

[**Has One - Polymorphic**](https://payloadcms.com/docs/fields/relationship#has-one-polymorphic)

Also known as **dynamic references**, in this configuration, the `relationTo` field is an array of Collection slugs that tells Payload which Collections are valid to reference.

1

{

2

slug:'example-collection',

3

fields:\[\
\
\
{\
\
\
name:'owner',// required\
\
\
type:'relationship',// required\
\
\
relationTo:\['users','organizations'\],// required\
\
\
hasMany:false,\
\
\
}\
\
\
\]

11

}

The shape of the data to save for a document with more than one relationship type would be:

1

{

2

"owner":{

3

"relationTo":"organizations",

4

"value":"6031ac9e1289176380734024"

5

}

6

}

Here is an example for how to query documents by this data (note the difference in referencing the `owner.value`):

`?where[owner.value][equals]=6031ac9e1289176380734024`.

You can also query for documents where a field has a relationship to a specific Collection:

`?where[owners.relationTo][equals]=organizations`.

This query would return only documents that have an owner relationship to organizations.

[**Has Many**](https://payloadcms.com/docs/fields/relationship#has-many)

The `hasMany` tells Payload that there may be more than one collection saved to the field.

1

{

2

slug:'example-collection',

3

fields:\[\
\
\
{\
\
\
name:'owners',// required\
\
\
type:'relationship',// required\
\
\
relationTo:'users',// required\
\
\
hasMany:true,\
\
\
}\
\
\
\]

11

}

To save to the `hasMany` relationship field we need to send an array of IDs:

1

{

2

"owners":\["6031ac9e1289176380734024","602c3c327b811235943ee12b"\]

3

}

When querying documents, the format does not change for arrays:

`?where[owners][equals]=6031ac9e1289176380734024`.

[**Has Many - Polymorphic**](https://payloadcms.com/docs/fields/relationship#has-many-polymorphic)

1

{

2

slug:'example-collection',

3

fields:\[\
\
\
{\
\
\
name:'owners',// required\
\
\
type:'relationship',// required\
\
\
relationTo:\['users','organizations'\],// required\
\
\
hasMany:true,\
\
\
required:true,\
\
\
}\
\
\
\]

12

}

Relationship fields with `hasMany` set to more than one kind of collections save their data as an array of objects—each containing the Collection `slug` as the `relationTo` value, and the related document `id` for the `value`:

1

{

2

"owners":\[\
\
\
{\
\
\
"relationTo":"users",\
\
\
"value":"6031ac9e1289176380734024"\
\
\
},\
\
\
{\
\
\
"relationTo":"organizations",\
\
\
"value":"602c3c327b811235943ee12b"\
\
\
}\
\
\
\]

12

}

Querying is done in the same way as the earlier Polymorphic example:

`?where[owners.value][equals]=6031ac9e1289176380734024`.

[**Querying and Filtering Polymorphic Relationships**](https://payloadcms.com/docs/fields/relationship#querying-and-filtering-polymorphic-relationships)

Polymorphic and non-polymorphic relationships must be queried differently because of how the related data is stored and may be inconsistent across different collections. Because of this, filtering polymorphic relationship fields from the Collection List admin UI is limited to the `id` value.

For a polymorphic relationship, the response will always be an array of objects. Each object will contain the `relationTo` and `value` properties.

The data can be queried by the related document ID:

`?where[field.value][equals]=6031ac9e1289176380734024`.

Or by the related document Collection slug:

`?where[field.relationTo][equals]=your-collection-slug`.

However, you **cannot** query on any field values within the related document. Since we are referencing multiple collections, the field you are querying on may not exist and break the query.

**Note:**

You **cannot** query on a field within a polymorphic relationship as you would with a non-polymorphic relationship.

[**Custom Components**](https://payloadcms.com/docs/fields/relationship#custom-components) [**Field**](https://payloadcms.com/docs/fields/relationship#field) [**Server Component**](https://payloadcms.com/docs/fields/relationship#server-component)

1

import type Reactfrom'react'

2

import{RelationshipField}from'@payloadcms/ui'

3

import type {RelationshipFieldServerComponent}from'payload'

4

5

exportconstCustomRelationshipFieldServer:RelationshipFieldServerComponent=({

6

clientField,

7

path,

8

schemaPath,

9

permissions,

10

})=>{

11

return(

12

<RelationshipField

13

field={clientField}

14

path={path}

15

schemaPath={schemaPath}

16

permissions={permissions}

17

/>

18

)

19

}

[**Client Component**](https://payloadcms.com/docs/fields/relationship#client-component)

1

'use client'

2

importReactfrom'react'

3

import{RelationshipField}from'@payloadcms/ui'

4

import type {RelationshipFieldClientComponent}from'payload'

5

6

exportconstCustomRelationshipFieldClient:RelationshipFieldClientComponent=(props)=>{

7

return<RelationshipField{...props}/>

8

}

[**Label**](https://payloadcms.com/docs/fields/relationship#label) [**Server Component**](https://payloadcms.com/docs/fields/relationship#server-component)

1

importReactfrom'react'

2

import{FieldLabel}from'@payloadcms/ui'

3

import type {RelationshipFieldLabelServerComponent}from'payload'

4

5

exportconstCustomRelationshipFieldLabelServer:RelationshipFieldLabelServerComponent=(

6

clientField,

7

path

8

)=>{

9

return(

10

<FieldLabel

11

label={clientField?.label \|\| clientField?.name}

12

path={path}

13

required={clientField?.required}

14

/>

15

)

16

}

[**Client Component**](https://payloadcms.com/docs/fields/relationship#client-component)

1

'use client'

2

importReactfrom'react'

3

import{FieldLabel}from'@payloadcms/ui'

4

import type {RelationshipFieldLabelClientComponent}from'payload'

5

6

exportconstCustomRelationshipFieldLabelClient:RelationshipFieldLabelClientComponent=({

7

field,

8

path,

9

})=>{

10

return(

11

<FieldLabel

12

label={field?.label \|\| field?.name}

13

path={path}

14

required={field?.required}

15

/>

16

)

17

}

[Next \\
**Rich Text Field**](https://payloadcms.com/docs/fields/rich-text)

#### Community Help Threads

- [Nested media is only showing image ids array.](https://payloadcms.com/community-help/discord/nested-media-is-only-showing-image-ids-array)
- [Have relationship field show a different field from the related entity rather than ID](https://payloadcms.com/community-help/discord/have-relationship-field-show-a-different-field-from-the-related-entity-rather-than-id)
- [Querying Multi-Collection Relationship Field Error](https://payloadcms.com/community-help/discord/querying-multi-collection-relationship-field-error)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Database Transactions Guide
# Transactions

Database transactions allow your application to make a series of database changes in an all-or-nothing commit. Consider an HTTP request that creates a new **Order** and has an `afterChange` hook to update the stock count of related **Items**. If an error occurs when updating an **Item** and an HTTP error is returned to the user, you would not want the new **Order** to be persisted or any other items to be changed either. This kind of interaction with the database is handled seamlessly with transactions.

By default, Payload will use transactions for all data changing operations, as long as it is supported by the configured database. Database changes are contained within all Payload operations and any errors thrown will result in all changes being rolled back without being committed. When transactions are not supported by the database, Payload will continue to operate as expected without them.

**Note:**

MongoDB requires a connection to a replicaset in order to make use of transactions.

**Note:**

Transactions in SQLite are disabled by default. You need to pass `transactionOptions: {}` to enable them.

The initial request made to Payload will begin a new transaction and attach it to the `req.transactionID`. If you have a `hook` that interacts with the database, you can opt in to using the same transaction by passing the `req` in the arguments. For example:

1

constafterChange:CollectionAfterChangeHook=async({ req })=>{

2

// because req.transactionID is assigned from Payload and passed through,

3

// my-slug will only persist if the entire request is successful

4

await req.payload.create({

5

req,

6

collection:'my-slug',

7

data:{

8

some:'data',

9

},

10

})

11

}

[**Async Hooks with Transactions**](https://payloadcms.com/docs/database/transactions#async-hooks-with-transactions)

Since Payload hooks can be async and be written to not await the result, it is possible to have an incorrect success response returned on a request that is rolled back. If you have a hook where you do not `await` the result, then you should **not** pass the `req.transactionID`.

1

constafterChange:CollectionAfterChangeHook=async({ req })=>{

2

// WARNING: an async call made with the same req, but NOT awaited,

3

// may fail resulting in an OK response being returned with response data that is not committed

4

const dangerouslyIgnoreAsync = req.payload.create({

5

req,

6

collection:'my-slug',

7

data:{

8

some:'other data',

9

},

10

})

11

12

// Should this call fail, it will not rollback other changes

13

// because the req (and its transactionID) is not passed through

14

const safelyIgnoredAsync = req.payload.create({

15

collection:'my-slug',

16

data:{

17

some:'other data',

18

},

19

})

20

}

[**Direct Transaction Access**](https://payloadcms.com/docs/database/transactions#direct-transaction-access)

When writing your own scripts or custom endpoints, you may wish to have direct control over transactions. This is useful for interacting with your database outside of Payload's local API.

The following functions can be used for managing transactions:

- `payload.db.beginTransaction` \- Starts a new session and returns a transaction ID for use in other Payload Local API calls.
- `payload.db.commitTransaction` \- Takes the identifier for the transaction, finalizes any changes.
- `payload.db.rollbackTransaction` \- Takes the identifier for the transaction, discards any changes.

Payload uses the `req` object to pass the transaction ID through to the database adapter. If you are not using the `req` object, you can make a new object to pass the transaction ID directly to database adapter methods and local API calls. Example:

1

importpayloadfrom'payload'

2

importconfigfrom'./payload.config'

3

4

conststandalonePayloadScript=async()=>{

5

// initialize Payload

6

await payload.init({ config })

7

8

const transactionID =await payload.db.beginTransaction()

9

10

try{

11

// Make an update using the local API

12

await payload.update({

13

collection:'posts',

14

data:{

15

some:'data',

16

},

17

where:{

18

slug:{equals:'my-slug'}

19

},

20

req:{ transactionID },

21

})

22

23

/\*

24

You can make additional db changes or run other functions

25

that need to be committed on an all or nothing basis

26

\*/

27

28

// Commit the transaction

29

await payload.db.commitTransaction(transactionID)

30

}catch(error){

31

// Rollback the transaction

32

await payload.db.rollbackTransaction(transactionID)

33

}

34

}

35

36

standalonePayloadScript()

[**Disabling Transactions**](https://payloadcms.com/docs/database/transactions#disabling-transactions)

If you wish to disable transactions entirely, you can do so by passing `false` as the `transactionOptions` in your database adapter configuration. All the official Payload database adapters support this option.

In addition to allowing database transactions to be disabled at the adapter level. You can prevent Payload from using a transaction in direct calls to the local API by adding `disableTransaction: true` to the args. For example:

1

await payload.update({

2

collection:'posts',

3

data:{

4

some:'data',

5

},

6

where:{

7

slug:{equals:'my-slug'}

8

},

9

disableTransaction:true,

10

})

[Next \\
**MongoDB**](https://payloadcms.com/docs/database/mongodb)

[Product](https://payloadcms.com/use-cases)Why Payload[Developers](https://payloadcms.com/developers)[Enterprise](https://payloadcms.com/enterprise) [Docs](https://payloadcms.com/docs) [New project](https://payloadcms.com/new) [Login](https://payloadcms.com/login)

Documentation

## Preview Feature
# Preview

Preview is a feature that allows you to generate a direct link to your front-end application. When enabled, a "preview" button will appear on the Edit View within the [Admin Panel](https://payloadcms.com/docs/admin/overview) with an href pointing to the URL you provide. This will provide your editors with a quick way of navigating to the front-end application where that Document's data is represented. Otherwise, they'd have to determine that URL themselves which is not always straightforward especially in complex apps.

The Preview feature can also be used to achieve something known as "Draft Preview". With Draft Preview, you can navigate to your front-end application and enter "draft mode", where your queries are modified to fetch draft content instead of published content. This is useful for seeing how your content will look before being published. [More details](https://payloadcms.com/docs/admin/preview#draft-preview).

**Note:** Preview is different than [Live Preview](https://payloadcms.com/docs/live-preview/overview). Live Preview loads your app within an iframe and renders it in the Admin Panel allowing you to see changes in real-time. Preview, on the other hand, allows you to generate a direct link to your front-end application.

To add Preview, pass a function to the `admin.preview` property in any [Collection Config](https://payloadcms.com/docs/configuration/collections#admin-options) or [Global Config](https://payloadcms.com/docs/configuration/globals#admin-options):

1

import type {CollectionConfig}from'payload'

2

3

exportconstPages:CollectionConfig={

4

slug:'pages',

5

admin:{

6

preview:({ slug })=>\`http://localhost:3000/${slug}\`,

7

},

8

fields:\[\
\
\
{\
\
\
name:'slug',\
\
\
type:'text',\
\
\
}\
\
\
\],

14

}

[**Options**](https://payloadcms.com/docs/admin/preview#options)

The `preview` function resolves to a string that points to your front-end application with additional URL parameters. This can be an absolute URL or a relative path, and can run async if needed.

The following arguments are provided to the `preview` function:

| Path | Description |
| --- | --- |
| `doc` | The data of the Document being edited. This includes changes that have not yet been saved. |
| `options` | An object with additional properties. |

The `options` object contains the following properties:

| Path | Description |
| --- | --- |
| `locale` | The current locale of the Document being edited. |
| `req` | The Payload Request object. |
| `token` | The JWT token of the currently authenticated in user. |

If your application requires a fully qualified URL, such as within deploying to Vercel Preview Deployments, you can use the `req` property to build this URL:

1

preview:(doc,{ req })=>\`${req.protocol}//${req.host}/${doc.slug}\`

[**Draft Preview**](https://payloadcms.com/docs/admin/preview#draft-preview)

The Preview feature can be used to achieve "Draft Preview". After clicking the preview button from the Admin Panel, you can enter into "draft mode" within your front-end application. This will allow you to adjust your page queries to include the `draft: true` param. When this param is present on the request, Payload will send back a draft document as opposed to a published one based on the document's `_status` field.

To enter draft mode, the URL provided to the `preview` function can point to a custom endpoint in your front-end application that sets a cookie or session variable to indicate that draft mode is enabled. This is framework specific, so the mechanisms here very from framework to framework although the underlying concept is the same.

[**Next.js**](https://payloadcms.com/docs/admin/preview#nextjs)

If you're using Next.js, you can do the following code to enter [Draft Mode](https://nextjs.org/docs/app/building-your-application/configuring/draft-mode).

[**Step 1: Format the Preview URL**](https://payloadcms.com/docs/admin/preview#step-1-format-the-preview-url)

First, format your `admin.preview` function to point to a custom endpoint that you'll open on your front-end. This URL should include a few key query search params:

1

import type {CollectionConfig}from'payload'

2

3

exportconstPages:CollectionConfig={

4

slug:'pages',

5

admin:{

6

preview:({ slug, collection })=>{

7

const encodedParams =newURLSearchParams({

8

slug,

9

collection,

10

path:\`/${slug}\`,

11

previewSecret: process.env.PREVIEW\_SECRET\|\|''

12

})

13

14

return\`/preview?${encodedParams.toString()}\`

15

}

16

},

17

fields:\[\
\
\
{\
\
\
name:'slug',\
\
\
type:'text',\
\
\
}\
\
\
\],

23

}

[**Step 2: Create the Preview Route**](https://payloadcms.com/docs/admin/preview#step-2-create-the-preview-route)

Then, create an API route that verifies the preview secret, authenticates the user, and enters draft mode:

`/app/preview/route.ts`

1

import type {CollectionSlug,PayloadRequest}from'payload'

2

import{ getPayload }from'payload'

3

4

import{ draftMode }from'next/headers'

5

import{ redirect }from'next/navigation'

6

7

importconfigPromisefrom'@payload-config'

8

9

exportasyncfunctionGET(

10

req:{

11

cookies:{

12

get:(name: string)=>{

13

value: string

14

}

15

}

16

}&Request,

17

):Promise<Response>{

18

const payload =awaitgetPayload({config: configPromise })

19

20

const{ searchParams }=newURL(req.url)

21

22

const path = searchParams.get('path')

23

const collection = searchParams.get('collection')asCollectionSlug

24

const slug = searchParams.get('slug')

25

const previewSecret = searchParams.get('previewSecret')

26

27

if(previewSecret !== process.env.PREVIEW\_SECRET){

28

returnnewResponse('You are not allowed to preview this page',{status:403})

29

}

30

31

if(!path \|\|!collection \|\|!slug){

32

returnnewResponse('Insufficient search params',{status:404})

33

}

34

35

if(!path.startsWith('/')){

36

returnnewResponse('This endpoint can only be used for relative previews',{status:500})

37

}

38

39

let user

40

41

try{

42

user =await payload.auth({

43

req: req as unknown asPayloadRequest,

44

headers: req.headers,

45

})

46

}catch(error){

47

payload.logger.error({err: error },'Error verifying token for live preview')

48

returnnewResponse('You are not allowed to preview this page',{status:403})

49

}

50

51

const draft =awaitdraftMode()

52

53

if(!user){

54

draft.disable()

55

returnnewResponse('You are not allowed to preview this page',{status:403})

56

}

57

58

// You can add additional checks here to see if the user is allowed to preview this page

59

60

draft.enable()

61

62

redirect(path)

63

}

[**Step 3: Query Draft Content**](https://payloadcms.com/docs/admin/preview#step-3-query-draft-content)

Finally, in your front-end application, you can detect draft mode and adjust your queries to include drafts:

`/app/[slug]/page.tsx`

1

exportdefaultasyncfunctionPage({params: paramsPromise }){

2

const{ slug ='home'}=await paramsPromise

3

4

const{isEnabled: isDraftMode }=awaitdraftMode()

5

6

const payload =awaitgetPayload({ config })

7

8

const page =await payload.find({

9

collection:'pages',

10

depth:0,

11

draft: isDraftMode,

12

limit:1,

13

overrideAccess: isDraftMode,

14

where:{

15

slug:{

16

equals: slug,

17

},

18

},

19

})?.then(({ docs })=> docs?.\[0\])

20

21

if(page ===null){

22

returnnotFound()

23

}

24

25

return(

26

<main>

27

<h1>{page?.title}</h1>

28

</main>

29

)

30

}

**Note:** For fully working example of this, check of the official [Draft Preview Example](https://github.com/payloadcms/payload/tree/main/examples/draft-preview) in the [Examples Directory](https://github.com/payloadcms/payload/tree/main/examples).

[Next \\
**Document Locking**](https://payloadcms.com/docs/admin/locked-documents)

## Authentication Email Customization
# Authentication Emails

[Authentication](https://payloadcms.com/docs/authentication/overview) ties directly into the [Email](https://payloadcms.com/docs/email/overview) functionality that Payload provides. This allows you to send emails to users for verification, password resets, and more. While Payload provides default email templates for these actions, you can customize them to fit your brand.

[**Email Verification**](https://payloadcms.com/docs/authentication/email#email-verification)

Email Verification forces users to prove they have access to the email address they can authenticate. This will help to reduce spam accounts and ensure that users are who they say they are.

To enable Email Verification, use the `auth.verify` property on your [Collection Config](https://payloadcms.com/docs/configuration/collections):

1

import type {CollectionConfig}from'payload'

2

3

exportconstCustomers:CollectionConfig={

4

// ...

5

auth:{

6

verify:true

7

},

8

}

**Tip:** Verification emails are fully customizable. [More details](https://payloadcms.com/docs/authentication/email#generateemailhtml).

The following options are available:

| Option | Description |
| --- | --- |
| `generateEmailHTML` | Allows for overriding the HTML within emails that are sent to users indicating how to validate their account. [More details](https://payloadcms.com/docs/authentication/email#generateemailhtml). |
| `generateEmailSubject` | Allows for overriding the subject of the email that is sent to users indicating how to validate their account. [More details](https://payloadcms.com/docs/authentication/email#generateemailsubject). |

[**generateEmailHTML**](https://payloadcms.com/docs/authentication/email#generateemailhtml)

Function that accepts one argument, containing `{ req, token, user }`, that allows for overriding the HTML within emails that are sent to users indicating how to validate their account. The function should return a string that supports HTML, which can optionally be a full HTML email.

1

import type {CollectionConfig}from'payload'

2

3

exportconstCustomers:CollectionConfig={

4

// ...

5

auth:{

6

verify:{

7

generateEmailHTML:({ req, token, user })=>{

8

// Use the token provided to allow your user to verify their account

9

const url =\`https://yourfrontend.com/verify?token=${token}\`

10

11

return\`Hey ${user.email}, verify your email by clicking here: ${url}\`

12

},

13

},

14

},

15

}

**Important:** If you specify a different URL to send your users to for email verification, such as a page on the frontend of your app or similar, you need to handle making the call to the Payload REST or GraphQL verification operation yourself on your frontend, using the token that was provided for you. Above, it was passed via query parameter.

[**generateEmailSubject**](https://payloadcms.com/docs/authentication/email#generateemailsubject)

Similarly to the above `generateEmailHTML`, you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.

1

import type {CollectionConfig}from'payload'

2

3

exportconstCustomers:CollectionConfig={

4

// ...

5

auth:{

6

verify:{

7

generateEmailSubject:({ req, user })=>{

8

return\`Hey ${user.email}, reset your password!\`;

9

}

10

}

11

}

12

}

[**Forgot Password**](https://payloadcms.com/docs/authentication/email#forgot-password)

You can customize how the Forgot Password workflow operates with the following options on the `auth.forgotPassword` property:

1

import type {CollectionConfig}from'payload'

2

3

exportconstCustomers:CollectionConfig={

4

// ...

5

auth:{

6

forgotPassword:{

7

// ...

8

},

9

},

10

}

The following options are available:

| Option | Description |
| --- | --- |
| `expiration` | Configure how long password reset tokens remain valid, specified in milliseconds. |
| `generateEmailHTML` | Allows for overriding the HTML within emails that are sent to users attempting to reset their password. [More details](https://payloadcms.com/docs/authentication/email#generateEmailHTML). |
| `generateEmailSubject` | Allows for overriding the subject of the email that is sent to users attempting to reset their password. [More details](https://payloadcms.com/docs/authentication/email#generateEmailSubject). |

[**generateEmailHTML**](https://payloadcms.com/docs/authentication/email#generateemailhtml)

This function allows for overriding the HTML within emails that are sent to users attempting to reset their password. The function should return a string that supports HTML, which can be a full HTML email.

1

import type {CollectionConfig}from'payload'

2

3

exportconstCustomers:CollectionConfig={

4

// ...

5

auth:{

6

forgotPassword:{

7

generateEmailHTML:({ req, token, user })=>{

8

// Use the token provided to allow your user to reset their password

9

const resetPasswordURL =\`https://yourfrontend.com/reset-password?token=${token}\`

10

11

return\`

12

<!doctype html>

13

<html>

14

<body>

15

<h1>Here is my custom email template!</h1>

16

<p>Hello, ${user.email}!</p>

17

<p>Click below to reset your password.</p>

18

<p>

19

<a href="${resetPasswordURL}">${resetPasswordURL}</a>

20

</p>

21

</body>

22

</html>

23

\`

24

},

25

},

26

},

27

}

**Important:** If you specify a different URL to send your users to for resetting their password, such as a page on the frontend of your app or similar, you need to handle making the call to the Payload REST or GraphQL reset-password operation yourself on your frontend, using the token that was provided for you. Above, it was passed via query parameter.

**Tip:** HTML templating can be used to create custom email templates, inline CSS automatically, and more. You can make a reusable function that standardizes all email sent from Payload, which makes sending custom emails more DRY. Payload doesn't ship with an HTML templating engine, so you are free to choose your own.

The following arguments are passed to the `generateEmailHTML` function:

| Argument | Description |
| --- | --- |
| `req` | The request object. |
| `token` | The token that is generated for the user to reset their password. |
| `user` | The user document that is attempting to reset their password. |

[**generateEmailSubject**](https://payloadcms.com/docs/authentication/email#generateemailsubject)

Similarly to the above `generateEmailHTML`, you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.

1

import type {CollectionConfig}from'payload'

2

3

exportconstCustomers:CollectionConfig={

4

// ...

5

auth:{

6

forgotPassword:{

7

generateEmailSubject:({ req, user })=>{

8

return\`Hey ${user.email}, reset your password!\`;

9

}

10

}

11

}

12

}

The following arguments are passed to the `generateEmailSubject` function:

| Argument | Description |
| --- | --- |
| `req` | The request object. |
| `user` | The user document that is attempting to reset their password. |

[Next \\
**JWT Strategy**](https://payloadcms.com/docs/authentication/jwt)

